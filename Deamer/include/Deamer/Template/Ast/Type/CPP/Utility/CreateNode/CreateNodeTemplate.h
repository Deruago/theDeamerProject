#ifndef DEAMER_TEMPLATES_AST_TYPE_CPP_CREATENODETEMPLATE_h
#define DEAMER_TEMPLATES_AST_TYPE_CPP_CREATENODETEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::ast::type::cpp
{
	/*!	\class CreateNodeTemplate
	 *
	 *	\brief Generates code for "CreateNodeTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class CreateNodeTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			arguments_dispatcher_,
			class_name_,
			file_,
			get_node_create_node_,
			header_guard_,
			language_name_,
			language_name_underscore_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			multi_get_node_create_node_,
			multi_type_node_include_section_,
			node_enum_include_,
			node_name_,
			node_type_include_,
			node_type_include_section_,
			node_type_to_enum_relation_include_,
			nonterminal_arguments_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			single_get_node_create_node_,
			single_type_node_include_section_,
			terminal_arguments_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope: {
				return "Scope";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				arguments_dispatcher_: {
				return "arguments_dispatcher";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::class_name_: {
				return "class_name";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				get_node_create_node_: {
				return "get_node_create_node";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::header_guard_: {
				return "header_guard";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::language_name_: {
				return "language_name";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				language_name_underscore_: {
				return "language_name_underscore";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				multi_get_node_create_node_: {
				return "multi_get_node_create_node";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				multi_type_node_include_section_: {
				return "multi_type_node_include_section";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				node_enum_include_: {
				return "node_enum_include";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::node_name_: {
				return "node_name";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				node_type_include_: {
				return "node_type_include";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				node_type_include_section_: {
				return "node_type_include_section";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				node_type_to_enum_relation_include_: {
				return "node_type_to_enum_relation_include";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				nonterminal_arguments_: {
				return "nonterminal_arguments";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				single_get_node_create_node_: {
				return "single_get_node_create_node";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				single_type_node_include_section_: {
				return "single_type_node_include_section";
			}

			case ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
				terminal_arguments_: {
				return "terminal_arguments";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type type =
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType scope_type =
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType scope_type_,
				bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;
			}

			VariableScope(
				const char* text,
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType scope_type_,
				bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;
			}

			VariableScope(
				std::vector<VariableBase*> variable,
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType scope_type_,
				bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Upper_,
					  true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Lower_,
					  true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Snake_,
					  true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Slash_,
					  true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::
									DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ = new VariableScope(
				::deamer::templates::ast::type::cpp::CreateNodeTemplate::ScopeType::Variable_Field_,
				true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::ast::type::cpp::CreateNodeTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_arguments_dispatcher_ : public VariableScopes
		{
			static constexpr auto name = "arguments_dispatcher_";

			Variable_arguments_dispatcher_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					arguments_dispatcher_;
			}

			virtual ~Variable_arguments_dispatcher_() override = default;

			Variable_arguments_dispatcher_(CreateNodeTemplate* createnodetemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					arguments_dispatcher_;
			}

			Variable_arguments_dispatcher_&
			operator=(const Variable_arguments_dispatcher_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_class_name_ : public VariableScopes
		{
			static constexpr auto name = "class_name_";

			Variable_class_name_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::class_name_;
			}

			virtual ~Variable_class_name_() override = default;

			Variable_class_name_(CreateNodeTemplate* createnodetemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::class_name_;
			}

			Variable_class_name_& operator=(const Variable_class_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(CreateNodeTemplate* createnodetemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#ifndef "),
					 GenerateVariable(createnodetemplate_->header_guard_->This()),
					 GenerateVariable("\n#define "),
					 GenerateVariable(createnodetemplate_->header_guard_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(createnodetemplate_->node_enum_include_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(createnodetemplate_->node_type_include_section_->This()),
					 GenerateVariable("\n\n#include <Deamer/External/Cpp/Ast/Node"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <Deamer/External/Cpp/Lexer/TerminalObject"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <string>\n#include <vector>\n\nnamespace "),
					 GenerateVariable(createnodetemplate_->language_name_->This()),
					 GenerateVariable(" "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace ast "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace utility "),
					 GenerateVariable("{"),
					 GenerateVariable(" \n\n\tstruct CreateNode\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\tprivate:\n\t\tstd::string nodeValue;\n\t\tstd::size_t nodeType = "
						 "0;\n\t\t\n\t\tstd::vector<::deamer::external::cpp::ast::Node*> "
						 "nodes;\n\t\tstd::vector<std::size_t> baseValues;\n\n\t\tint lineNumber = "
						 "-1;\n\t\tint columnNumber = -1;\n\n\t\tstd::size_t productionRuleId = "
						 "0;\n\t\t::deamer::external::cpp::ast::ProductionRuleType "
						 "productionRuleType "
						 "=\n\t\t\t\t\t::deamer::external::cpp::ast::ProductionRuleType::unknown;"
						 "\n\t\n\tpublic:\n\t\tCreateNode() = default;\n\t\t~CreateNode() = "
						 "default;\n\n\tpublic:\n\t\tCreateNode& Node(const "
						 "::deamer::external::cpp::lexer::TerminalObject* terminalObject)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\tnodeValue = terminalObject->GetValue();\n\t\t\tnodeType = "
						 "terminalObject->GetType();\n\t\t\t\n\t\t\tlineNumber = "
						 "terminalObject->GetLineNumber();\n\t\t\tcolumnNumber = "
						 "terminalObject->GetColumnNumber();\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tCreateNode& Node(std::size_t nodeType_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tnodeType = nodeType_;\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\ttemplate<typename T, std::enable_if_t<std::is_enum_v<T>, bool> = "
						 "true>\n\t\tCreateNode& Node(T nodeType_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\treturn Node(static_cast<std::size_t>(nodeType_));\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\tCreateNode& ProductionRule(std::size_t "
						 "productionRuleId_,\n\t\t\t::deamer::external::cpp::ast::"
						 "ProductionRuleType productionRuleType_ = "
						 "::deamer::external::cpp::ast::ProductionRuleType::user)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\tproductionRuleId = productionRuleId_;\n\t\t\tproductionRuleType "
						 "= productionRuleType_;\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tCreateNode& "
									  "SubNode(::deamer::external::cpp::lexer::TerminalObject* "
									  "terminalObject)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tCreateNode tmp"),
					 GenerateVariable("{"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\t\t\t\n\t\t\ttmp"),
					 GenerateVariable("."),
					 GenerateVariable("Node(terminalObject);\n\t\t\tnodes"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(tmp"),
					 GenerateVariable("."),
					 GenerateVariable("GetNode());\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\tCreateNode& SubNode(::deamer::external::cpp::ast::Node* "
						 "subNode_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tnodes"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(subNode_);\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\t::deamer::external::cpp::ast::Node* GetNode()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tswitch(static_cast<::"),
					 GenerateVariable(createnodetemplate_->language_name_->This()),
					 GenerateVariable("::ast::Type>(nodeType))\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tcase ::"),
					 GenerateVariable(createnodetemplate_->language_name_->This()),
					 GenerateVariable("::ast::Type::deamerreserved_unknown: "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn new "
									  "::deamer::external::cpp::ast::Node(\n\t\t\t\t\tdeamer::"
									  "external::cpp::ast::NodeInformation"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t\t\tnodeType, deamer::external::cpp::ast::NodeValue::terminal, "
						 "nodeValue,\n\t\t\t\t\t\tlineNumber, columnNumber"),
					 GenerateVariable("}"),
					 GenerateVariable(");\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n"),
					 GenerateVariable(createnodetemplate_->get_node_create_node_->Variable_Field()),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn nullptr;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n"),
					 GenerateVariable("}}"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n#endif // "),
					 GenerateVariable(createnodetemplate_->header_guard_->This())}));
				Content_->type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable(createnodetemplate_->class_name_->This())}));
				File_name_->type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::ast::type::cpp")}));
				Namespace_->type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_get_node_create_node_ : public VariableScopes
		{
			static constexpr auto name = "get_node_create_node_";

			Variable_get_node_create_node_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					get_node_create_node_;
			}

			virtual ~Variable_get_node_create_node_() override = default;

			Variable_get_node_create_node_(CreateNodeTemplate* createnodetemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					get_node_create_node_;
			}

			Variable_get_node_create_node_&
			operator=(const Variable_get_node_create_node_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_header_guard_ : public VariableScopes
		{
			static constexpr auto name = "header_guard_";

			Variable_header_guard_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::header_guard_;
			}

			virtual ~Variable_header_guard_() override = default;

			Variable_header_guard_(CreateNodeTemplate* createnodetemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::header_guard_;
			}

			Variable_header_guard_& operator=(const Variable_header_guard_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(CreateNodeTemplate* createnodetemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_underscore_ : public VariableScopes
		{
			static constexpr auto name = "language_name_underscore_";

			Variable_language_name_underscore_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					language_name_underscore_;
			}

			virtual ~Variable_language_name_underscore_() override = default;

			Variable_language_name_underscore_(CreateNodeTemplate* createnodetemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					language_name_underscore_;
			}

			Variable_language_name_underscore_&
			operator=(const Variable_language_name_underscore_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(CreateNodeTemplate* createnodetemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(CreateNodeTemplate* createnodetemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(CreateNodeTemplate* createnodetemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_multi_get_node_create_node_ : public VariableScopes
		{
			static constexpr auto name = "multi_get_node_create_node_";

			Variable_multi_get_node_create_node_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					multi_get_node_create_node_;
			}

			virtual ~Variable_multi_get_node_create_node_() override = default;

			Variable_multi_get_node_create_node_(CreateNodeTemplate* createnodetemplate_,
												 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					multi_get_node_create_node_;
			}

			Variable_multi_get_node_create_node_&
			operator=(const Variable_multi_get_node_create_node_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_multi_type_node_include_section_ : public VariableScopes
		{
			static constexpr auto name = "multi_type_node_include_section_";

			Variable_multi_type_node_include_section_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					multi_type_node_include_section_;
			}

			virtual ~Variable_multi_type_node_include_section_() override = default;

			Variable_multi_type_node_include_section_(CreateNodeTemplate* createnodetemplate_,
													  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					multi_type_node_include_section_;
			}

			Variable_multi_type_node_include_section_&
			operator=(const Variable_multi_type_node_include_section_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_include_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_include_";

			Variable_node_enum_include_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_enum_include_;
			}

			virtual ~Variable_node_enum_include_() override = default;

			Variable_node_enum_include_(CreateNodeTemplate* createnodetemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_enum_include_;
			}

			Variable_node_enum_include_& operator=(const Variable_node_enum_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_name_ : public VariableScopes
		{
			static constexpr auto name = "node_name_";

			Variable_node_name_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::node_name_;
			}

			virtual ~Variable_node_name_() override = default;

			Variable_node_name_(CreateNodeTemplate* createnodetemplate_,
								const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::node_name_;
			}

			Variable_node_name_& operator=(const Variable_node_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_include_ : public VariableScopes
		{
			static constexpr auto name = "node_type_include_";

			Variable_node_type_include_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_type_include_;
			}

			virtual ~Variable_node_type_include_() override = default;

			Variable_node_type_include_(CreateNodeTemplate* createnodetemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_type_include_;
			}

			Variable_node_type_include_& operator=(const Variable_node_type_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_include_section_ : public VariableScopes
		{
			static constexpr auto name = "node_type_include_section_";

			Variable_node_type_include_section_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_type_include_section_;
			}

			virtual ~Variable_node_type_include_section_() override = default;

			Variable_node_type_include_section_(CreateNodeTemplate* createnodetemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_type_include_section_;
			}

			Variable_node_type_include_section_&
			operator=(const Variable_node_type_include_section_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_to_enum_relation_include_ : public VariableScopes
		{
			static constexpr auto name = "node_type_to_enum_relation_include_";

			Variable_node_type_to_enum_relation_include_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_type_to_enum_relation_include_;
			}

			virtual ~Variable_node_type_to_enum_relation_include_() override = default;

			Variable_node_type_to_enum_relation_include_(
				CreateNodeTemplate* createnodetemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					node_type_to_enum_relation_include_;
			}

			Variable_node_type_to_enum_relation_include_&
			operator=(const Variable_node_type_to_enum_relation_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_arguments_ : public VariableScopes
		{
			static constexpr auto name = "nonterminal_arguments_";

			Variable_nonterminal_arguments_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					nonterminal_arguments_;
			}

			virtual ~Variable_nonterminal_arguments_() override = default;

			Variable_nonterminal_arguments_(CreateNodeTemplate* createnodetemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					nonterminal_arguments_;
			}

			Variable_nonterminal_arguments_&
			operator=(const Variable_nonterminal_arguments_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(CreateNodeTemplate* createnodetemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(CreateNodeTemplate* createnodetemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(CreateNodeTemplate* createnodetemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_single_get_node_create_node_ : public VariableScopes
		{
			static constexpr auto name = "single_get_node_create_node_";

			Variable_single_get_node_create_node_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					single_get_node_create_node_;
			}

			virtual ~Variable_single_get_node_create_node_() override = default;

			Variable_single_get_node_create_node_(CreateNodeTemplate* createnodetemplate_,
												  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					single_get_node_create_node_;
			}

			Variable_single_get_node_create_node_&
			operator=(const Variable_single_get_node_create_node_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_single_type_node_include_section_ : public VariableScopes
		{
			static constexpr auto name = "single_type_node_include_section_";

			Variable_single_type_node_include_section_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					single_type_node_include_section_;
			}

			virtual ~Variable_single_type_node_include_section_() override = default;

			Variable_single_type_node_include_section_(CreateNodeTemplate* createnodetemplate_,
													   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					single_type_node_include_section_;
			}

			Variable_single_type_node_include_section_&
			operator=(const Variable_single_type_node_include_section_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_arguments_ : public VariableScopes
		{
			static constexpr auto name = "terminal_arguments_";

			Variable_terminal_arguments_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					terminal_arguments_;
			}

			virtual ~Variable_terminal_arguments_() override = default;

			Variable_terminal_arguments_(CreateNodeTemplate* createnodetemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::CreateNodeTemplate::Type::
					terminal_arguments_;
			}

			Variable_terminal_arguments_& operator=(const Variable_terminal_arguments_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. CreateNodeTemplate.member = "auto-generated";
		Variable_arguments_dispatcher_* arguments_dispatcher_ =
			new Variable_arguments_dispatcher_();
		Variable_class_name_* class_name_ = new Variable_class_name_();
		Variable_file_* file_ = new Variable_file_();
		Variable_get_node_create_node_* get_node_create_node_ =
			new Variable_get_node_create_node_();
		Variable_header_guard_* header_guard_ = new Variable_header_guard_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_language_name_underscore_* language_name_underscore_ =
			new Variable_language_name_underscore_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_multi_get_node_create_node_* multi_get_node_create_node_ =
			new Variable_multi_get_node_create_node_();
		Variable_multi_type_node_include_section_* multi_type_node_include_section_ =
			new Variable_multi_type_node_include_section_();
		Variable_node_enum_include_* node_enum_include_ = new Variable_node_enum_include_();
		Variable_node_name_* node_name_ = new Variable_node_name_();
		Variable_node_type_include_* node_type_include_ = new Variable_node_type_include_();
		Variable_node_type_include_section_* node_type_include_section_ =
			new Variable_node_type_include_section_();
		Variable_node_type_to_enum_relation_include_* node_type_to_enum_relation_include_ =
			new Variable_node_type_to_enum_relation_include_();
		Variable_nonterminal_arguments_* nonterminal_arguments_ =
			new Variable_nonterminal_arguments_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_single_get_node_create_node_* single_get_node_create_node_ =
			new Variable_single_get_node_create_node_();
		Variable_single_type_node_include_section_* single_type_node_include_section_ =
			new Variable_single_type_node_include_section_();
		Variable_terminal_arguments_* terminal_arguments_ = new Variable_terminal_arguments_();

	public:
		CreateNodeTemplate()
		{
			*arguments_dispatcher_ =
				Variable_arguments_dispatcher_(this, std::vector<VariableBase*>({}));
			*class_name_ = Variable_class_name_(
				this, std::vector<VariableBase*>({GenerateVariable("CreateNode")}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*get_node_create_node_ =
				Variable_get_node_create_node_(this, std::vector<VariableBase*>({}));
			*header_guard_ = Variable_header_guard_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(language_name_underscore_->Upper()),
						   GenerateVariable("_AST_UTILITY_"),
						   GenerateVariable(class_name_->Upper()), GenerateVariable("_H")}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*language_name_underscore_ = Variable_language_name_underscore_(
				this, std::vector<VariableBase*>({GenerateVariable(language_name_->Underscore())}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*multi_get_node_create_node_ = Variable_multi_get_node_create_node_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t\t\tcase ::"), GenerateVariable(language_name_->This()),
					 GenerateVariable("::ast::Type::"), GenerateVariable(node_name_->This()),
					 GenerateVariable(": "), GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn new ::"),
					 GenerateVariable(language_name_->This()), GenerateVariable("::ast::node::"),
					 GenerateVariable(node_name_->This()), GenerateVariable("("),
					 GenerateVariable(arguments_dispatcher_->This()),
					 GenerateVariable(");\n\t\t\t"), GenerateVariable("}")}));
			*multi_type_node_include_section_ = Variable_multi_type_node_include_section_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(node_type_include_->Variable_Field())}));
			*node_enum_include_ = Variable_node_enum_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Ast/Enum/Type"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*node_name_ = Variable_node_name_(this, std::vector<VariableBase*>({}));
			*node_type_include_ = Variable_node_type_include_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Node/"), GenerateVariable(node_name_->This()),
					 GenerateVariable("."), GenerateVariable("h\"")}));
			*node_type_include_section_ =
				Variable_node_type_include_section_(this, std::vector<VariableBase*>({}));
			*node_type_to_enum_relation_include_ = Variable_node_type_to_enum_relation_include_(
				this,
				std::vector<VariableBase*>({GenerateVariable("#include \""),
											GenerateVariable(language_name_->This()),
											GenerateVariable("/Ast/Relation/NodeIsNonTerminal"),
											GenerateVariable("."), GenerateVariable("h\"")}));
			*nonterminal_arguments_ = Variable_nonterminal_arguments_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("{"),
						   GenerateVariable(
							   "nodeType, ::deamer::external::cpp::ast::NodeValue::nonterminal, "),
						   GenerateVariable("{"),
						   GenerateVariable("productionRuleId, productionRuleType"),
						   GenerateVariable("}}"), GenerateVariable(", nodes")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*single_get_node_create_node_ = Variable_single_get_node_create_node_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t\t\tcase ::"), GenerateVariable(language_name_->This()),
					 GenerateVariable("::ast::Type::"), GenerateVariable(node_name_->This()),
					 GenerateVariable(": "), GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn new ::deamer::external::cpp::ast::Node("),
					 GenerateVariable(arguments_dispatcher_->This()),
					 GenerateVariable(");\n\t\t\t"), GenerateVariable("}")}));
			*single_type_node_include_section_ =
				Variable_single_type_node_include_section_(this, std::vector<VariableBase*>({}));
			*terminal_arguments_ = Variable_terminal_arguments_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("{"),
						   GenerateVariable(
							   "nodeType, ::deamer::external::cpp::ast::NodeValue::terminal, "
							   "nodeValue, lineNumber, columnNumber"),
						   GenerateVariable("}")}));

			variables_.emplace_back(arguments_dispatcher_);
			variables_.emplace_back(class_name_);
			variables_.emplace_back(file_);
			variables_.emplace_back(get_node_create_node_);
			variables_.emplace_back(header_guard_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(language_name_underscore_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(multi_get_node_create_node_);
			variables_.emplace_back(multi_type_node_include_section_);
			variables_.emplace_back(node_enum_include_);
			variables_.emplace_back(node_name_);
			variables_.emplace_back(node_type_include_);
			variables_.emplace_back(node_type_include_section_);
			variables_.emplace_back(node_type_to_enum_relation_include_);
			variables_.emplace_back(nonterminal_arguments_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(single_get_node_create_node_);
			variables_.emplace_back(single_type_node_include_section_);
			variables_.emplace_back(terminal_arguments_);
		}

		virtual ~CreateNodeTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_AST_TYPE_CPP_CREATENODETEMPLATE_h
