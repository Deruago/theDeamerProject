{{file.target_language}} = <C++>
{{file.file_name}} = <{{class_name}}>
{{file.namespace}} = <deamer::templates::ast::type::cpp>
{{file.extension}} = <h>

{{language_name_underscore}} = <{{language_name.Underscore}}>

{{header_guard}} = <{{language_name_underscore.Upper}}_AST_REFERENCE_{{class_name.Upper}}_H>

{{class_name}} = <Access>
{{const_qualifier}} = <const>
{{node_enum_to_type_relation_include}} = <#include "{{language_name}}/Ast/Relation/NodeEnumToType.h">
{{node_type_to_enum_relation_include}} = <#include "{{language_name}}/Ast/Relation/NodeTypeToEnum.h">
{{node_enum_isinlined_relation_include}} = <#include "{{language_name}}/Ast/Relation/NodeIsInlined.h">
{{node_enum_include}} = <#include "{{language_name}}/Ast/Enum/Type.h">
{{node_type_include}} = <#include "{{language_name}}/Ast/Node/{{node_name}}.h">

{{node_enum_to_type}} = <::{{language_name}}::ast::relation::NodeEnumToType_t>
{{node_type_to_enum}} = <::{{language_name}}::ast::relation::NodeTypeToEnum_v>
{{node_enum_type}} = <::{{language_name}}::ast::Type>
{{node_enum_value}} = <{{node_enum_type}}::{{node_name}}>
{{node_enum_target_value}} = <{{node_enum_type}}::{{node_target_name}}>

{{node_type}} = <::{{language_name}}::ast::node::{{node_name}}>
{{node_type_target}} = <::{{language_name}}::ast::node::{{node_target_name}}>

{{node_access_forward_declaration}} =
<	template{{left_angle_bracket}}{{right_angle_bracket}}
	struct {{class_name}}{{left_angle_bracket}}{{node_type}}{{right_angle_bracket}};>

{{node_access}} = <
	template{{left_angle_bracket}}{{right_angle_bracket}}
	struct {{class_name}}{{left_angle_bracket}}{{node_type}}{{right_angle_bracket}} : public {{class_name}}Base
	{
	protected:
		std::vector{{left_angle_bracket}}{{const_qualifier}} {{node_type}}*{{right_angle_bracket}} ts;

	public:
		{{class_name}}(std::vector{{left_angle_bracket}}{{const_qualifier}} {{node_type}}*{{right_angle_bracket}} ts_) : ts(std::move(ts_))
		{
		}

		{{class_name}}(const {{node_type}}& t) : ts({&t})
		{
		}

		{{class_name}}({{const_qualifier}} {{node_type}}* t) : ts({t})
		{
		}

		{{class_name}}() = default;

	public:
		{{class_name}}{{left_angle_bracket}}{{node_type}}{{right_angle_bracket}}& operator[](::std::size_t index)
		{
			if (index {{right_angle_bracket}}= ts.size())
			{
				ts.clear();
			}
			else
			{
				{{const_qualifier}} auto* const copy = ts[index];
				ts.clear();
				ts.push_back(copy);
			}

			return *this;
		}

		{{class_name}}{{left_angle_bracket}}{{node_type}}{{right_angle_bracket}}& operator()(::std::size_t indexBegin, ::std::size_t indexEnd)
		{
			// swap if the other is larger
			if (indexBegin {{right_angle_bracket}} indexEnd)
			{
				const auto tmp = indexBegin;
				indexBegin = indexEnd;
				indexEnd = tmp;
			}

			if (indexBegin {{right_angle_bracket}}= ts.size())
			{
				ts.clear();
			}
			else
			{
				std::vector{{left_angle_bracket}}{{const_qualifier}} {{node_type}}*{{right_angle_bracket}} temporaries;
				for (auto i = indexBegin; i {{left_angle_bracket}} ts.size() && i {{left_angle_bracket}}= indexEnd; i++)
				{
					temporaries.push_back(ts[i]);
				}
				ts.clear();
				ts = temporaries;
			}

			return *this;
		}

		std::vector{{left_angle_bracket}}{{const_qualifier}} {{node_type}}*{{right_angle_bracket}} GetContent()
		{
			return ts;
		}

	public:
		{{target_retrievement_function_declaration.Variable_Field}}
	};>

{{target_retrievement_function_implementation}} = <
		inline {{class_name}}{{left_angle_bracket}}{{node_type_target}}{{right_angle_bracket}} {{class_name}}{{left_angle_bracket}}{{node_type}}{{right_angle_bracket}}::{{node_target_name}}()
		{
			// Optimized search, if it fails continue using unoptimized search.

			// Unoptimized search
			return {{class_name}}{{left_angle_bracket}}{{node_type_target}}{{right_angle_bracket}}(Get{{left_angle_bracket}}{{node_enum_target_value}}{{right_angle_bracket}}(ts));
		}>

{{target_retrievement_function_declaration}} = <{{class_name}}{{left_angle_bracket}}{{node_type_target}}{{right_angle_bracket}} {{node_target_name}}();>
