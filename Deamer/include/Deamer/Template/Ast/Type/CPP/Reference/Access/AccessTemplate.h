#ifndef DEAMER_TEMPLATES_AST_TYPE_CPP_ACCESSTEMPLATE_h
#define DEAMER_TEMPLATES_AST_TYPE_CPP_ACCESSTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::ast::type::cpp
{
	/*!	\class AccessTemplate
	 *
	 *	\brief Generates code for "AccessTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class AccessTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			class_name_,
			class_name_node_target_type_,
			class_name_node_type_,
			const_qualifier_,
			file_,
			header_guard_,
			language_name_,
			language_name_underscore_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			node_access_,
			node_access_forward_declaration_,
			node_enum_include_,
			node_enum_isinlined_relation_include_,
			node_enum_target_value_,
			node_enum_to_type_,
			node_enum_to_type_relation_include_,
			node_enum_type_,
			node_enum_value_,
			node_name_,
			node_target_name_,
			node_type_,
			node_type_include_,
			node_type_target_,
			node_type_to_enum_,
			node_type_to_enum_relation_include_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			target_retrievement_function_declaration_,
			target_retrievement_function_implementation_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::ast::type::cpp::AccessTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::class_name_: {
				return "class_name";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				class_name_node_target_type_: {
				return "class_name_node_target_type";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::class_name_node_type_: {
				return "class_name_node_type";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::const_qualifier_: {
				return "const_qualifier";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::header_guard_: {
				return "header_guard";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::language_name_: {
				return "language_name";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				language_name_underscore_: {
				return "language_name_underscore";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_access_: {
				return "node_access";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				node_access_forward_declaration_: {
				return "node_access_forward_declaration";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_include_: {
				return "node_enum_include";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				node_enum_isinlined_relation_include_: {
				return "node_enum_isinlined_relation_include";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				node_enum_target_value_: {
				return "node_enum_target_value";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_to_type_: {
				return "node_enum_to_type";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				node_enum_to_type_relation_include_: {
				return "node_enum_to_type_relation_include";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_type_: {
				return "node_enum_type";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_value_: {
				return "node_enum_value";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_name_: {
				return "node_name";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_target_name_: {
				return "node_target_name";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_: {
				return "node_type";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_include_: {
				return "node_type_include";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_target_: {
				return "node_type_target";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_to_enum_: {
				return "node_type_to_enum";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				node_type_to_enum_relation_include_: {
				return "node_type_to_enum_relation_include";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				target_retrievement_function_declaration_: {
				return "target_retrievement_function_declaration";
			}

			case ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
				target_retrievement_function_implementation_: {
				return "target_retrievement_function_implementation";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::ast::type::cpp::AccessTemplate::Type type =
				::deamer::templates::ast::type::cpp::AccessTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType scope_type =
				::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(
				::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType scope_type_,
				bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;
			}

			VariableScope(
				const char* text,
				::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType scope_type_,
				bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;
			}

			VariableScope(
				std::vector<VariableBase*> variable,
				::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType scope_type_,
				bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Upper_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Lower_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Snake_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Slash_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::DoubleColon_,
					  true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ = new VariableScope(
				::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::Variable_Field_,
				true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::ast::type::cpp::AccessTemplate::ScopeType::
									  Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_class_name_ : public VariableScopes
		{
			static constexpr auto name = "class_name_";

			Variable_class_name_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::class_name_;
			}

			virtual ~Variable_class_name_() override = default;

			Variable_class_name_(AccessTemplate* accesstemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::class_name_;
			}

			Variable_class_name_& operator=(const Variable_class_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_class_name_node_target_type_ : public VariableScopes
		{
			static constexpr auto name = "class_name_node_target_type_";

			Variable_class_name_node_target_type_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					class_name_node_target_type_;
			}

			virtual ~Variable_class_name_node_target_type_() override = default;

			Variable_class_name_node_target_type_(AccessTemplate* accesstemplate_,
												  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					class_name_node_target_type_;
			}

			Variable_class_name_node_target_type_&
			operator=(const Variable_class_name_node_target_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_class_name_node_type_ : public VariableScopes
		{
			static constexpr auto name = "class_name_node_type_";

			Variable_class_name_node_type_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					class_name_node_type_;
			}

			virtual ~Variable_class_name_node_type_() override = default;

			Variable_class_name_node_type_(AccessTemplate* accesstemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					class_name_node_type_;
			}

			Variable_class_name_node_type_&
			operator=(const Variable_class_name_node_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_const_qualifier_ : public VariableScopes
		{
			static constexpr auto name = "const_qualifier_";

			Variable_const_qualifier_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::const_qualifier_;
			}

			virtual ~Variable_const_qualifier_() override = default;

			Variable_const_qualifier_(AccessTemplate* accesstemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::const_qualifier_;
			}

			Variable_const_qualifier_& operator=(const Variable_const_qualifier_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(AccessTemplate* accesstemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#ifndef "),
					 GenerateVariable(accesstemplate_->header_guard_->This()),
					 GenerateVariable("\n#define "),
					 GenerateVariable(accesstemplate_->header_guard_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(accesstemplate_->node_enum_to_type_relation_include_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(accesstemplate_->node_type_to_enum_relation_include_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 accesstemplate_->node_enum_isinlined_relation_include_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(accesstemplate_->node_enum_include_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(accesstemplate_->node_type_include_->Variable_Field()),
					 GenerateVariable("\n\n#include <vector>\n#include <utility>\n\nnamespace "),
					 GenerateVariable(accesstemplate_->language_name_->This()),
					 GenerateVariable(" "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace ast "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace reference "),
					 GenerateVariable("{"),
					 GenerateVariable(" \n\n\tstruct "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("Base\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\t\n\tpublic:\n\t\t"),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("Base() = default;\n\n\tprotected:\n\t\ttemplate<"),
					 GenerateVariable(accesstemplate_->node_enum_type_->This()),
					 GenerateVariable(" T>\n\t\tvoid Get(std::vector<"),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(accesstemplate_->node_enum_to_type_->This()),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable("T"),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("*>& foundNodes, "),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" ::deamer::external::cpp::ast::Node* currentNode)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tfor("),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" auto* const node : currentNode->GetNodes())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tif (node->GetType() == static_cast"),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable("::std::size_t"),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("(T))\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tfoundNodes"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(static_cast"),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable("  "),
					 GenerateVariable(accesstemplate_->node_enum_to_type_->This()),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable("T"),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("*"),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("(node));\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\telse if (::"),
					 GenerateVariable(accesstemplate_->language_name_->This()),
					 GenerateVariable("::ast::relation::NodeIsInlined(static_cast"),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable(accesstemplate_->node_enum_type_->This()),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("(node->GetType())))\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tGet<T>(foundNodes, node);\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\ttemplate<"),
					 GenerateVariable(accesstemplate_->node_enum_type_->This()),
					 GenerateVariable(" T, typename Q>\n\t\tinline std::vector<"),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(accesstemplate_->node_enum_to_type_->This()),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable("T"),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("*> Get(std::vector<"),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" Q*>& currentNodes)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tstd::vector<"),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(accesstemplate_->node_enum_to_type_->This()),
					 GenerateVariable(accesstemplate_->left_angle_bracket_->This()),
					 GenerateVariable("T"),
					 GenerateVariable(accesstemplate_->right_angle_bracket_->This()),
					 GenerateVariable("*> foundNodes;\n\n\t\t\tfor ("),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" auto* const currentNode : currentNodes)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t"),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("Base::Get<T>(foundNodes, currentNode);\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn foundNodes;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t/*!\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("class AccessTemplateBase\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("brief Used to access AST nodes"),
					 GenerateVariable("."),
					 GenerateVariable(" It contains various helper functions to ease navigation "
									  "through AST nodes"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("details This class contains the type dependent "
									  "implementation of Access<T>"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t *\tRefrain from using this class, as there is no "
									  "backwards compatibility\n\t *\tguarantee of this "
									  "implementation class,\n\t *\tUse Access<T> instead, this is "
									  "backwards compatible and offers different benefits"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("see Access\n\t */\n\ttemplate<typename T>\n\tstruct "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable(" : public AccessBase\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("() = delete;\n\t\t~"),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("() = delete;\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t/*! "),
					 GenerateVariable("\\"),
					 GenerateVariable("class Access\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("brief Used to access AST nodes"),
					 GenerateVariable("."),
					 GenerateVariable(" It contains various helper functions to ease navigation "
									  "through AST nodes"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("details Type dispatcher for logic"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("see AccessTemplateBase\n\t */\n\ttemplate<typename "
									  "T>\n\tstruct Access : public "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("<T>\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\tAccess(std::vector<"),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" T*> ts_) : "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("<T>(ts_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tAccess(const T& t) : "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("<T>(t)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tAccess("),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" T* t) : "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("<T>(t)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tAccess(const "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("<T>& rhs) : "),
					 GenerateVariable(accesstemplate_->class_name_->This()),
					 GenerateVariable("<T>(rhs)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tAccess() = default;\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n"),
					 GenerateVariable(
						 accesstemplate_->node_access_forward_declaration_->Variable_Field()),
					 GenerateVariable("\n\n\t"),
					 GenerateVariable(accesstemplate_->node_access_->Variable_Field()),
					 GenerateVariable("\n\n\t"),
					 GenerateVariable(accesstemplate_->target_retrievement_function_implementation_
										  ->Variable_Field()),
					 GenerateVariable("\n\n\t/*!\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("class Access_if\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("brief Accesses the node if it is of the given type"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t *\n\t *\t"),
					 GenerateVariable("\\"),
					 GenerateVariable("note A lambda has to be supplied as second argument with "
									  "paramater: \"Access<T>\""),
					 GenerateVariable("."),
					 GenerateVariable("\n\t */\n\ttemplate<typename T>\n\tstruct Access_if\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(
						 " ::deamer::external::cpp::ast::Node* node;\n\n\t\ttemplate<typename "
						 "FunctionType>\n\t\tAccess_if("),
					 GenerateVariable(accesstemplate_->const_qualifier_->This()),
					 GenerateVariable(" ::deamer::external::cpp::ast::Node* node_, FunctionType "
									  "function) : node(node_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tif (node->GetType() == static_cast<::std::size_t>("),
					 GenerateVariable(accesstemplate_->node_type_to_enum_->This()),
					 GenerateVariable("<T>))\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\tfunction(Access<T>(static_cast<const T*>(node)));\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n"),
					 GenerateVariable("}}"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n#endif // "),
					 GenerateVariable(accesstemplate_->header_guard_->This())}));
				Content_->type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("Access")}));
				File_name_->type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::ast::type::cpp")}));
				Namespace_->type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_header_guard_ : public VariableScopes
		{
			static constexpr auto name = "header_guard_";

			Variable_header_guard_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::header_guard_;
			}

			virtual ~Variable_header_guard_() override = default;

			Variable_header_guard_(AccessTemplate* accesstemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::header_guard_;
			}

			Variable_header_guard_& operator=(const Variable_header_guard_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(AccessTemplate* accesstemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_underscore_ : public VariableScopes
		{
			static constexpr auto name = "language_name_underscore_";

			Variable_language_name_underscore_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					language_name_underscore_;
			}

			virtual ~Variable_language_name_underscore_() override = default;

			Variable_language_name_underscore_(AccessTemplate* accesstemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					language_name_underscore_;
			}

			Variable_language_name_underscore_&
			operator=(const Variable_language_name_underscore_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(AccessTemplate* accesstemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(AccessTemplate* accesstemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(AccessTemplate* accesstemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_access_ : public VariableScopes
		{
			static constexpr auto name = "node_access_";

			Variable_node_access_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_access_;
			}

			virtual ~Variable_node_access_() override = default;

			Variable_node_access_(AccessTemplate* accesstemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_access_;
			}

			Variable_node_access_& operator=(const Variable_node_access_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_access_forward_declaration_ : public VariableScopes
		{
			static constexpr auto name = "node_access_forward_declaration_";

			Variable_node_access_forward_declaration_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_access_forward_declaration_;
			}

			virtual ~Variable_node_access_forward_declaration_() override = default;

			Variable_node_access_forward_declaration_(AccessTemplate* accesstemplate_,
													  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_access_forward_declaration_;
			}

			Variable_node_access_forward_declaration_&
			operator=(const Variable_node_access_forward_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_include_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_include_";

			Variable_node_enum_include_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_include_;
			}

			virtual ~Variable_node_enum_include_() override = default;

			Variable_node_enum_include_(AccessTemplate* accesstemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_include_;
			}

			Variable_node_enum_include_& operator=(const Variable_node_enum_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_isinlined_relation_include_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_isinlined_relation_include_";

			Variable_node_enum_isinlined_relation_include_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_enum_isinlined_relation_include_;
			}

			virtual ~Variable_node_enum_isinlined_relation_include_() override = default;

			Variable_node_enum_isinlined_relation_include_(
				AccessTemplate* accesstemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_enum_isinlined_relation_include_;
			}

			Variable_node_enum_isinlined_relation_include_&
			operator=(const Variable_node_enum_isinlined_relation_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_target_value_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_target_value_";

			Variable_node_enum_target_value_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_enum_target_value_;
			}

			virtual ~Variable_node_enum_target_value_() override = default;

			Variable_node_enum_target_value_(AccessTemplate* accesstemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_enum_target_value_;
			}

			Variable_node_enum_target_value_&
			operator=(const Variable_node_enum_target_value_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_to_type_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_to_type_";

			Variable_node_enum_to_type_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_to_type_;
			}

			virtual ~Variable_node_enum_to_type_() override = default;

			Variable_node_enum_to_type_(AccessTemplate* accesstemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_to_type_;
			}

			Variable_node_enum_to_type_& operator=(const Variable_node_enum_to_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_to_type_relation_include_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_to_type_relation_include_";

			Variable_node_enum_to_type_relation_include_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_enum_to_type_relation_include_;
			}

			virtual ~Variable_node_enum_to_type_relation_include_() override = default;

			Variable_node_enum_to_type_relation_include_(
				AccessTemplate* accesstemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_enum_to_type_relation_include_;
			}

			Variable_node_enum_to_type_relation_include_&
			operator=(const Variable_node_enum_to_type_relation_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_type_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_type_";

			Variable_node_enum_type_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_type_;
			}

			virtual ~Variable_node_enum_type_() override = default;

			Variable_node_enum_type_(AccessTemplate* accesstemplate_,
									 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_type_;
			}

			Variable_node_enum_type_& operator=(const Variable_node_enum_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_enum_value_ : public VariableScopes
		{
			static constexpr auto name = "node_enum_value_";

			Variable_node_enum_value_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_value_;
			}

			virtual ~Variable_node_enum_value_() override = default;

			Variable_node_enum_value_(AccessTemplate* accesstemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_enum_value_;
			}

			Variable_node_enum_value_& operator=(const Variable_node_enum_value_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_name_ : public VariableScopes
		{
			static constexpr auto name = "node_name_";

			Variable_node_name_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_name_;
			}

			virtual ~Variable_node_name_() override = default;

			Variable_node_name_(AccessTemplate* accesstemplate_,
								const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_name_;
			}

			Variable_node_name_& operator=(const Variable_node_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_target_name_ : public VariableScopes
		{
			static constexpr auto name = "node_target_name_";

			Variable_node_target_name_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_target_name_;
			}

			virtual ~Variable_node_target_name_() override = default;

			Variable_node_target_name_(AccessTemplate* accesstemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_target_name_;
			}

			Variable_node_target_name_& operator=(const Variable_node_target_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_ : public VariableScopes
		{
			static constexpr auto name = "node_type_";

			Variable_node_type_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_;
			}

			virtual ~Variable_node_type_() override = default;

			Variable_node_type_(AccessTemplate* accesstemplate_,
								const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_;
			}

			Variable_node_type_& operator=(const Variable_node_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_include_ : public VariableScopes
		{
			static constexpr auto name = "node_type_include_";

			Variable_node_type_include_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_include_;
			}

			virtual ~Variable_node_type_include_() override = default;

			Variable_node_type_include_(AccessTemplate* accesstemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_include_;
			}

			Variable_node_type_include_& operator=(const Variable_node_type_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_target_ : public VariableScopes
		{
			static constexpr auto name = "node_type_target_";

			Variable_node_type_target_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_target_;
			}

			virtual ~Variable_node_type_target_() override = default;

			Variable_node_type_target_(AccessTemplate* accesstemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_target_;
			}

			Variable_node_type_target_& operator=(const Variable_node_type_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_to_enum_ : public VariableScopes
		{
			static constexpr auto name = "node_type_to_enum_";

			Variable_node_type_to_enum_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_to_enum_;
			}

			virtual ~Variable_node_type_to_enum_() override = default;

			Variable_node_type_to_enum_(AccessTemplate* accesstemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::node_type_to_enum_;
			}

			Variable_node_type_to_enum_& operator=(const Variable_node_type_to_enum_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_type_to_enum_relation_include_ : public VariableScopes
		{
			static constexpr auto name = "node_type_to_enum_relation_include_";

			Variable_node_type_to_enum_relation_include_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_type_to_enum_relation_include_;
			}

			virtual ~Variable_node_type_to_enum_relation_include_() override = default;

			Variable_node_type_to_enum_relation_include_(
				AccessTemplate* accesstemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					node_type_to_enum_relation_include_;
			}

			Variable_node_type_to_enum_relation_include_&
			operator=(const Variable_node_type_to_enum_relation_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(AccessTemplate* accesstemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(AccessTemplate* accesstemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(AccessTemplate* accesstemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::ast::type::cpp::AccessTemplate::Type::right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_target_retrievement_function_declaration_ : public VariableScopes
		{
			static constexpr auto name = "target_retrievement_function_declaration_";

			Variable_target_retrievement_function_declaration_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					target_retrievement_function_declaration_;
			}

			virtual ~Variable_target_retrievement_function_declaration_() override = default;

			Variable_target_retrievement_function_declaration_(
				AccessTemplate* accesstemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					target_retrievement_function_declaration_;
			}

			Variable_target_retrievement_function_declaration_&
			operator=(const Variable_target_retrievement_function_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_target_retrievement_function_implementation_ : public VariableScopes
		{
			static constexpr auto name = "target_retrievement_function_implementation_";

			Variable_target_retrievement_function_implementation_() : VariableScopes()
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					target_retrievement_function_implementation_;
			}

			virtual ~Variable_target_retrievement_function_implementation_() override = default;

			Variable_target_retrievement_function_implementation_(
				AccessTemplate* accesstemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::ast::type::cpp::AccessTemplate::Type::
					target_retrievement_function_implementation_;
			}

			Variable_target_retrievement_function_implementation_&
			operator=(const Variable_target_retrievement_function_implementation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. AccessTemplate.member = "auto-generated";
		Variable_class_name_* class_name_ = new Variable_class_name_();
		Variable_class_name_node_target_type_* class_name_node_target_type_ =
			new Variable_class_name_node_target_type_();
		Variable_class_name_node_type_* class_name_node_type_ =
			new Variable_class_name_node_type_();
		Variable_const_qualifier_* const_qualifier_ = new Variable_const_qualifier_();
		Variable_file_* file_ = new Variable_file_();
		Variable_header_guard_* header_guard_ = new Variable_header_guard_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_language_name_underscore_* language_name_underscore_ =
			new Variable_language_name_underscore_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_node_access_* node_access_ = new Variable_node_access_();
		Variable_node_access_forward_declaration_* node_access_forward_declaration_ =
			new Variable_node_access_forward_declaration_();
		Variable_node_enum_include_* node_enum_include_ = new Variable_node_enum_include_();
		Variable_node_enum_isinlined_relation_include_* node_enum_isinlined_relation_include_ =
			new Variable_node_enum_isinlined_relation_include_();
		Variable_node_enum_target_value_* node_enum_target_value_ =
			new Variable_node_enum_target_value_();
		Variable_node_enum_to_type_* node_enum_to_type_ = new Variable_node_enum_to_type_();
		Variable_node_enum_to_type_relation_include_* node_enum_to_type_relation_include_ =
			new Variable_node_enum_to_type_relation_include_();
		Variable_node_enum_type_* node_enum_type_ = new Variable_node_enum_type_();
		Variable_node_enum_value_* node_enum_value_ = new Variable_node_enum_value_();
		Variable_node_name_* node_name_ = new Variable_node_name_();
		Variable_node_target_name_* node_target_name_ = new Variable_node_target_name_();
		Variable_node_type_* node_type_ = new Variable_node_type_();
		Variable_node_type_include_* node_type_include_ = new Variable_node_type_include_();
		Variable_node_type_target_* node_type_target_ = new Variable_node_type_target_();
		Variable_node_type_to_enum_* node_type_to_enum_ = new Variable_node_type_to_enum_();
		Variable_node_type_to_enum_relation_include_* node_type_to_enum_relation_include_ =
			new Variable_node_type_to_enum_relation_include_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_target_retrievement_function_declaration_*
			target_retrievement_function_declaration_ =
				new Variable_target_retrievement_function_declaration_();
		Variable_target_retrievement_function_implementation_*
			target_retrievement_function_implementation_ =
				new Variable_target_retrievement_function_implementation_();

	public:
		AccessTemplate()
		{
			*class_name_ = Variable_class_name_(
				this, std::vector<VariableBase*>({GenerateVariable("AccessTemplateBase")}));
			*class_name_node_target_type_ = Variable_class_name_node_target_type_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(class_name_->This()), GenerateVariable("<"),
						   GenerateVariable(node_type_target_->This()), GenerateVariable(">")}));
			*class_name_node_type_ = Variable_class_name_node_type_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(class_name_->This()), GenerateVariable("<"),
						   GenerateVariable(node_type_->This()), GenerateVariable(">")}));
			*const_qualifier_ = Variable_const_qualifier_(
				this, std::vector<VariableBase*>({GenerateVariable("const")}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*header_guard_ = Variable_header_guard_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(language_name_underscore_->Upper()),
						   GenerateVariable("_AST_REFERENCE_"),
						   GenerateVariable(class_name_->Upper()), GenerateVariable("_H")}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*language_name_underscore_ = Variable_language_name_underscore_(
				this, std::vector<VariableBase*>({GenerateVariable(language_name_->Underscore())}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*node_access_ = Variable_node_access_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\ttemplate<>\n\tstruct "),
					 GenerateVariable(class_name_node_type_->This()),
					 GenerateVariable(" : public "),
					 GenerateVariable(class_name_->This()),
					 GenerateVariable("Base\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tprotected:\n\t\tstd::vector<"),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(node_type_->This()),
					 GenerateVariable("*> ts;\n\n\tpublic:\n\t\t"),
					 GenerateVariable(class_name_->This()),
					 GenerateVariable("(std::vector<"),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(node_type_->This()),
					 GenerateVariable("*> ts_) : ts(std::move(ts_))\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t"),
					 GenerateVariable(class_name_->This()),
					 GenerateVariable("(const "),
					 GenerateVariable(node_type_->This()),
					 GenerateVariable("& t) : ts("),
					 GenerateVariable("{"),
					 GenerateVariable("&t"),
					 GenerateVariable("}"),
					 GenerateVariable(")\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t"),
					 GenerateVariable(class_name_->This()),
					 GenerateVariable("("),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(node_type_->This()),
					 GenerateVariable("* t) : ts("),
					 GenerateVariable("{"),
					 GenerateVariable("t"),
					 GenerateVariable("}"),
					 GenerateVariable(")\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t"),
					 GenerateVariable(class_name_->This()),
					 GenerateVariable("() = default;\n\n\tpublic:\n\t\t"),
					 GenerateVariable(class_name_node_type_->This()),
					 GenerateVariable("& operator[](::std::size_t index)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tif (index >= ts"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tts"),
					 GenerateVariable("."),
					 GenerateVariable("clear();\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\telse\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t"),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" auto* const copy = ts[index];\n\t\t\t\tts"),
					 GenerateVariable("."),
					 GenerateVariable("clear();\n\t\t\t\tts"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(copy);\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t"),
					 GenerateVariable(class_name_node_type_->This()),
					 GenerateVariable(
						 "& operator()(::std::size_t indexBegin, ::std::size_t indexEnd)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t// swap if the other is larger\n\t\t\tif "
									  "(indexBegin > indexEnd)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tconst auto tmp = indexBegin;\n\t\t\t\tindexBegin "
									  "= indexEnd;\n\t\t\t\tindexEnd = tmp;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\tif (indexBegin >= ts"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tts"),
					 GenerateVariable("."),
					 GenerateVariable("clear();\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\telse\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tstd::vector<"),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(node_type_->This()),
					 GenerateVariable("*> temporaries;\n\t\t\t\tfor (auto i = indexBegin; i < ts"),
					 GenerateVariable("."),
					 GenerateVariable("size() && i <= indexEnd; i++)\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\ttemporaries"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(ts[i]);\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\tts"),
					 GenerateVariable("."),
					 GenerateVariable("clear();\n\t\t\t\tts = temporaries;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tstd::vector<"),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" "),
					 GenerateVariable(node_type_->This()),
					 GenerateVariable("*> GetContent()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn ts;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\tpublic:\n\t\t"),
					 GenerateVariable(target_retrievement_function_declaration_->Variable_Field()),
					 GenerateVariable("\n\n\t\ttemplate<typename FunctionType>\n\t\t"),
					 GenerateVariable(class_name_node_type_->This()),
					 GenerateVariable("& for_all(FunctionType function)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tfor ("),
					 GenerateVariable(const_qualifier_->This()),
					 GenerateVariable(" auto* const t : ts)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tfunction(t);\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn *this;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\tpublic:\n\t\tauto begin()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn ts"),
					 GenerateVariable("."),
					 GenerateVariable("begin();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\tauto cbegin()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn ts"),
					 GenerateVariable("."),
					 GenerateVariable("cbegin();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tauto end()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn ts"),
					 GenerateVariable("."),
					 GenerateVariable("end();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tauto cend()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn ts"),
					 GenerateVariable("."),
					 GenerateVariable("cend();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";")}));
			*node_access_forward_declaration_ = Variable_node_access_forward_declaration_(
				this, std::vector<VariableBase*>({GenerateVariable("\ttemplate<>\n\tstruct "),
												  GenerateVariable(class_name_node_type_->This()),
												  GenerateVariable(";")}));
			*node_enum_include_ = Variable_node_enum_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Ast/Enum/Type"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*node_enum_isinlined_relation_include_ = Variable_node_enum_isinlined_relation_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Ast/Relation/NodeIsInlined"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*node_enum_target_value_ = Variable_node_enum_target_value_(
				this, std::vector<VariableBase*>({GenerateVariable(node_enum_type_->This()),
												  GenerateVariable("::"),
												  GenerateVariable(node_target_name_->This())}));
			*node_enum_to_type_ = Variable_node_enum_to_type_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("::"), GenerateVariable(language_name_->This()),
						   GenerateVariable("::ast::relation::NodeEnumToType_t")}));
			*node_enum_to_type_relation_include_ = Variable_node_enum_to_type_relation_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Ast/Relation/NodeEnumToType"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*node_enum_type_ = Variable_node_enum_type_(
				this, std::vector<VariableBase*>({GenerateVariable("::"),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("::ast::Type")}));
			*node_enum_value_ = Variable_node_enum_value_(
				this, std::vector<VariableBase*>({GenerateVariable(node_enum_type_->This()),
												  GenerateVariable("::"),
												  GenerateVariable(node_name_->This())}));
			*node_name_ = Variable_node_name_(this, std::vector<VariableBase*>({}));
			*node_target_name_ = Variable_node_target_name_(this, std::vector<VariableBase*>({}));
			*node_type_ = Variable_node_type_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("::"), GenerateVariable(language_name_->This()),
					 GenerateVariable("::ast::node::"), GenerateVariable(node_name_->This())}));
			*node_type_include_ = Variable_node_type_include_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Node/"), GenerateVariable(node_name_->This()),
					 GenerateVariable("."), GenerateVariable("h\"")}));
			*node_type_target_ = Variable_node_type_target_(
				this, std::vector<VariableBase*>({GenerateVariable("::"),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("::ast::node::"),
												  GenerateVariable(node_target_name_->This())}));
			*node_type_to_enum_ = Variable_node_type_to_enum_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("::"), GenerateVariable(language_name_->This()),
						   GenerateVariable("::ast::relation::NodeTypeToEnum_v")}));
			*node_type_to_enum_relation_include_ = Variable_node_type_to_enum_relation_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Ast/Relation/NodeTypeToEnum"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*target_retrievement_function_declaration_ =
				Variable_target_retrievement_function_declaration_(
					this, std::vector<VariableBase*>(
							  {GenerateVariable(class_name_node_target_type_->This()),
							   GenerateVariable(" "), GenerateVariable(node_target_name_->This()),
							   GenerateVariable("();")}));
			*target_retrievement_function_implementation_ =
				Variable_target_retrievement_function_implementation_(
					this,
					std::vector<VariableBase*>(
						{GenerateVariable("\n\t\tinline "),
						 GenerateVariable(class_name_node_target_type_->This()),
						 GenerateVariable(" "), GenerateVariable(class_name_node_type_->This()),
						 GenerateVariable("::"), GenerateVariable(node_target_name_->This()),
						 GenerateVariable("()\n\t\t"), GenerateVariable("{"),
						 GenerateVariable("\n\t\t\t// Optimized search, if it fails continue using "
										  "unoptimized search"),
						 GenerateVariable("."),
						 GenerateVariable("\n\n\t\t\t// Unoptimized search\n\t\t\treturn "),
						 GenerateVariable(class_name_node_target_type_->This()),
						 GenerateVariable("(Get<"),
						 GenerateVariable(node_enum_target_value_->This()),
						 GenerateVariable(">(ts));\n\t\t"), GenerateVariable("}")}));

			variables_.emplace_back(class_name_);
			variables_.emplace_back(class_name_node_target_type_);
			variables_.emplace_back(class_name_node_type_);
			variables_.emplace_back(const_qualifier_);
			variables_.emplace_back(file_);
			variables_.emplace_back(header_guard_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(language_name_underscore_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(node_access_);
			variables_.emplace_back(node_access_forward_declaration_);
			variables_.emplace_back(node_enum_include_);
			variables_.emplace_back(node_enum_isinlined_relation_include_);
			variables_.emplace_back(node_enum_target_value_);
			variables_.emplace_back(node_enum_to_type_);
			variables_.emplace_back(node_enum_to_type_relation_include_);
			variables_.emplace_back(node_enum_type_);
			variables_.emplace_back(node_enum_value_);
			variables_.emplace_back(node_name_);
			variables_.emplace_back(node_target_name_);
			variables_.emplace_back(node_type_);
			variables_.emplace_back(node_type_include_);
			variables_.emplace_back(node_type_target_);
			variables_.emplace_back(node_type_to_enum_);
			variables_.emplace_back(node_type_to_enum_relation_include_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(target_retrievement_function_declaration_);
			variables_.emplace_back(target_retrievement_function_implementation_);
		}

		virtual ~AccessTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_AST_TYPE_CPP_ACCESSTEMPLATE_h
