#ifndef DEAMER_TEMPLATES_AST_TYPE_CPP_ENTEREXITLISTENERTEMPLATE_h

#define DEAMER_TEMPLATES_AST_TYPE_CPP_ENTEREXITLISTENERTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::ast::type::cpp

{
	/*!	\class EnterExitListenerTemplate

	 *

	 *	\brief Generates code for "EnterExitListenerTemplate"

	 *

	 *	\details This is generated by DST.

	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate

	 */

	class EnterExitListenerTemplate

	{
	public:
		enum class Type

		{

			Unknown,

			Scope,

			// User defined types

			const_qualifier_,
			enter_nonterminal_listen_,
			enter_terminal_listen_,
			exit_nonterminal_listen_,
			exit_terminal_listen_,
			file_,
			header_guard_,
			language_name_,
			language_name_underscore_,
			language_node_,
			language_type_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			nonterminal_case_,
			nonterminal_include_,
			nonterminal_name_,
			nonterminal_node_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			terminal_case_,
			terminal_include_,
			terminal_name_,
			terminal_node_,

		};

		enum class ScopeType

		{

			Unknown,

			// Default

			Default_,

			Upper_,

			Lower_,

			Snake_,

			Slash_,

			BackSlash_,

			Colon_,

			DoubleColon_,

			Variable_Field_,

			Variable_Field_Separator_,

			Function_Field_,

			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type enumerationValue)

		{
			switch (enumerationValue)

			{
			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				const_qualifier_:

			{
				return "const_qualifier";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				enter_nonterminal_listen_:

			{
				return "enter_nonterminal_listen";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				enter_terminal_listen_:

			{
				return "enter_terminal_listen";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				exit_nonterminal_listen_:

			{
				return "exit_nonterminal_listen";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				exit_terminal_listen_:

			{
				return "exit_terminal_listen";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::file_:

			{
				return "file";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				header_guard_:

			{
				return "header_guard";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				language_name_:

			{
				return "language_name";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				language_name_underscore_:

			{
				return "language_name_underscore";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				language_node_:

			{
				return "language_node";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				language_type_:

			{
				return "language_type";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				left_angle_bracket_:

			{
				return "left_angle_bracket";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				left_bracket_:

			{
				return "left_bracket";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				left_curly_bracket_:

			{
				return "left_curly_bracket";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				nonterminal_case_:

			{
				return "nonterminal_case";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				nonterminal_include_:

			{
				return "nonterminal_include";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				nonterminal_name_:

			{
				return "nonterminal_name";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				nonterminal_node_:

			{
				return "nonterminal_node";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				right_angle_bracket_:

			{
				return "right_angle_bracket";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				right_bracket_:

			{
				return "right_bracket";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				right_curly_bracket_:

			{
				return "right_curly_bracket";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				terminal_case_:

			{
				return "terminal_case";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				terminal_include_:

			{
				return "terminal_include";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				terminal_name_:

			{
				return "terminal_name";
			}

			case ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
				terminal_node_:

			{
				return "terminal_node";
			}
			}

			return "";
		}

	public:
		struct VariableBase

		{
			// The value is either a string

			// or a vector of variables.

			std::variant<std::string, std::vector<VariableBase*>> value;

			bool isString = true;

			::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type type =
				::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())

			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)

			{
				isString = true;

				value = text;
			}

			VariableBase(const std::string& text)

			{
				isString = true;

				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)

			{
				isString = false;

				value = variables;
			}

			VariableBase* This()

			{
				return this;
			}

			virtual std::string GetValue()

			{
				if (isString)

				{
					return std::get<std::string>(value);
				}

				else

				{
					std::string output;

					auto& variables = std::get<std::vector<VariableBase*>>(value);

					for (auto* variable : variables)

					{
						output += variable->GetValue();
					}

					return output;
				}
			}

			std::string GetName()

			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)

			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)

			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)

			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)

			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)

			{
				value = variable;

				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)

			{
				if (variable == this)

				{
					return *this;
				}

				value = variable->value;

				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)

			{
				if (isString)

				{
					auto& text = std::get<std::string>(value);

					text += variable;

					value = text;
				}

				else

				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);

					vector.push_back(new VariableBase(variable));

					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)

			{
				if (variable == this)

				{
					return *this;
				}

				if (isString)

				{
					// convert current -> variablebase

					// then create a vector.

					auto& currentValue = std::get<std::string>(value);

					auto* currentValueAsVariableBase = new VariableBase(currentValue);

					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}

				else

				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);

					vector.push_back(variable);

					value = vector;
				}

				return *this;
			}

			void Clear()

			{
				if (isString)

				{
					value = "";
				}

				else

				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)

			{
				void* newVariable = ::operator new(size);

				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)

		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)

		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase

		{
			::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::ScopeType scope_type =
				::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::ScopeType::Unknown;

			bool isReserved = false;

			VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope

		{
			VariableBase* base;

			Variable_ReservedScope_Upper(VariableBase* base_)

				: VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									ScopeType::Upper_,
								true),

				  base(base_)

			{
			}

			virtual std::string GetValue() override

			{
				std::string upperVariant;

				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)

				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope

		{
			VariableBase* base;

			Variable_ReservedScope_Lower(VariableBase* base_)

				: VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									ScopeType::Lower_,
								true),

				  base(base_)

			{
			}

			virtual std::string GetValue() override

			{
				std::string lowerVariant;

				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)

				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope

		{
			VariableBase* base;

			Variable_ReservedScope_Snake(VariableBase* base_)

				: VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									ScopeType::Snake_,
								true),

				  base(base_)

			{
			}

			virtual std::string GetValue() override

			{
				std::string snakeVariant;

				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;

				for (const auto character : currentValue)

				{
					if (std::isalpha(character))

					{
						snakeVariant += character;

						lastWasNonAlpha = false;
					}

					else

					{
						if (lastWasNonAlpha)

						{
							continue;
						}

						snakeVariant += '_';

						lastWasNonAlpha = true;
					}
				}

				// If it contains text

				// remove the tail

				if (!snakeVariant.empty() && lastWasNonAlpha)

				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope

		{
			VariableBase* base;

			Variable_ReservedScope_Slash(VariableBase* base_)

				: VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									ScopeType::Slash_,
								true),

				  base(base_)

			{
			}

			virtual std::string GetValue() override

			{
				std::string slashVariant;

				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;

				for (const auto character : currentValue)

				{
					if (std::isalpha(character))

					{
						slashVariant += character;

						lastWasNonAlpha = false;
					}

					else

					{
						if (lastWasNonAlpha)

						{
							continue;
						}

						slashVariant += '/';

						lastWasNonAlpha = true;
					}
				}

				// If it contains text

				// remove the tail

				if (!slashVariant.empty() && lastWasNonAlpha)

				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope

		{
			VariableBase* base;

			Variable_ReservedScope_DoubleColon(VariableBase* base_)

				: VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									ScopeType::DoubleColon_,
								true),

				  base(base_)

			{
			}

			virtual std::string GetValue() override

			{
				std::string doubleColonVariant;

				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;

				for (const auto character : currentValue)

				{
					if (std::isalpha(character))

					{
						doubleColonVariant += character;

						lastWasNonAlpha = false;
					}

					else

					{
						if (lastWasNonAlpha)

						{
							continue;
						}

						doubleColonVariant += "::";

						lastWasNonAlpha = true;
					}
				}

				// If it contains text

				// remove the tail

				if (!doubleColonVariant.empty() && lastWasNonAlpha)

				{
					doubleColonVariant.pop_back();

					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase

		{
			// Default scopes

			VariableBase* default_ = new VariableScope(
				::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::ScopeType::Default_,
				true);

			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);

			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);

			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);

			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									  ScopeType::Variable_Field_,
								  true);

			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor

			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor

			virtual ~VariableScopes() override = default;

			// Calls

			VariableBase* Default()

			{
				return default_;
			}

			VariableBase* Upper()

			{
				return upper_;
			}

			VariableBase* Lower()

			{
				return lower_;
			}

			VariableBase* Underscore()

			{
				return snake_;
			}

			VariableBase* Snake()

			{
				return snake_;
			}

			VariableBase* Slash()

			{
				return slash_;
			}

			VariableBase* DoubleColon()

			{
				return double_colon_;
			}

			VariableBase* Variable_Field()

			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()

			{
				return variable_field_separator_;
			}

			void ExpandVariableField()

			{
				// currentvalue + separator

				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();

				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_const_qualifier_ : public VariableScopes

		{
			static constexpr auto name = "const_qualifier_";

			Variable_const_qualifier_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					const_qualifier_;
			}

			virtual ~Variable_const_qualifier_() override = default;

			Variable_const_qualifier_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					const_qualifier_;
			}

			Variable_const_qualifier_& operator=(const Variable_const_qualifier_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_enter_nonterminal_listen_ : public VariableScopes

		{
			static constexpr auto name = "enter_nonterminal_listen_";

			Variable_enter_nonterminal_listen_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					enter_nonterminal_listen_;
			}

			virtual ~Variable_enter_nonterminal_listen_() override = default;

			Variable_enter_nonterminal_listen_(
				EnterExitListenerTemplate* enterexitlistenertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					enter_nonterminal_listen_;
			}

			Variable_enter_nonterminal_listen_&
			operator=(const Variable_enter_nonterminal_listen_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_enter_terminal_listen_ : public VariableScopes

		{
			static constexpr auto name = "enter_terminal_listen_";

			Variable_enter_terminal_listen_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					enter_terminal_listen_;
			}

			virtual ~Variable_enter_terminal_listen_() override = default;

			Variable_enter_terminal_listen_(EnterExitListenerTemplate* enterexitlistenertemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					enter_terminal_listen_;
			}

			Variable_enter_terminal_listen_&
			operator=(const Variable_enter_terminal_listen_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_exit_nonterminal_listen_ : public VariableScopes

		{
			static constexpr auto name = "exit_nonterminal_listen_";

			Variable_exit_nonterminal_listen_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					exit_nonterminal_listen_;
			}

			virtual ~Variable_exit_nonterminal_listen_() override = default;

			Variable_exit_nonterminal_listen_(EnterExitListenerTemplate* enterexitlistenertemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					exit_nonterminal_listen_;
			}

			Variable_exit_nonterminal_listen_&
			operator=(const Variable_exit_nonterminal_listen_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_exit_terminal_listen_ : public VariableScopes

		{
			static constexpr auto name = "exit_terminal_listen_";

			Variable_exit_terminal_listen_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					exit_terminal_listen_;
			}

			virtual ~Variable_exit_terminal_listen_() override = default;

			Variable_exit_terminal_listen_(EnterExitListenerTemplate* enterexitlistenertemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					exit_terminal_listen_;
			}

			Variable_exit_terminal_listen_&
			operator=(const Variable_exit_terminal_listen_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes

		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(EnterExitListenerTemplate* enterexitlistenertemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::file_;

				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#ifndef "),
					 GenerateVariable(enterexitlistenertemplate_->header_guard_->This()),
					 GenerateVariable("\n#define "),
					 GenerateVariable(enterexitlistenertemplate_->header_guard_->This()),
					 GenerateVariable("\n\n#include <Deamer/External/Cpp/Ast/Listener"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include \""),
					 GenerateVariable(enterexitlistenertemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Node/"),
					 GenerateVariable(enterexitlistenertemplate_->language_name_->This()),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(enterexitlistenertemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Enum/Type"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n\n"),
					 GenerateVariable(
						 enterexitlistenertemplate_->terminal_include_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 enterexitlistenertemplate_->nonterminal_include_->Variable_Field()),
					 GenerateVariable("\n\nnamespace "),
					 GenerateVariable(enterexitlistenertemplate_->language_name_->This()),
					 GenerateVariable(" "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace ast "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace listener "),
					 GenerateVariable("{"),
					 GenerateVariable(" \n\n\tclass EnterExitListener : public "
									  "::deamer::external::cpp::ast::Listener\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tprivate:\n\tpublic:\n\t\tEnterExitListener() = "
									  "default;\n\t\t~EnterExitListener() override = "
									  "default;\n\n\tpublic:\n\t\tvoid Dispatch(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable(" override\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tconst auto enumeratedValue = static_cast<"),
					 GenerateVariable(enterexitlistenertemplate_->language_type_->This()),
					 GenerateVariable(">(node->GetType());\n\t\t\tswitch(enumeratedValue)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t// Terminal cases\n\t\t\t"),
					 GenerateVariable(enterexitlistenertemplate_->terminal_case_->Variable_Field()),
					 GenerateVariable("\n\n\t\t\t// Nonterminal cases\n\t\t\t"),
					 GenerateVariable(
						 enterexitlistenertemplate_->nonterminal_case_->Variable_Field()),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t"),
					 GenerateVariable(
						 enterexitlistenertemplate_->enter_terminal_listen_->Variable_Field()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable(
						 enterexitlistenertemplate_->exit_terminal_listen_->Variable_Field()),
					 GenerateVariable("\n\n\t\t"),
					 GenerateVariable(
						 enterexitlistenertemplate_->enter_nonterminal_listen_->Variable_Field()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable(
						 enterexitlistenertemplate_->exit_nonterminal_listen_->Variable_Field()),
					 GenerateVariable("\n\n\t\t\n\t\tvirtual void EnterTerminal(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tvirtual void ExitTerminal(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tvirtual void EnterNonTerminal(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tvirtual void ExitNonTerminal(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tvirtual void EnterAnything(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tvirtual void ExitAnything(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\n\tprivate:\n\t\tvoid DefaultAction(const "
									  "::deamer::external::cpp::ast::Node* node) "),
					 GenerateVariable(enterexitlistenertemplate_->const_qualifier_->This()),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tfor(const auto* child : node->GetNodes())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tDispatch(child);\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n"),
					 GenerateVariable("}}"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n#endif // "),
					 GenerateVariable(enterexitlistenertemplate_->header_guard_->This())}));

				Content_->type =
					::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));

				Class_postfix_->type =
					::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));

				Extension_->type =
					::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("EnterExitListener")}));

				File_name_->type =
					::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::ast::type::cpp")}));

				Namespace_->type =
					::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));

				Target_language_->type =
					::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::Scope;
			}

			VariableBase* Content() const

			{
				return Content_;
			}

			VariableBase* Class_postfix() const

			{
				return Class_postfix_;
			}

			VariableBase* Extension() const

			{
				return Extension_;
			}

			VariableBase* File_name() const

			{
				return File_name_;
			}

			VariableBase* Namespace() const

			{
				return Namespace_;
			}

			VariableBase* Target_language() const

			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_header_guard_ : public VariableScopes

		{
			static constexpr auto name = "header_guard_";

			Variable_header_guard_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					header_guard_;
			}

			virtual ~Variable_header_guard_() override = default;

			Variable_header_guard_(EnterExitListenerTemplate* enterexitlistenertemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					header_guard_;
			}

			Variable_header_guard_& operator=(const Variable_header_guard_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes

		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_underscore_ : public VariableScopes

		{
			static constexpr auto name = "language_name_underscore_";

			Variable_language_name_underscore_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_name_underscore_;
			}

			virtual ~Variable_language_name_underscore_() override = default;

			Variable_language_name_underscore_(
				EnterExitListenerTemplate* enterexitlistenertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_name_underscore_;
			}

			Variable_language_name_underscore_&
			operator=(const Variable_language_name_underscore_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_node_ : public VariableScopes

		{
			static constexpr auto name = "language_node_";

			Variable_language_node_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_node_;
			}

			virtual ~Variable_language_node_() override = default;

			Variable_language_node_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_node_;
			}

			Variable_language_node_& operator=(const Variable_language_node_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_type_ : public VariableScopes

		{
			static constexpr auto name = "language_type_";

			Variable_language_type_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_type_;
			}

			virtual ~Variable_language_type_() override = default;

			Variable_language_type_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					language_type_;
			}

			Variable_language_type_& operator=(const Variable_language_type_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes

		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(EnterExitListenerTemplate* enterexitlistenertemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes

		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(EnterExitListenerTemplate* enterexitlistenertemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes

		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(EnterExitListenerTemplate* enterexitlistenertemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_case_ : public VariableScopes

		{
			static constexpr auto name = "nonterminal_case_";

			Variable_nonterminal_case_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_case_;
			}

			virtual ~Variable_nonterminal_case_() override = default;

			Variable_nonterminal_case_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_case_;
			}

			Variable_nonterminal_case_& operator=(const Variable_nonterminal_case_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_include_ : public VariableScopes

		{
			static constexpr auto name = "nonterminal_include_";

			Variable_nonterminal_include_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_include_;
			}

			virtual ~Variable_nonterminal_include_() override = default;

			Variable_nonterminal_include_(EnterExitListenerTemplate* enterexitlistenertemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_include_;
			}

			Variable_nonterminal_include_& operator=(const Variable_nonterminal_include_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_name_ : public VariableScopes

		{
			static constexpr auto name = "nonterminal_name_";

			Variable_nonterminal_name_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_name_;
			}

			virtual ~Variable_nonterminal_name_() override = default;

			Variable_nonterminal_name_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_name_;
			}

			Variable_nonterminal_name_& operator=(const Variable_nonterminal_name_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_node_ : public VariableScopes

		{
			static constexpr auto name = "nonterminal_node_";

			Variable_nonterminal_node_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_node_;
			}

			virtual ~Variable_nonterminal_node_() override = default;

			Variable_nonterminal_node_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					nonterminal_node_;
			}

			Variable_nonterminal_node_& operator=(const Variable_nonterminal_node_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes

		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(EnterExitListenerTemplate* enterexitlistenertemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes

		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes

		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(EnterExitListenerTemplate* enterexitlistenertemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_case_ : public VariableScopes

		{
			static constexpr auto name = "terminal_case_";

			Variable_terminal_case_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_case_;
			}

			virtual ~Variable_terminal_case_() override = default;

			Variable_terminal_case_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_case_;
			}

			Variable_terminal_case_& operator=(const Variable_terminal_case_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_include_ : public VariableScopes

		{
			static constexpr auto name = "terminal_include_";

			Variable_terminal_include_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_include_;
			}

			virtual ~Variable_terminal_include_() override = default;

			Variable_terminal_include_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_include_;
			}

			Variable_terminal_include_& operator=(const Variable_terminal_include_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_name_ : public VariableScopes

		{
			static constexpr auto name = "terminal_name_";

			Variable_terminal_name_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_name_;
			}

			virtual ~Variable_terminal_name_() override = default;

			Variable_terminal_name_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_name_;
			}

			Variable_terminal_name_& operator=(const Variable_terminal_name_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_node_ : public VariableScopes

		{
			static constexpr auto name = "terminal_node_";

			Variable_terminal_node_() : VariableScopes()

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_node_;
			}

			virtual ~Variable_terminal_node_() override = default;

			Variable_terminal_node_(EnterExitListenerTemplate* enterexitlistenertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)

			{
				type = ::deamer::templates::ast::type::cpp::EnterExitListenerTemplate::Type::
					terminal_node_;
			}

			Variable_terminal_node_& operator=(const Variable_terminal_node_& variable)

			{
				if (&variable == this)

				{
					return *this;
				}

				value = variable.value;

				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.

		// e.g. EnterExitListenerTemplate.member = "auto-generated";

		Variable_const_qualifier_* const_qualifier_ = new Variable_const_qualifier_();
		Variable_enter_nonterminal_listen_* enter_nonterminal_listen_ =
			new Variable_enter_nonterminal_listen_();
		Variable_enter_terminal_listen_* enter_terminal_listen_ =
			new Variable_enter_terminal_listen_();
		Variable_exit_nonterminal_listen_* exit_nonterminal_listen_ =
			new Variable_exit_nonterminal_listen_();
		Variable_exit_terminal_listen_* exit_terminal_listen_ =
			new Variable_exit_terminal_listen_();
		Variable_file_* file_ = new Variable_file_();
		Variable_header_guard_* header_guard_ = new Variable_header_guard_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_language_name_underscore_* language_name_underscore_ =
			new Variable_language_name_underscore_();
		Variable_language_node_* language_node_ = new Variable_language_node_();
		Variable_language_type_* language_type_ = new Variable_language_type_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_nonterminal_case_* nonterminal_case_ = new Variable_nonterminal_case_();
		Variable_nonterminal_include_* nonterminal_include_ = new Variable_nonterminal_include_();
		Variable_nonterminal_name_* nonterminal_name_ = new Variable_nonterminal_name_();
		Variable_nonterminal_node_* nonterminal_node_ = new Variable_nonterminal_node_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_terminal_case_* terminal_case_ = new Variable_terminal_case_();
		Variable_terminal_include_* terminal_include_ = new Variable_terminal_include_();
		Variable_terminal_name_* terminal_name_ = new Variable_terminal_name_();
		Variable_terminal_node_* terminal_node_ = new Variable_terminal_node_();

	public:
		EnterExitListenerTemplate()

		{
			*const_qualifier_ = Variable_const_qualifier_(
				this, std::vector<VariableBase*>({GenerateVariable("const")}));
			*enter_nonterminal_listen_ = Variable_enter_nonterminal_listen_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\t\tvirtual void ListenEntry(const "),
					 GenerateVariable(nonterminal_node_->This()), GenerateVariable("* node) "),
					 GenerateVariable(const_qualifier_->This()), GenerateVariable("\n\t\t"),
					 GenerateVariable("{"), GenerateVariable("\n\t\t"), GenerateVariable("}")}));
			*enter_terminal_listen_ = Variable_enter_terminal_listen_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\t\tvirtual void ListenEntry(const "),
					 GenerateVariable(terminal_node_->This()), GenerateVariable("* node) "),
					 GenerateVariable(const_qualifier_->This()), GenerateVariable("\n\t\t"),
					 GenerateVariable("{"), GenerateVariable("\n\t\t"), GenerateVariable("}")}));
			*exit_nonterminal_listen_ = Variable_exit_nonterminal_listen_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\t\tvirtual void ListenExit(const "),
					 GenerateVariable(nonterminal_node_->This()), GenerateVariable("* node) "),
					 GenerateVariable(const_qualifier_->This()), GenerateVariable("\n\t\t"),
					 GenerateVariable("{"), GenerateVariable("\n\t\t"), GenerateVariable("}")}));
			*exit_terminal_listen_ =
				Variable_exit_terminal_listen_(this, std::vector<VariableBase*>({}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*header_guard_ = Variable_header_guard_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(language_name_underscore_->Upper()),
						   GenerateVariable("_AST_LISTENER_ENTEREXITLISTENER_H")}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*language_name_underscore_ = Variable_language_name_underscore_(
				this, std::vector<VariableBase*>({GenerateVariable(language_name_->Underscore())}));
			*language_node_ = Variable_language_node_(
				this, std::vector<VariableBase*>({GenerateVariable(language_name_->This()),
												  GenerateVariable("::ast::node")}));
			*language_type_ = Variable_language_type_(
				this, std::vector<VariableBase*>({GenerateVariable(language_name_->This()),
												  GenerateVariable("::ast::Type")}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*nonterminal_case_ = Variable_nonterminal_case_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\t\t\tcase "),
					 GenerateVariable(language_type_->This()),
					 GenerateVariable("::"),
					 GenerateVariable(nonterminal_name_->This()),
					 GenerateVariable(":\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t// Enter "
						 "nonterminal\n\t\t\t\tEnterAnything(node);\n\t\t\t\tEnterNonTerminal(node)"
						 ";\n\t\t\t\tListenEntry(static_cast"),
					 GenerateVariable(left_angle_bracket_->This()),
					 GenerateVariable("const "),
					 GenerateVariable(nonterminal_node_->This()),
					 GenerateVariable("*"),
					 GenerateVariable(right_angle_bracket_->This()),
					 GenerateVariable("(node));\n\t\t\t\t\n\t\t\t\t// Go through its "
									  "children\n\t\t\t\tDefaultAction(node);\n\n\t\t\t\t// Exit "
									  "nonterminal\n\t\t\t\tListenExit(static_cast"),
					 GenerateVariable(left_angle_bracket_->This()),
					 GenerateVariable("const "),
					 GenerateVariable(nonterminal_node_->This()),
					 GenerateVariable("*"),
					 GenerateVariable(right_angle_bracket_->This()),
					 GenerateVariable("(node));\n\t\t\t\tExitNonTerminal(node);"
									  "\n\t\t\t\tExitAnything(node);\n\t\t\t\tbreak;\n\t\t\t"),
					 GenerateVariable("}")}));
			*nonterminal_include_ = Variable_nonterminal_include_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Node/"), GenerateVariable(nonterminal_name_->This()),
					 GenerateVariable("."), GenerateVariable("h\"")}));
			*nonterminal_name_ = Variable_nonterminal_name_(this, std::vector<VariableBase*>({}));
			*nonterminal_node_ = Variable_nonterminal_node_(
				this, std::vector<VariableBase*>({GenerateVariable(language_node_->This()),
												  GenerateVariable("::"),
												  GenerateVariable(nonterminal_name_->This())}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*terminal_case_ = Variable_terminal_case_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\t\t\tcase "), GenerateVariable(language_type_->This()),
					 GenerateVariable("::"), GenerateVariable(terminal_name_->This()),
					 GenerateVariable(":\n\t\t\t"), GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tEnterAnything(node);\n\t\t\t\tEnterTerminal(node);"
									  "\n\t\t\t\tListenEntry(static_cast"),
					 GenerateVariable(left_angle_bracket_->This()), GenerateVariable("const "),
					 GenerateVariable(terminal_node_->This()), GenerateVariable("*"),
					 GenerateVariable(right_angle_bracket_->This()),
					 GenerateVariable("(node));\n\t\t\t\tbreak;\n\t\t\t"), GenerateVariable("}")}));
			*terminal_include_ = Variable_terminal_include_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Node/"), GenerateVariable(terminal_name_->This()),
					 GenerateVariable("."), GenerateVariable("h\"")}));
			*terminal_name_ = Variable_terminal_name_(this, std::vector<VariableBase*>({}));
			*terminal_node_ = Variable_terminal_node_(
				this, std::vector<VariableBase*>({GenerateVariable(language_node_->This()),
												  GenerateVariable("::"),
												  GenerateVariable(terminal_name_->This())}));

			variables_.emplace_back(const_qualifier_);
			variables_.emplace_back(enter_nonterminal_listen_);
			variables_.emplace_back(enter_terminal_listen_);
			variables_.emplace_back(exit_nonterminal_listen_);
			variables_.emplace_back(exit_terminal_listen_);
			variables_.emplace_back(file_);
			variables_.emplace_back(header_guard_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(language_name_underscore_);
			variables_.emplace_back(language_node_);
			variables_.emplace_back(language_type_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(nonterminal_case_);
			variables_.emplace_back(nonterminal_include_);
			variables_.emplace_back(nonterminal_name_);
			variables_.emplace_back(nonterminal_node_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(terminal_case_);
			variables_.emplace_back(terminal_include_);
			variables_.emplace_back(terminal_name_);
			variables_.emplace_back(terminal_node_);
		}

		virtual ~EnterExitListenerTemplate()

		{
			for (auto* variable : variables_to_delete)

			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput

		 *

		 *	\brief returns the output with the given the current state.

		 */

		std::string GetOutput()

		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables

		 *

		 *	\brief Returns all top level variables known in this template.

		 */

		std::vector<VariableBase*> GetVariables()

		{
			return variables_;
		}

	public:
	};

}

#endif // DEAMER_TEMPLATES_AST_TYPE_CPP_ENTEREXITLISTENERTEMPLATE_h
