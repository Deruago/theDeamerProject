#include "{{language_name}}/Dparse/Parser.h"
{{optional_dleg_include}}
#include "{{language_name}}/Ast/Utility/CreateNode.h"
#include "{{language_name}}/Ast/Relation/NodeEnumToText.h"
#include "{{language_name}}/Ast/Relation/NodeIsDeleted.h"
#include "{{language_name}}/Ast/Relation/NodeIsIgnored.h"
#include <Deamer/External/Cpp/Ast/Node.h>
#include <Deamer/External/Cpp/Ast/Tree.h>
#include <memory>
#include <vector>
#include <optional>
#include <tuple>

struct {{language_name}}::dparse::parser::Parser::Impl
{
public:
	Impl() = default;
	~Impl() = default;
};

static constexpr ::{{language_name}}::ast::Type productionRuleOutput[{{production_rule_count}}] = {
{{production_output_entry.Variable_Field}}
};

static constexpr ::deamer::external::cpp::ast::ProductionRuleType productionTypeTable[{{production_rule_count}}] = {
{{production_type_entry.Variable_Field}}
};

static constexpr std::size_t productionSizeTable[{{production_rule_count}}] = {
{{production_size_entry.Variable_Field}}
};

static constexpr std::size_t productionRuleId[{{production_rule_count}}] = {
{{production_id_entry.Variable_Field}}
};

static constexpr std::size_t gotoTable[{{state_count}}][{{nonterminal_count}}] = {
{{goto_table_2d_entry.Variable_Field}}
};

/*	The field has a type containing two parts:
 *	- Type of action
 *	- Action specialization
 *
 *	There are 6 types:
 *	- 0: Unknown (Reject due to not being accessible)
 *	- 1: Shift
 *	- 2: Reduce
 *	- 3: Accept
 *	- 4: Reject (Formally specified to reject)
 *	- 7: General Options (Used for General parsing)
 *
 *	The specialization value defines the operation given the type:
 *	- Shift: The value defines the next state
 *	- Reduce: The value defines the production rule index
 *	- General: The value defines the general options, this is statically computed.
 *	- Other: The value is unused
 */
static constexpr std::tuple<std::size_t, std::size_t> actionTable[{{state_count}}][{{terminal_count}}] = {
{{action_table_2d_entry.Variable_Field}}
};

deamer::external::cpp::ast::Tree* {{language_name}}::dparse::parser::Parser::Parse(std::vector<const ::deamer::external::cpp::lexer::TerminalObject*> terminalObjects,
			  ::deamer::external::cpp::parser::ASTConstructionPolicy constructionPolicy) const
{
	// Add Epsilon token (EOF) at end of input
	std::unique_ptr<deamer::external::cpp::lexer::TerminalObject> epsilon =
		std::make_unique<deamer::external::cpp::lexer::TerminalObject>("");
	terminalObjects.push_back(epsilon.get());

	struct GeneralNode
	{
		const std::vector<const ::deamer::external::cpp::lexer::TerminalObject*>& terminalObjects;
		::deamer::external::cpp::parser::ASTConstructionPolicy constructionPolicy;
		std::unique_ptr<deamer::external::cpp::lexer::TerminalObject>& epsilon;

		std::size_t lookahead = 0;
		std::vector<std::size_t> stateStack = { 0 };
		std::vector<::deamer::external::cpp::ast::Node*> stateItems = { nullptr };
		std::size_t deletedItemCount = 0;
		
		::deamer::external::cpp::ast::Tree* outputTree = nullptr;
		std::optional<bool> rejecting = std::nullopt;

		
		GeneralNode(const std::vector<const ::deamer::external::cpp::lexer::TerminalObject*>& terminalObjects_, ::deamer::external::cpp::parser::ASTConstructionPolicy constructionPolicy_, std::unique_ptr<deamer::external::cpp::lexer::TerminalObject>& epsilon_)
			:	terminalObjects(terminalObjects_),
				constructionPolicy(constructionPolicy_),
				epsilon(epsilon_)
		{
		}

		GeneralNode(const std::vector<const ::deamer::external::cpp::lexer::TerminalObject*>& terminalObjects_,
					::deamer::external::cpp::parser::ASTConstructionPolicy constructionPolicy_,
					std::unique_ptr<deamer::external::cpp::lexer::TerminalObject>& epsilon_,
					std::size_t lookahead_,
					std::vector<std::size_t> stateStack_,
					std::vector<::deamer::external::cpp::ast::Node*> stateItems_,
					std::size_t deletedItemCount_)
			:	terminalObjects(terminalObjects_),
				constructionPolicy(constructionPolicy_),
				epsilon(epsilon_),
				lookahead(lookahead_),
				stateStack(stateStack_),
				stateItems(stateItems_),
				deletedItemCount(deletedItemCount_)
		{
		}

		~GeneralNode()
		{
			if (outputTree != nullptr)
			{
				delete outputTree;
				return;
			}

			for(auto i : stateItems)
			{
				delete i;
			}
		}

		std::vector<::deamer::external::cpp::ast::Node*> CopyStateItems()
		{
			std::vector<::deamer::external::cpp::ast::Node*> newItems;
		}

		bool InProgress()
		{
			return !rejecting.has_value();
		}
		
		bool IsRejected()
		{
			if (!InProgress())
			{
				return rejecting.value();
			}

			return false;
		}
		
		bool IsAccepted()
		{
			if (!InProgress())
			{
				return !rejecting.value();
			}

			return false;
		}
		
		::deamer::external::cpp::ast::Tree* GetResult()
		{
			auto tmp = outputTree;
			outputTree = nullptr;
			stateItems.clear();
			return tmp;
		}
		
		bool ParseOneStep(std::vector<std::unique_ptr<GeneralNode>>& currentEvaluations)
		{
			auto UninitializeStack = [&]() {
				for (auto node : stateItems)
				{
					delete node;
				}
			};

			auto GetCurrentLookaheadTokenObject = [&]() {
				return terminalObjects[lookahead];
			};

			auto GetCurrentLookaheadToken = [&]() {
				if (lookahead < terminalObjects.size())
				{
					return static_cast<std::size_t>(terminalObjects[lookahead]->GetType());
				}

				return std::size_t{ 0 };
			};

			auto GetLineNumberOfLookaheadToken = [&]() {
				if (lookahead < terminalObjects.size())
				{
					return terminalObjects[lookahead]->GetLineNumber();
				}

				return -1;
			};

			auto GetColumnNumberOfLookaheadToken = [&]() {
				if (lookahead < terminalObjects.size())
				{
					return terminalObjects[lookahead]->GetColumnNumber();
				}

				return -1;
			};

			auto GetValueOfLookaheadToken = [&]() {
				if (lookahead < terminalObjects.size())
				{
					return terminalObjects[lookahead]->GetValue();
				}

				return std::string{};
			};

			auto GetCurrentState = [](auto& stateStackReference) {
				return stateStackReference[stateStackReference.size() - 1];
			};

			auto LookaheadIsUnrecognizedToken = [](auto lookahead_, auto& terminalObjects_, auto& epsilon_) {
				return lookahead_ < terminalObjects_.size() && terminalObjects_[lookahead_]->GetType() == 0 &&
					terminalObjects_[lookahead_] != epsilon_.get();
			};

			if (constructionPolicy == ::deamer::external::cpp::parser::ASTConstructionPolicy::cst && LookaheadIsUnrecognizedToken(lookahead, terminalObjects, epsilon))
			{
				stateItems.push_back(
					::{{language_name}}::ast::utility::CreateNode()
					.Node(GetCurrentLookaheadTokenObject())
					.GetNode()
				);
				stateStack.push_back(GetCurrentState(stateStack));
				lookahead++;
				deletedItemCount++;
				return false;
			}

			const auto currentLookahead = GetCurrentLookaheadToken();
			const auto currentState = GetCurrentState(stateStack);

			const auto currentAction = actionTable[currentState][currentLookahead];
			auto actionType = std::get<0>(currentAction);
			auto actionValue = std::get<1>(currentAction);

			if (LookaheadIsUnrecognizedToken(lookahead, terminalObjects, epsilon))
			{
				actionType = 0; // Reject as the terminal is not used in the table.
			}

			auto PopItemCount = [&](auto reduceProduction) {
				return productionSizeTable[reduceProduction] + deletedItemCount;
			};

			auto Reduce = [PopItemCount](auto reduceProduction, auto& stateItemsReference, auto& stateStackReference) {
				::{{language_name}}::ast::utility::CreateNode createNode{};
				createNode.Node(static_cast<std::size_t>(productionRuleOutput[reduceProduction]));
				createNode.ProductionRule(productionRuleId[reduceProduction], productionTypeTable[reduceProduction]);

				if (PopItemCount(reduceProduction) > stateStackReference.size())
				{
					throw std::logic_error("Dparse.Parse(): Syntax error, reduced production rule size is larger than stack size.");
				}

				for (auto iter = std::end(stateItemsReference) - PopItemCount(reduceProduction); iter != std::end(stateItemsReference); iter++)
				{
					if (*iter == nullptr)
					{
						continue;
					}

					createNode.SubNode(*iter);
				}

				return createNode.GetNode();
			};

			switch (actionType)
			{
			case 0: {
				// Reject
				if (constructionPolicy == ::deamer::external::cpp::parser::ASTConstructionPolicy::cst && ::{{language_name}}::ast::relation::NodeIsDeleted(static_cast<::{{language_name}}::ast::Type>(GetCurrentLookaheadToken())))
				{
					stateItems.push_back(
						::{{language_name}}::ast::utility::CreateNode()
						.Node(GetCurrentLookaheadTokenObject())
						.GetNode()
					);
					stateStack.push_back(GetCurrentState(stateStack));
					lookahead++;
					deletedItemCount++;
					break;
				}

				if constexpr ({{optional_better_syntax_errors}})
				{
					std::cout << "Syntax error, unexpected token: ";

					const std::string text_ = ::{{language_name}}::ast::relation::ConvertEnumToText(static_cast<::{{language_name}}::ast::Type>(GetCurrentLookaheadToken()));
					if (text_.empty())
					{
						std::cout << "$";
					}
					else
					{
						std::cout << text_;
					}

					std::cout << " expected the following tokens: ";
					for (auto i = 0; i < {{terminal_count}}; i++)
					{
						auto action_ = actionTable[currentState][i];
						if (std::get<0>(action_) == 0)
						{
							continue;
						}
						const std::string text = ::{{language_name}}::ast::relation::ConvertEnumToText(static_cast<::{{language_name}}::ast::Type>(i));
						if (text.empty())
						{
							std::cout << "$";
						}
						else
						{
							std::cout << text;
						}

						std::cout << ", ";
					}

					std::cout << "\n";

				}

				UninitializeStack();
				rejecting = true;
				return true;
			}
			case 1: {
				// Shift
				auto currentLookaheadToken_ = GetCurrentLookaheadTokenObject();
				if (constructionPolicy == ::deamer::external::cpp::parser::ASTConstructionPolicy::ast && ::{{language_name}}::ast::relation::NodeIsIgnored(static_cast<::{{language_name}}::ast::Type>(currentLookaheadToken_->GetType())))
				{
					stateItems.push_back(nullptr);
					stateStack.push_back(actionValue);
					lookahead++;
				}
				else
				{
					stateItems.push_back(
						::{{language_name}}::ast::utility::CreateNode()
						.Node(GetCurrentLookaheadTokenObject())
						.GetNode()
					);
					stateStack.push_back(actionValue);
					lookahead++;
				}
				break;
			}
			case 2: {
				// Reduce
				auto newNonTerminal = Reduce(actionValue, stateItems, stateStack);
				if (PopItemCount(actionValue) > 0)
				{
					stateItems.erase(std::end(stateItems) - PopItemCount(actionValue), std::end(stateItems));
					stateStack.erase(std::end(stateStack) - PopItemCount(actionValue), std::end(stateStack));
				}
				stateItems.push_back(newNonTerminal);

				auto newCurrentState = GetCurrentState(stateStack);
				stateStack.push_back(gotoTable[newCurrentState][newNonTerminal->GetType() - {{terminal_count}}]);
				deletedItemCount = 0;
				break;
			}
			case 3: {
				// Accept
				if (1 >= stateItems.size())
				{
					rejecting = true;
					return true;
				}

				auto topNode = stateItems[1];
				auto tree = new ::deamer::external::cpp::ast::Tree(topNode);

				outputTree = tree;
				return true;
			}
			case 4: {
				// Reject
				UninitializeStack();
				rejecting = true;
				return true;
			}
			case 7: {
				// General
				std::cout << "General action: " << actionValue << "\n";
				
				auto GeneralIntroduceAccept = [&]() {
					// Accept
					if (1 >= stateItems.size())
					{
						rejecting = true;
						return true; // Reject
					}

					auto topNode = stateItems[1];
					auto tree = new ::deamer::external::cpp::ast::Tree(topNode);

					outputTree = tree;
					rejecting = false; // Accept
					return true;
				};

				auto GeneralIntroduceShift = [&](auto shiftState) {
					// Shift
					auto lookaheadCopy = lookahead;
					auto stateStackCopy = stateStack;
					auto stateItemsCopy = stateItems;
					auto deletedItemCountCopy = deletedItemCount;
				
					auto currentLookaheadToken_ = GetCurrentLookaheadTokenObject();
					if (constructionPolicy == ::deamer::external::cpp::parser::ASTConstructionPolicy::ast && ::{{language_name}}::ast::relation::NodeIsIgnored(static_cast<::{{language_name}}::ast::Type>(currentLookaheadToken_->GetType())))
					{
						stateItemsCopy.push_back(nullptr);
						stateStackCopy.push_back(shiftState);
						lookahead++;
					}
					else
					{
						stateItemsCopy.push_back(
							::{{language_name}}::ast::utility::CreateNode()
							.Node(GetCurrentLookaheadTokenObject())
							.GetNode()
						);
						stateStackCopy.push_back(shiftState);
						lookaheadCopy++;
					}

					currentEvaluations.emplace_back(std::make_unique<GeneralNode>(
						terminalObjects,
						constructionPolicy,
						epsilon,
						lookahead,
						std::move(stateStackCopy),
						std::move(stateItemsCopy),
						deletedItemCountCopy
					));

					return true;
				};

				auto GeneralIntroduceReduce = [&](auto reduceProduction) {
					// Reduce
					auto lookaheadCopy = lookahead;
					auto stateStackCopy = stateStack;
					auto stateItemsCopy = stateItems;
					auto deletedItemCountCopy = deletedItemCount;
					
					auto newNonTerminal = Reduce(reduceProduction, stateItemsCopy, stateStackCopy);

					if (PopItemCount(reduceProduction) > 0)
					{
						stateItemsCopy.erase(std::end(stateItemsCopy) - PopItemCount(reduceProduction), std::end(stateItemsCopy));
						stateStackCopy.erase(std::end(stateStackCopy) - PopItemCount(reduceProduction), std::end(stateStackCopy));
					}
					stateItemsCopy.push_back(newNonTerminal);

					auto newCurrentState = GetCurrentState(stateStackCopy);
					stateStackCopy.push_back(gotoTable[newCurrentState][newNonTerminal->GetType() - {{terminal_count}}]);
					deletedItemCountCopy = 0;

					currentEvaluations.emplace_back(std::make_unique<GeneralNode>(
						terminalObjects,
						constructionPolicy,
						epsilon,
						lookaheadCopy,
						std::move(stateStackCopy),
						std::move(stateItemsCopy),
						deletedItemCountCopy
					));

					return true;
				};
				rejecting = true; // It has forked into specializations thus reject this, only accept can make it false
{{optional_general_option_switch}}
				return true;
				break;
			}
			}

			return false;
		}
	};

	std::vector<std::unique_ptr<GeneralNode>> currentEvaluations;
	currentEvaluations.emplace_back(std::make_unique<GeneralNode>(terminalObjects, constructionPolicy, epsilon));

	deamer::external::cpp::ast::Tree* outputTree = nullptr;
	bool noPathHasAccepted = true;
	while (!currentEvaluations.empty() && noPathHasAccepted)
	{
		std::size_t currentSize = currentEvaluations.size(); // Everything extra is new forked states
		std::vector<std::size_t> toBeErased;
		for (auto i = 0; i < currentSize; i++)
		{
			auto currentEvaluation = currentEvaluations[i].get();
			auto result = currentEvaluation->ParseOneStep(currentEvaluations);
			if (result) // True: It has finished parsing
			{
				if (currentEvaluation->IsRejected())
				{
					// As is has rejected, this path is useless to continue
					toBeErased.push_back(i);
					continue;
				}

				// It has accepted
				noPathHasAccepted = false;
				outputTree = currentEvaluation->GetResult();
				continue;
			}
		}

		for (auto i = std::rbegin(toBeErased); i != std::rend(toBeErased); ++i)
		{
			auto eraseIndex = *i;
			currentEvaluations.erase(std::begin(currentEvaluations) + eraseIndex);
		}
	}

	return outputTree;
}

deamer::external::cpp::ast::Tree* {{language_name}}::dparse::parser::Parser::Parse(const std::string& text,
			  ::deamer::external::cpp::parser::ASTConstructionPolicy constructionPolicy) const
{
{{optional_dleg_usage}}
}