#ifndef DEAMER_TEMPLATES_DPARSE_PARSER_PARSERDEFINITIONTEMPLATE_h
#define DEAMER_TEMPLATES_DPARSE_PARSER_PARSERDEFINITIONTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::dparse::parser
{
	/*!	\class ParserDefinitionTemplate
	 *
	 *	\brief Generates code for "ParserDefinitionTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ParserDefinitionTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			action_table_2d_entry_,
			action_table_entry_,
			action_table_specialization_field_,
			action_table_type_field_,
			dleg_include_,
			dleg_usage_,
			file_,
			general_option_accept_impl_,
			general_option_id_,
			general_option_reduce_impl_,
			general_option_reduce_production_rule_,
			general_option_shift_impl_,
			general_option_shift_reduce_action_,
			general_option_shift_state_,
			general_option_switch_,
			general_option_switch_case_,
			goto_table_2d_entry_,
			goto_table_entry_,
			goto_table_field_,
			language_name_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			nonterminal_count_,
			optional_better_syntax_errors_,
			optional_dleg_include_,
			optional_dleg_usage_,
			optional_general_option_switch_,
			production_id_entry_,
			production_output_,
			production_output_entry_,
			production_rule_count_,
			production_rule_id_,
			production_rule_size_,
			production_rule_type_,
			production_rule_type_optimization_,
			production_rule_type_translation_,
			production_rule_type_user_,
			production_size_entry_,
			production_type_entry_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			state_count_,
			terminal_count_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope: {
				return "Scope";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				action_table_2d_entry_: {
				return "action_table_2d_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				action_table_entry_: {
				return "action_table_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				action_table_specialization_field_: {
				return "action_table_specialization_field";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				action_table_type_field_: {
				return "action_table_type_field";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				dleg_include_: {
				return "dleg_include";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::dleg_usage_: {
				return "dleg_usage";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_accept_impl_: {
				return "general_option_accept_impl";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_id_: {
				return "general_option_id";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_reduce_impl_: {
				return "general_option_reduce_impl";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_reduce_production_rule_: {
				return "general_option_reduce_production_rule";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_shift_impl_: {
				return "general_option_shift_impl";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_shift_reduce_action_: {
				return "general_option_shift_reduce_action";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_shift_state_: {
				return "general_option_shift_state";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_switch_: {
				return "general_option_switch";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				general_option_switch_case_: {
				return "general_option_switch_case";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				goto_table_2d_entry_: {
				return "goto_table_2d_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				goto_table_entry_: {
				return "goto_table_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				goto_table_field_: {
				return "goto_table_field";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				language_name_: {
				return "language_name";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				nonterminal_count_: {
				return "nonterminal_count";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				optional_better_syntax_errors_: {
				return "optional_better_syntax_errors";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				optional_dleg_include_: {
				return "optional_dleg_include";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				optional_dleg_usage_: {
				return "optional_dleg_usage";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				optional_general_option_switch_: {
				return "optional_general_option_switch";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_id_entry_: {
				return "production_id_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_output_: {
				return "production_output";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_output_entry_: {
				return "production_output_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_count_: {
				return "production_rule_count";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_id_: {
				return "production_rule_id";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_size_: {
				return "production_rule_size";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_type_: {
				return "production_rule_type";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_type_optimization_: {
				return "production_rule_type_optimization";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_type_translation_: {
				return "production_rule_type_translation";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_rule_type_user_: {
				return "production_rule_type_user";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_size_entry_: {
				return "production_size_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				production_type_entry_: {
				return "production_type_entry";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				state_count_: {
				return "state_count";
			}

			case ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
				terminal_count_: {
				return "terminal_count";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type type =
				::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::dparse::parser::ParserDefinitionTemplate::ScopeType scope_type =
				::deamer::templates::dparse::parser::ParserDefinitionTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::dparse::parser::ParserDefinitionTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::dparse::parser::ParserDefinitionTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::dparse::parser::ParserDefinitionTemplate::ScopeType::Default_,
				true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									  ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::dparse::parser::ParserDefinitionTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_action_table_2d_entry_ : public VariableScopes
		{
			static constexpr auto name = "action_table_2d_entry_";

			Variable_action_table_2d_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_2d_entry_;
			}

			virtual ~Variable_action_table_2d_entry_() override = default;

			Variable_action_table_2d_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_2d_entry_;
			}

			Variable_action_table_2d_entry_&
			operator=(const Variable_action_table_2d_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_action_table_entry_ : public VariableScopes
		{
			static constexpr auto name = "action_table_entry_";

			Variable_action_table_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_entry_;
			}

			virtual ~Variable_action_table_entry_() override = default;

			Variable_action_table_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_entry_;
			}

			Variable_action_table_entry_& operator=(const Variable_action_table_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_action_table_specialization_field_ : public VariableScopes
		{
			static constexpr auto name = "action_table_specialization_field_";

			Variable_action_table_specialization_field_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_specialization_field_;
			}

			virtual ~Variable_action_table_specialization_field_() override = default;

			Variable_action_table_specialization_field_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_specialization_field_;
			}

			Variable_action_table_specialization_field_&
			operator=(const Variable_action_table_specialization_field_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_action_table_type_field_ : public VariableScopes
		{
			static constexpr auto name = "action_table_type_field_";

			Variable_action_table_type_field_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_type_field_;
			}

			virtual ~Variable_action_table_type_field_() override = default;

			Variable_action_table_type_field_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					action_table_type_field_;
			}

			Variable_action_table_type_field_&
			operator=(const Variable_action_table_type_field_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_dleg_include_ : public VariableScopes
		{
			static constexpr auto name = "dleg_include_";

			Variable_dleg_include_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					dleg_include_;
			}

			virtual ~Variable_dleg_include_() override = default;

			Variable_dleg_include_(ParserDefinitionTemplate* parserdefinitiontemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					dleg_include_;
			}

			Variable_dleg_include_& operator=(const Variable_dleg_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_dleg_usage_ : public VariableScopes
		{
			static constexpr auto name = "dleg_usage_";

			Variable_dleg_usage_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					dleg_usage_;
			}

			virtual ~Variable_dleg_usage_() override = default;

			Variable_dleg_usage_(ParserDefinitionTemplate* parserdefinitiontemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					dleg_usage_;
			}

			Variable_dleg_usage_& operator=(const Variable_dleg_usage_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(ParserDefinitionTemplate* parserdefinitiontemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#include \""),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("/Dparse/Parser"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n"),
					 GenerateVariable(parserdefinitiontemplate_->optional_dleg_include_->This()),
					 GenerateVariable("\n#include \""),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Utility/CreateNode"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Relation/NodeEnumToText"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Relation/NodeIsDeleted"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Relation/NodeIsIgnored"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include <Deamer/External/Cpp/Ast/Node"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <Deamer/External/Cpp/Ast/Tree"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <memory>\n#include <vector>\n#include "
									  "<optional>\n#include <tuple>\n\nstruct "),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::dparse::parser::Parser::Impl\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\npublic:\n\tImpl() = default;\n\t~Impl() = default;\n"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\nstatic constexpr ::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::Type productionRuleOutput["),
					 GenerateVariable(parserdefinitiontemplate_->production_rule_count_->This()),
					 GenerateVariable("] = "),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->production_output_entry_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\nstatic constexpr ::deamer::external::cpp::ast::ProductionRuleType "
						 "productionTypeTable["),
					 GenerateVariable(parserdefinitiontemplate_->production_rule_count_->This()),
					 GenerateVariable("] = "),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->production_type_entry_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\nstatic constexpr std::size_t productionSizeTable["),
					 GenerateVariable(parserdefinitiontemplate_->production_rule_count_->This()),
					 GenerateVariable("] = "),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->production_size_entry_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\nstatic constexpr std::size_t productionRuleId["),
					 GenerateVariable(parserdefinitiontemplate_->production_rule_count_->This()),
					 GenerateVariable("] = "),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->production_id_entry_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\nstatic constexpr std::size_t gotoTable["),
					 GenerateVariable(parserdefinitiontemplate_->state_count_->This()),
					 GenerateVariable("]["),
					 GenerateVariable(parserdefinitiontemplate_->nonterminal_count_->This()),
					 GenerateVariable("] = "),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->goto_table_2d_entry_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\n/*\tThe field has a type containing two parts:\n *\t- Type of "
						 "action\n *\t- Action specialization\n *\n *\tThere are 6 types:\n *\t- "
						 "0: Unknown (Reject due to not being accessible)\n *\t- 1: Shift\n *\t- "
						 "2: Reduce\n *\t- 3: Accept\n *\t- 4: Reject (Formally specified to "
						 "reject)\n *\t- 7: General Options (Used for General parsing)\n *\n "
						 "*\tThe specialization value defines the operation given the type:\n *\t- "
						 "Shift: The value defines the next state\n *\t- Reduce: The value defines "
						 "the production rule index\n *\t- General: The value defines the general "
						 "options, this is statically computed"),
					 GenerateVariable("."),
					 GenerateVariable("\n *\t- Other: The value is unused\n */\nstatic constexpr "
									  "std::tuple<std::size_t, std::size_t> actionTable["),
					 GenerateVariable(parserdefinitiontemplate_->state_count_->This()),
					 GenerateVariable("]["),
					 GenerateVariable(parserdefinitiontemplate_->terminal_count_->This()),
					 GenerateVariable("] = "),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->action_table_2d_entry_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\ndeamer::external::cpp::ast::Tree* "),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::dparse::parser::Parser::Parse(std::vector<const "
									  "::deamer::external::cpp::lexer::TerminalObject*> "
									  "terminalObjects,\n\t\t\t  "
									  "::deamer::external::cpp::parser::ASTConstructionPolicy "
									  "constructionPolicy) const\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t// Add Epsilon token (EOF) at end of "
									  "input\n\tstd::unique_ptr<deamer::external::cpp::lexer::"
									  "TerminalObject> epsilon "
									  "=\n\t\tstd::make_unique<deamer::external::cpp::lexer::"
									  "TerminalObject>(\"\");\n\tterminalObjects"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(epsilon"),
					 GenerateVariable("."),
					 GenerateVariable("get());\n\n\tstruct GeneralNode\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\tconst std::vector<const "
									  "::deamer::external::cpp::lexer::TerminalObject*>& "
									  "terminalObjects;\n\t\t::deamer::external::cpp::parser::"
									  "ASTConstructionPolicy "
									  "constructionPolicy;\n\t\tstd::unique_ptr<deamer::external::"
									  "cpp::lexer::TerminalObject>& epsilon;\n\n\t\tstd::size_t "
									  "lookahead = 0;\n\t\tstd::vector<std::size_t> stateStack = "),
					 GenerateVariable("{"),
					 GenerateVariable(" 0 "),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\t\tstd::vector<::deamer::external::cpp::ast::Node*> stateItems = "),
					 GenerateVariable("{"),
					 GenerateVariable(" nullptr "),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\t\tstd::size_t deletedItemCount = "
						 "0;\n\t\t\n\t\t::deamer::external::cpp::ast::Tree* outputTree = "
						 "nullptr;\n\t\tstd::optional<bool> rejecting = "
						 "std::nullopt;\n\n\t\t\n\t\tGeneralNode(const std::vector<const "
						 "::deamer::external::cpp::lexer::TerminalObject*>& terminalObjects_, "
						 "::deamer::external::cpp::parser::ASTConstructionPolicy "
						 "constructionPolicy_, "
						 "std::unique_ptr<deamer::external::cpp::lexer::TerminalObject>& "
						 "epsilon_)\n\t\t\t:\tterminalObjects(terminalObjects_),"
						 "\n\t\t\t\tconstructionPolicy(constructionPolicy_),\n\t\t\t\tepsilon("
						 "epsilon_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\tGeneralNode(const std::vector<const "
						 "::deamer::external::cpp::lexer::TerminalObject*>& "
						 "terminalObjects_,\n\t\t\t\t\t::deamer::external::cpp::parser::"
						 "ASTConstructionPolicy "
						 "constructionPolicy_,\n\t\t\t\t\tstd::unique_ptr<deamer::external::cpp::"
						 "lexer::TerminalObject>& epsilon_,\n\t\t\t\t\tstd::size_t "
						 "lookahead_,\n\t\t\t\t\tstd::vector<std::size_t> "
						 "stateStack_,\n\t\t\t\t\tstd::vector<::deamer::external::cpp::ast::Node*> "
						 "stateItems_,\n\t\t\t\t\tstd::size_t "
						 "deletedItemCount_)\n\t\t\t:\tterminalObjects(terminalObjects_),"
						 "\n\t\t\t\tconstructionPolicy(constructionPolicy_),\n\t\t\t\tepsilon("
						 "epsilon_),\n\t\t\t\tlookahead(lookahead_),\n\t\t\t\tstateStack("
						 "stateStack_),\n\t\t\t\tstateItems(stateItems_),"
						 "\n\t\t\t\tdeletedItemCount(deletedItemCount_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t~GeneralNode()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tif (outputTree != nullptr)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tdelete outputTree;\n\t\t\t\treturn;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\tfor(auto i : stateItems)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tdelete i;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tstd::vector<::deamer::external::cpp::ast::Node*> "
									  "CopyStateItems()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tstd::vector<::deamer::external::cpp::ast::Node*> "
									  "newItems;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tbool InProgress()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn !rejecting"),
					 GenerateVariable("."),
					 GenerateVariable("has_value();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tbool IsRejected()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tif (!InProgress())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn rejecting"),
					 GenerateVariable("."),
					 GenerateVariable("value();\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn false;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\n\t\tbool IsAccepted()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tif (!InProgress())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn !rejecting"),
					 GenerateVariable("."),
					 GenerateVariable("value();\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn false;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\t\t\n\t\t::deamer::external::cpp::ast::Tree* GetResult()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tauto tmp = outputTree;\n\t\t\toutputTree = "
									  "nullptr;\n\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("clear();\n\t\t\treturn tmp;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\t\t\n\t\tbool ParseOneStep(std::vector<std::unique_ptr<GeneralNode>>& "
						 "currentEvaluations)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tauto UninitializeStack = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tfor (auto node : stateItems)\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tdelete node;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tauto GetCurrentLookaheadTokenObject = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn terminalObjects[lookahead];\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tauto GetCurrentLookaheadToken = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tif (lookahead < terminalObjects"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\treturn "
									  "static_cast<std::size_t>(terminalObjects[lookahead]->"
									  "GetType());\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\treturn std::size_t"),
					 GenerateVariable("{"),
					 GenerateVariable(" 0 "),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tauto GetLineNumberOfLookaheadToken = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tif (lookahead < terminalObjects"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\treturn "
									  "terminalObjects[lookahead]->GetLineNumber();\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\treturn -1;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tauto GetColumnNumberOfLookaheadToken = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tif (lookahead < terminalObjects"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\treturn "
									  "terminalObjects[lookahead]->GetColumnNumber();\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\treturn -1;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tauto GetValueOfLookaheadToken = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tif (lookahead < terminalObjects"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t\treturn terminalObjects[lookahead]->GetValue();\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\treturn std::string"),
					 GenerateVariable("{"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\n\t\t\tauto GetCurrentState = [](auto& stateStackReference) "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn stateStackReference[stateStackReference"),
					 GenerateVariable("."),
					 GenerateVariable("size() - 1];\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tauto LookaheadIsUnrecognizedToken = [](auto "
									  "lookahead_, auto& terminalObjects_, auto& epsilon_) "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn lookahead_ < terminalObjects_"),
					 GenerateVariable("."),
					 GenerateVariable("size() && terminalObjects_[lookahead_]->GetType() == 0 "
									  "&&\n\t\t\t\t\tterminalObjects_[lookahead_] != epsilon_"),
					 GenerateVariable("."),
					 GenerateVariable("get();\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tif (constructionPolicy == "
									  "::deamer::external::cpp::parser::ASTConstructionPolicy::cst "
									  "&& LookaheadIsUnrecognizedToken(lookahead, terminalObjects, "
									  "epsilon))\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(\n\t\t\t\t\t::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::utility::CreateNode()\n\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("Node(GetCurrentLookaheadTokenObject())\n\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("GetNode()\n\t\t\t\t);\n\t\t\t\tstateStack"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(GetCurrentState(stateStack));\n\t\t\t\tlookahead++;"
						 "\n\t\t\t\tdeletedItemCount++;\n\t\t\t\treturn false;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\t\tconst auto currentLookahead = "
						 "GetCurrentLookaheadToken();\n\t\t\tconst auto currentState = "
						 "GetCurrentState(stateStack);\n\n\t\t\tconst auto currentAction = "
						 "actionTable[currentState][currentLookahead];\n\t\t\tauto actionType = "
						 "std::get<0>(currentAction);\n\t\t\tauto actionValue = "
						 "std::get<1>(currentAction);\n\n\t\t\tif "
						 "(LookaheadIsUnrecognizedToken(lookahead, terminalObjects, "
						 "epsilon))\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tactionType = 0; // Reject as the terminal is not "
									  "used in the table"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\tauto PopItemCount = [&](auto reduceProduction) "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\treturn productionSizeTable[reduceProduction] + "
									  "deletedItemCount;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\n\t\t\tauto Reduce = [PopItemCount](auto reduceProduction, auto& "
						 "stateItemsReference, auto& stateStackReference) "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::utility::CreateNode createNode"),
					 GenerateVariable("{"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\t\t\t\tcreateNode"),
					 GenerateVariable("."),
					 GenerateVariable("Node(static_cast<std::size_t>(productionRuleOutput["
									  "reduceProduction]));\n\t\t\t\tcreateNode"),
					 GenerateVariable("."),
					 GenerateVariable("ProductionRule(productionRuleId[reduceProduction], "
									  "productionTypeTable[reduceProduction]);\n\n\t\t\t\tif "
									  "(PopItemCount(reduceProduction) > stateStackReference"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tthrow std::logic_error(\"Dparse"),
					 GenerateVariable("."),
					 GenerateVariable("Parse(): Syntax error, reduced production rule size is "
									  "larger than stack size"),
					 GenerateVariable("."),
					 GenerateVariable("\");\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\tfor (auto iter = std::end(stateItemsReference) "
									  "- PopItemCount(reduceProduction); iter != "
									  "std::end(stateItemsReference); iter++)\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tif (*iter == nullptr)\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\t\tcreateNode"),
					 GenerateVariable("."),
					 GenerateVariable("SubNode(*iter);\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\treturn createNode"),
					 GenerateVariable("."),
					 GenerateVariable("GetNode();\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\t\t\tswitch (actionType)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tcase 0: "),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t// Reject\n\t\t\t\tif (constructionPolicy == "
						 "::deamer::external::cpp::parser::ASTConstructionPolicy::cst && ::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::relation::NodeIsDeleted(static_cast<::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::Type>(GetCurrentLookaheadToken())))\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(\n\t\t\t\t\t\t::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::utility::CreateNode()\n\t\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("Node(GetCurrentLookaheadTokenObject())\n\t\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("GetNode()\n\t\t\t\t\t);\n\t\t\t\t\tstateStack"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(GetCurrentState(stateStack));\n\t\t\t\t\tlookahead++;"
						 "\n\t\t\t\t\tdeletedItemCount++;\n\t\t\t\t\tbreak;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\tif constexpr ("),
					 GenerateVariable(
						 parserdefinitiontemplate_->optional_better_syntax_errors_->This()),
					 GenerateVariable(")\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tstd::cout << \"Syntax error, unexpected token: "
									  "\";\n\n\t\t\t\t\tconst std::string text_ = ::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::relation::ConvertEnumToText(static_cast<::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable(
						 "::ast::Type>(GetCurrentLookaheadToken()));\n\t\t\t\t\tif (text_"),
					 GenerateVariable("."),
					 GenerateVariable("empty())\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tstd::cout << \"$\";\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\t\telse\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tstd::cout << text_;\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\t\tstd::cout << \" expected the following "
									  "tokens: \";\n\t\t\t\t\tfor (auto i = 0; i < "),
					 GenerateVariable(parserdefinitiontemplate_->terminal_count_->This()),
					 GenerateVariable("; i++)\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tauto action_ = "
									  "actionTable[currentState][i];\n\t\t\t\t\t\tif "
									  "(std::get<0>(action_) == 0)\n\t\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\t\t\tconst std::string text = ::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::relation::ConvertEnumToText(static_cast<::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::Type>(i));\n\t\t\t\t\t\tif (text"),
					 GenerateVariable("."),
					 GenerateVariable("empty())\n\t\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\t\tstd::cout << \"$\";\n\t\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\t\t\telse\n\t\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\t\tstd::cout << text;\n\t\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\t\t\tstd::cout << \", \";\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\t\tstd::cout << \""),
					 GenerateVariable("\\"),
					 GenerateVariable("n\";\n\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\tUninitializeStack();\n\t\t\t\trejecting = "
									  "true;\n\t\t\t\treturn true;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\tcase 1: "),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t// Shift\n\t\t\t\tauto currentLookaheadToken_ = "
						 "GetCurrentLookaheadTokenObject();\n\t\t\t\tif (constructionPolicy == "
						 "::deamer::external::cpp::parser::ASTConstructionPolicy::ast && ::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::relation::NodeIsIgnored(static_cast<::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable(
						 "::ast::Type>(currentLookaheadToken_->GetType())))\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(nullptr);\n\t\t\t\t\tstateStack"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(actionValue);\n\t\t\t\t\tlookahead++;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\telse\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(\n\t\t\t\t\t\t::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::utility::CreateNode()\n\t\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("Node(GetCurrentLookaheadTokenObject())\n\t\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("GetNode()\n\t\t\t\t\t);\n\t\t\t\t\tstateStack"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(actionValue);\n\t\t\t\t\tlookahead++;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\tbreak;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\tcase 2: "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t// Reduce\n\t\t\t\tauto newNonTerminal = "
									  "Reduce(actionValue, stateItems, stateStack);\n\t\t\t\tif "
									  "(PopItemCount(actionValue) > 0)\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("erase(std::end(stateItems) - PopItemCount(actionValue), "
									  "std::end(stateItems));\n\t\t\t\t\tstateStack"),
					 GenerateVariable("."),
					 GenerateVariable("erase(std::end(stateStack) - PopItemCount(actionValue), "
									  "std::end(stateStack));\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\tstateItems"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(newNonTerminal);\n\n\t\t\t\tauto newCurrentState "
									  "= GetCurrentState(stateStack);\n\t\t\t\tstateStack"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(gotoTable[newCurrentState][newNonTerminal->GetType() - "),
					 GenerateVariable(parserdefinitiontemplate_->terminal_count_->This()),
					 GenerateVariable("]);\n\t\t\t\tdeletedItemCount = 0;\n\t\t\t\tbreak;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\tcase 3: "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t// Accept\n\t\t\t\tif (1 >= stateItems"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t\trejecting = true;\n\t\t\t\t\treturn true;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\t\t\tauto topNode = stateItems[1];\n\t\t\t\tauto tree = new "
						 "::deamer::external::cpp::ast::Tree(topNode);\n\n\t\t\t\toutputTree = "
						 "tree;\n\t\t\t\treturn true;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\tcase 4: "),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t// Reject\n\t\t\t\tUninitializeStack();\n\t\t\t\trejecting = "
						 "true;\n\t\t\t\treturn true;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\tcase 7: "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t// General\n\t\t\t\tstd::cout << \"General "
									  "action: \" << actionValue << \""),
					 GenerateVariable("\\"),
					 GenerateVariable(
						 "n\";\n\t\t\t\t\n\t\t\t\tauto GeneralIntroduceAccept = [&]() "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t// Accept\n\t\t\t\t\tif (1 >= stateItems"),
					 GenerateVariable("."),
					 GenerateVariable("size())\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\trejecting = true;\n\t\t\t\t\t\treturn true; "
									  "// Reject\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\t\t\t\tauto topNode = stateItems[1];\n\t\t\t\t\tauto tree = new "
						 "::deamer::external::cpp::ast::Tree(topNode);\n\n\t\t\t\t\toutputTree = "
						 "tree;\n\t\t\t\t\trejecting = false; // Accept\n\t\t\t\t\treturn "
						 "true;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\n\t\t\t\tauto GeneralIntroduceShift = [&](auto shiftState) "),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t\t// Shift\n\t\t\t\t\tauto lookaheadCopy = "
						 "lookahead;\n\t\t\t\t\tauto stateStackCopy = stateStack;\n\t\t\t\t\tauto "
						 "stateItemsCopy = stateItems;\n\t\t\t\t\tauto deletedItemCountCopy = "
						 "deletedItemCount;\n\t\t\t\t\n\t\t\t\t\tauto currentLookaheadToken_ = "
						 "GetCurrentLookaheadTokenObject();\n\t\t\t\t\tif (constructionPolicy == "
						 "::deamer::external::cpp::parser::ASTConstructionPolicy::ast && ::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::relation::NodeIsIgnored(static_cast<::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable(
						 "::ast::Type>(currentLookaheadToken_->GetType())))\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tstateItemsCopy"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(nullptr);\n\t\t\t\t\t\tstateStackCopy"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(shiftState);\n\t\t\t\t\t\tlookahead++;\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\t\telse\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tstateItemsCopy"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(\n\t\t\t\t\t\t\t::"),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::ast::utility::CreateNode()\n\t\t\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("Node(GetCurrentLookaheadTokenObject())\n\t\t\t\t\t\t\t"),
					 GenerateVariable("."),
					 GenerateVariable("GetNode()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstateStackCopy"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(shiftState);\n\t\t\t\t\t\tlookaheadCopy++;\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\t\tcurrentEvaluations"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "emplace_back(std::make_unique<GeneralNode>(\n\t\t\t\t\t\tterminalObjects,"
						 "\n\t\t\t\t\t\tconstructionPolicy,\n\t\t\t\t\t\tepsilon,"
						 "\n\t\t\t\t\t\tlookahead,\n\t\t\t\t\t\tstd::move(stateStackCopy),"
						 "\n\t\t\t\t\t\tstd::move(stateItemsCopy),"
						 "\n\t\t\t\t\t\tdeletedItemCountCopy\n\t\t\t\t\t));\n\n\t\t\t\t\treturn "
						 "true;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\n\t\t\t\tauto GeneralIntroduceReduce = [&](auto reduceProduction) "),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t\t// Reduce\n\t\t\t\t\tauto lookaheadCopy = "
						 "lookahead;\n\t\t\t\t\tauto stateStackCopy = stateStack;\n\t\t\t\t\tauto "
						 "stateItemsCopy = stateItems;\n\t\t\t\t\tauto deletedItemCountCopy = "
						 "deletedItemCount;\n\t\t\t\t\t\n\t\t\t\t\tauto newNonTerminal = "
						 "Reduce(reduceProduction, stateItemsCopy, "
						 "stateStackCopy);\n\n\t\t\t\t\tif (PopItemCount(reduceProduction) > "
						 "0)\n\t\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t\tstateItemsCopy"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "erase(std::end(stateItemsCopy) - PopItemCount(reduceProduction), "
						 "std::end(stateItemsCopy));\n\t\t\t\t\t\tstateStackCopy"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "erase(std::end(stateStackCopy) - PopItemCount(reduceProduction), "
						 "std::end(stateStackCopy));\n\t\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\t\tstateItemsCopy"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(newNonTerminal);\n\n\t\t\t\t\tauto newCurrentState = "
						 "GetCurrentState(stateStackCopy);\n\t\t\t\t\tstateStackCopy"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "push_back(gotoTable[newCurrentState][newNonTerminal->GetType() - "),
					 GenerateVariable(parserdefinitiontemplate_->terminal_count_->This()),
					 GenerateVariable("]);\n\t\t\t\t\tdeletedItemCountCopy = "
									  "0;\n\n\t\t\t\t\tcurrentEvaluations"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "emplace_back(std::make_unique<GeneralNode>(\n\t\t\t\t\t\tterminalObjects,"
						 "\n\t\t\t\t\t\tconstructionPolicy,\n\t\t\t\t\t\tepsilon,"
						 "\n\t\t\t\t\t\tlookaheadCopy,\n\t\t\t\t\t\tstd::move(stateStackCopy),"
						 "\n\t\t\t\t\t\tstd::move(stateItemsCopy),"
						 "\n\t\t\t\t\t\tdeletedItemCountCopy\n\t\t\t\t\t));\n\n\t\t\t\t\treturn "
						 "true;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ";\n\t\t\t\trejecting = true; // It has forked into specializations thus "
						 "reject this, only accept can make it false\n"),
					 GenerateVariable(
						 parserdefinitiontemplate_->optional_general_option_switch_->This()),
					 GenerateVariable("\n\t\t\t\treturn true;\n\t\t\t\tbreak;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\treturn false;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n\tstd::vector<std::unique_ptr<GeneralNode>> "
									  "currentEvaluations;\n\tcurrentEvaluations"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "emplace_back(std::make_unique<GeneralNode>(terminalObjects, "
						 "constructionPolicy, epsilon));\n\n\tdeamer::external::cpp::ast::Tree* "
						 "outputTree = nullptr;\n\tbool noPathHasAccepted = true;\n\twhile "
						 "(!currentEvaluations"),
					 GenerateVariable("."),
					 GenerateVariable("empty() && noPathHasAccepted)\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\tstd::size_t currentSize = currentEvaluations"),
					 GenerateVariable("."),
					 GenerateVariable("size(); // Everything extra is new forked "
									  "states\n\t\tstd::vector<std::size_t> toBeErased;\n\t\tfor "
									  "(auto i = 0; i < currentSize; i++)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tauto currentEvaluation = currentEvaluations[i]"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "get();\n\t\t\tauto result = "
						 "currentEvaluation->ParseOneStep(currentEvaluations);\n\t\t\tif (result) "
						 "// True: It has finished parsing\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tif (currentEvaluation->IsRejected())\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t// As is has rejected, this path is useless to "
									  "continue\n\t\t\t\t\ttoBeErased"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(i);\n\t\t\t\t\tcontinue;\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\t\t// It has accepted\n\t\t\t\tnoPathHasAccepted = "
									  "false;\n\t\t\t\toutputTree = "
									  "currentEvaluation->GetResult();\n\t\t\t\tcontinue;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tfor (auto i = std::rbegin(toBeErased); i != "
									  "std::rend(toBeErased); ++i)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tauto eraseIndex = *i;\n\t\t\tcurrentEvaluations"),
					 GenerateVariable("."),
					 GenerateVariable("erase(std::begin(currentEvaluations) + eraseIndex);\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\treturn outputTree;\n"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\ndeamer::external::cpp::ast::Tree* "),
					 GenerateVariable(parserdefinitiontemplate_->language_name_->This()),
					 GenerateVariable(
						 "::dparse::parser::Parser::Parse(const std::string& text,\n\t\t\t  "
						 "::deamer::external::cpp::parser::ASTConstructionPolicy "
						 "constructionPolicy) const\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(parserdefinitiontemplate_->optional_dleg_usage_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable("}")}));
				Content_->type =
					::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("ParserDefinition")}));
				File_name_->type =
					::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::dparse::parser")}));
				Namespace_->type =
					::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_general_option_accept_impl_ : public VariableScopes
		{
			static constexpr auto name = "general_option_accept_impl_";

			Variable_general_option_accept_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_accept_impl_;
			}

			virtual ~Variable_general_option_accept_impl_() override = default;

			Variable_general_option_accept_impl_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_accept_impl_;
			}

			Variable_general_option_accept_impl_&
			operator=(const Variable_general_option_accept_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_id_ : public VariableScopes
		{
			static constexpr auto name = "general_option_id_";

			Variable_general_option_id_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_id_;
			}

			virtual ~Variable_general_option_id_() override = default;

			Variable_general_option_id_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_id_;
			}

			Variable_general_option_id_& operator=(const Variable_general_option_id_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_reduce_impl_ : public VariableScopes
		{
			static constexpr auto name = "general_option_reduce_impl_";

			Variable_general_option_reduce_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_reduce_impl_;
			}

			virtual ~Variable_general_option_reduce_impl_() override = default;

			Variable_general_option_reduce_impl_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_reduce_impl_;
			}

			Variable_general_option_reduce_impl_&
			operator=(const Variable_general_option_reduce_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_reduce_production_rule_ : public VariableScopes
		{
			static constexpr auto name = "general_option_reduce_production_rule_";

			Variable_general_option_reduce_production_rule_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_reduce_production_rule_;
			}

			virtual ~Variable_general_option_reduce_production_rule_() override = default;

			Variable_general_option_reduce_production_rule_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_reduce_production_rule_;
			}

			Variable_general_option_reduce_production_rule_&
			operator=(const Variable_general_option_reduce_production_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_shift_impl_ : public VariableScopes
		{
			static constexpr auto name = "general_option_shift_impl_";

			Variable_general_option_shift_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_shift_impl_;
			}

			virtual ~Variable_general_option_shift_impl_() override = default;

			Variable_general_option_shift_impl_(ParserDefinitionTemplate* parserdefinitiontemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_shift_impl_;
			}

			Variable_general_option_shift_impl_&
			operator=(const Variable_general_option_shift_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_shift_reduce_action_ : public VariableScopes
		{
			static constexpr auto name = "general_option_shift_reduce_action_";

			Variable_general_option_shift_reduce_action_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_shift_reduce_action_;
			}

			virtual ~Variable_general_option_shift_reduce_action_() override = default;

			Variable_general_option_shift_reduce_action_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_shift_reduce_action_;
			}

			Variable_general_option_shift_reduce_action_&
			operator=(const Variable_general_option_shift_reduce_action_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_shift_state_ : public VariableScopes
		{
			static constexpr auto name = "general_option_shift_state_";

			Variable_general_option_shift_state_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_shift_state_;
			}

			virtual ~Variable_general_option_shift_state_() override = default;

			Variable_general_option_shift_state_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_shift_state_;
			}

			Variable_general_option_shift_state_&
			operator=(const Variable_general_option_shift_state_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_switch_ : public VariableScopes
		{
			static constexpr auto name = "general_option_switch_";

			Variable_general_option_switch_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_switch_;
			}

			virtual ~Variable_general_option_switch_() override = default;

			Variable_general_option_switch_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_switch_;
			}

			Variable_general_option_switch_&
			operator=(const Variable_general_option_switch_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_general_option_switch_case_ : public VariableScopes
		{
			static constexpr auto name = "general_option_switch_case_";

			Variable_general_option_switch_case_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_switch_case_;
			}

			virtual ~Variable_general_option_switch_case_() override = default;

			Variable_general_option_switch_case_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					general_option_switch_case_;
			}

			Variable_general_option_switch_case_&
			operator=(const Variable_general_option_switch_case_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_goto_table_2d_entry_ : public VariableScopes
		{
			static constexpr auto name = "goto_table_2d_entry_";

			Variable_goto_table_2d_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					goto_table_2d_entry_;
			}

			virtual ~Variable_goto_table_2d_entry_() override = default;

			Variable_goto_table_2d_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					goto_table_2d_entry_;
			}

			Variable_goto_table_2d_entry_& operator=(const Variable_goto_table_2d_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_goto_table_entry_ : public VariableScopes
		{
			static constexpr auto name = "goto_table_entry_";

			Variable_goto_table_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					goto_table_entry_;
			}

			virtual ~Variable_goto_table_entry_() override = default;

			Variable_goto_table_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					goto_table_entry_;
			}

			Variable_goto_table_entry_& operator=(const Variable_goto_table_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_goto_table_field_ : public VariableScopes
		{
			static constexpr auto name = "goto_table_field_";

			Variable_goto_table_field_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					goto_table_field_;
			}

			virtual ~Variable_goto_table_field_() override = default;

			Variable_goto_table_field_(ParserDefinitionTemplate* parserdefinitiontemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					goto_table_field_;
			}

			Variable_goto_table_field_& operator=(const Variable_goto_table_field_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(ParserDefinitionTemplate* parserdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(ParserDefinitionTemplate* parserdefinitiontemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_count_ : public VariableScopes
		{
			static constexpr auto name = "nonterminal_count_";

			Variable_nonterminal_count_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					nonterminal_count_;
			}

			virtual ~Variable_nonterminal_count_() override = default;

			Variable_nonterminal_count_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					nonterminal_count_;
			}

			Variable_nonterminal_count_& operator=(const Variable_nonterminal_count_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_better_syntax_errors_ : public VariableScopes
		{
			static constexpr auto name = "optional_better_syntax_errors_";

			Variable_optional_better_syntax_errors_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_better_syntax_errors_;
			}

			virtual ~Variable_optional_better_syntax_errors_() override = default;

			Variable_optional_better_syntax_errors_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_better_syntax_errors_;
			}

			Variable_optional_better_syntax_errors_&
			operator=(const Variable_optional_better_syntax_errors_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_dleg_include_ : public VariableScopes
		{
			static constexpr auto name = "optional_dleg_include_";

			Variable_optional_dleg_include_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_dleg_include_;
			}

			virtual ~Variable_optional_dleg_include_() override = default;

			Variable_optional_dleg_include_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_dleg_include_;
			}

			Variable_optional_dleg_include_&
			operator=(const Variable_optional_dleg_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_dleg_usage_ : public VariableScopes
		{
			static constexpr auto name = "optional_dleg_usage_";

			Variable_optional_dleg_usage_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_dleg_usage_;
			}

			virtual ~Variable_optional_dleg_usage_() override = default;

			Variable_optional_dleg_usage_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_dleg_usage_;
			}

			Variable_optional_dleg_usage_& operator=(const Variable_optional_dleg_usage_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_general_option_switch_ : public VariableScopes
		{
			static constexpr auto name = "optional_general_option_switch_";

			Variable_optional_general_option_switch_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_general_option_switch_;
			}

			virtual ~Variable_optional_general_option_switch_() override = default;

			Variable_optional_general_option_switch_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					optional_general_option_switch_;
			}

			Variable_optional_general_option_switch_&
			operator=(const Variable_optional_general_option_switch_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_id_entry_ : public VariableScopes
		{
			static constexpr auto name = "production_id_entry_";

			Variable_production_id_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_id_entry_;
			}

			virtual ~Variable_production_id_entry_() override = default;

			Variable_production_id_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_id_entry_;
			}

			Variable_production_id_entry_& operator=(const Variable_production_id_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_output_ : public VariableScopes
		{
			static constexpr auto name = "production_output_";

			Variable_production_output_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_output_;
			}

			virtual ~Variable_production_output_() override = default;

			Variable_production_output_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_output_;
			}

			Variable_production_output_& operator=(const Variable_production_output_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_output_entry_ : public VariableScopes
		{
			static constexpr auto name = "production_output_entry_";

			Variable_production_output_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_output_entry_;
			}

			virtual ~Variable_production_output_entry_() override = default;

			Variable_production_output_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_output_entry_;
			}

			Variable_production_output_entry_&
			operator=(const Variable_production_output_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_count_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_count_";

			Variable_production_rule_count_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_count_;
			}

			virtual ~Variable_production_rule_count_() override = default;

			Variable_production_rule_count_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_count_;
			}

			Variable_production_rule_count_&
			operator=(const Variable_production_rule_count_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_id_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_id_";

			Variable_production_rule_id_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_id_;
			}

			virtual ~Variable_production_rule_id_() override = default;

			Variable_production_rule_id_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_id_;
			}

			Variable_production_rule_id_& operator=(const Variable_production_rule_id_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_size_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_size_";

			Variable_production_rule_size_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_size_;
			}

			virtual ~Variable_production_rule_size_() override = default;

			Variable_production_rule_size_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_size_;
			}

			Variable_production_rule_size_&
			operator=(const Variable_production_rule_size_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_type_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_type_";

			Variable_production_rule_type_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_;
			}

			virtual ~Variable_production_rule_type_() override = default;

			Variable_production_rule_type_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_;
			}

			Variable_production_rule_type_&
			operator=(const Variable_production_rule_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_type_optimization_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_type_optimization_";

			Variable_production_rule_type_optimization_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_optimization_;
			}

			virtual ~Variable_production_rule_type_optimization_() override = default;

			Variable_production_rule_type_optimization_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_optimization_;
			}

			Variable_production_rule_type_optimization_&
			operator=(const Variable_production_rule_type_optimization_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_type_translation_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_type_translation_";

			Variable_production_rule_type_translation_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_translation_;
			}

			virtual ~Variable_production_rule_type_translation_() override = default;

			Variable_production_rule_type_translation_(
				ParserDefinitionTemplate* parserdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_translation_;
			}

			Variable_production_rule_type_translation_&
			operator=(const Variable_production_rule_type_translation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_type_user_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_type_user_";

			Variable_production_rule_type_user_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_user_;
			}

			virtual ~Variable_production_rule_type_user_() override = default;

			Variable_production_rule_type_user_(ParserDefinitionTemplate* parserdefinitiontemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_rule_type_user_;
			}

			Variable_production_rule_type_user_&
			operator=(const Variable_production_rule_type_user_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_size_entry_ : public VariableScopes
		{
			static constexpr auto name = "production_size_entry_";

			Variable_production_size_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_size_entry_;
			}

			virtual ~Variable_production_size_entry_() override = default;

			Variable_production_size_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_size_entry_;
			}

			Variable_production_size_entry_&
			operator=(const Variable_production_size_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_type_entry_ : public VariableScopes
		{
			static constexpr auto name = "production_type_entry_";

			Variable_production_type_entry_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_type_entry_;
			}

			virtual ~Variable_production_type_entry_() override = default;

			Variable_production_type_entry_(ParserDefinitionTemplate* parserdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					production_type_entry_;
			}

			Variable_production_type_entry_&
			operator=(const Variable_production_type_entry_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(ParserDefinitionTemplate* parserdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(ParserDefinitionTemplate* parserdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_state_count_ : public VariableScopes
		{
			static constexpr auto name = "state_count_";

			Variable_state_count_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					state_count_;
			}

			virtual ~Variable_state_count_() override = default;

			Variable_state_count_(ParserDefinitionTemplate* parserdefinitiontemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					state_count_;
			}

			Variable_state_count_& operator=(const Variable_state_count_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_count_ : public VariableScopes
		{
			static constexpr auto name = "terminal_count_";

			Variable_terminal_count_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					terminal_count_;
			}

			virtual ~Variable_terminal_count_() override = default;

			Variable_terminal_count_(ParserDefinitionTemplate* parserdefinitiontemplate_,
									 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::ParserDefinitionTemplate::Type::
					terminal_count_;
			}

			Variable_terminal_count_& operator=(const Variable_terminal_count_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ParserDefinitionTemplate.member = "auto-generated";
		Variable_action_table_2d_entry_* action_table_2d_entry_ =
			new Variable_action_table_2d_entry_();
		Variable_action_table_entry_* action_table_entry_ = new Variable_action_table_entry_();
		Variable_action_table_specialization_field_* action_table_specialization_field_ =
			new Variable_action_table_specialization_field_();
		Variable_action_table_type_field_* action_table_type_field_ =
			new Variable_action_table_type_field_();
		Variable_dleg_include_* dleg_include_ = new Variable_dleg_include_();
		Variable_dleg_usage_* dleg_usage_ = new Variable_dleg_usage_();
		Variable_file_* file_ = new Variable_file_();
		Variable_general_option_accept_impl_* general_option_accept_impl_ =
			new Variable_general_option_accept_impl_();
		Variable_general_option_id_* general_option_id_ = new Variable_general_option_id_();
		Variable_general_option_reduce_impl_* general_option_reduce_impl_ =
			new Variable_general_option_reduce_impl_();
		Variable_general_option_reduce_production_rule_* general_option_reduce_production_rule_ =
			new Variable_general_option_reduce_production_rule_();
		Variable_general_option_shift_impl_* general_option_shift_impl_ =
			new Variable_general_option_shift_impl_();
		Variable_general_option_shift_reduce_action_* general_option_shift_reduce_action_ =
			new Variable_general_option_shift_reduce_action_();
		Variable_general_option_shift_state_* general_option_shift_state_ =
			new Variable_general_option_shift_state_();
		Variable_general_option_switch_* general_option_switch_ =
			new Variable_general_option_switch_();
		Variable_general_option_switch_case_* general_option_switch_case_ =
			new Variable_general_option_switch_case_();
		Variable_goto_table_2d_entry_* goto_table_2d_entry_ = new Variable_goto_table_2d_entry_();
		Variable_goto_table_entry_* goto_table_entry_ = new Variable_goto_table_entry_();
		Variable_goto_table_field_* goto_table_field_ = new Variable_goto_table_field_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_nonterminal_count_* nonterminal_count_ = new Variable_nonterminal_count_();
		Variable_optional_better_syntax_errors_* optional_better_syntax_errors_ =
			new Variable_optional_better_syntax_errors_();
		Variable_optional_dleg_include_* optional_dleg_include_ =
			new Variable_optional_dleg_include_();
		Variable_optional_dleg_usage_* optional_dleg_usage_ = new Variable_optional_dleg_usage_();
		Variable_optional_general_option_switch_* optional_general_option_switch_ =
			new Variable_optional_general_option_switch_();
		Variable_production_id_entry_* production_id_entry_ = new Variable_production_id_entry_();
		Variable_production_output_* production_output_ = new Variable_production_output_();
		Variable_production_output_entry_* production_output_entry_ =
			new Variable_production_output_entry_();
		Variable_production_rule_count_* production_rule_count_ =
			new Variable_production_rule_count_();
		Variable_production_rule_id_* production_rule_id_ = new Variable_production_rule_id_();
		Variable_production_rule_size_* production_rule_size_ =
			new Variable_production_rule_size_();
		Variable_production_rule_type_* production_rule_type_ =
			new Variable_production_rule_type_();
		Variable_production_rule_type_optimization_* production_rule_type_optimization_ =
			new Variable_production_rule_type_optimization_();
		Variable_production_rule_type_translation_* production_rule_type_translation_ =
			new Variable_production_rule_type_translation_();
		Variable_production_rule_type_user_* production_rule_type_user_ =
			new Variable_production_rule_type_user_();
		Variable_production_size_entry_* production_size_entry_ =
			new Variable_production_size_entry_();
		Variable_production_type_entry_* production_type_entry_ =
			new Variable_production_type_entry_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_state_count_* state_count_ = new Variable_state_count_();
		Variable_terminal_count_* terminal_count_ = new Variable_terminal_count_();

	public:
		ParserDefinitionTemplate()
		{
			*action_table_2d_entry_ = Variable_action_table_2d_entry_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("{"), GenerateVariable(" "),
						   GenerateVariable(action_table_entry_->Variable_Field()),
						   GenerateVariable(" "), GenerateVariable("}"), GenerateVariable(",")}));
			*action_table_entry_ = Variable_action_table_entry_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("{"), GenerateVariable(" "),
					 GenerateVariable(action_table_type_field_->This()), GenerateVariable(", "),
					 GenerateVariable(action_table_specialization_field_->This()),
					 GenerateVariable(" "), GenerateVariable("}"), GenerateVariable(",")}));
			*action_table_specialization_field_ =
				Variable_action_table_specialization_field_(this, std::vector<VariableBase*>({}));
			*action_table_type_field_ =
				Variable_action_table_type_field_(this, std::vector<VariableBase*>({}));
			*dleg_include_ = Variable_dleg_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Dleg/Lexer"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*dleg_usage_ = Variable_dleg_usage_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\n\t"), GenerateVariable(language_name_->This()),
						   GenerateVariable("::dleg::lexer::Lexer lexer;\n\tauto tokens = lexer"),
						   GenerateVariable("."),
						   GenerateVariable("Tokenize(text);\n\treturn Parse(tokens);\n\t")}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*general_option_accept_impl_ = Variable_general_option_accept_impl_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\t\t\t\t\tGeneralIntroduceAccept();")}));
			*general_option_id_ = Variable_general_option_id_(this, std::vector<VariableBase*>({}));
			*general_option_reduce_impl_ = Variable_general_option_reduce_impl_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\t\t\t\t\tGeneralIntroduceReduce("),
						   GenerateVariable(general_option_reduce_production_rule_->This()),
						   GenerateVariable(");")}));
			*general_option_reduce_production_rule_ =
				Variable_general_option_reduce_production_rule_(this,
																std::vector<VariableBase*>({}));
			*general_option_shift_impl_ = Variable_general_option_shift_impl_(
				this,
				std::vector<VariableBase*>({GenerateVariable("\t\t\t\t\tGeneralIntroduceShift("),
											GenerateVariable(general_option_shift_state_->This()),
											GenerateVariable(");")}));
			*general_option_shift_reduce_action_ =
				Variable_general_option_shift_reduce_action_(this, std::vector<VariableBase*>({}));
			*general_option_shift_state_ =
				Variable_general_option_shift_state_(this, std::vector<VariableBase*>({}));
			*general_option_switch_ = Variable_general_option_switch_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\t\t\t\tswitch(actionValue)\n\t\t\t\t"),
					 GenerateVariable("{"), GenerateVariable("\n"),
					 GenerateVariable(general_option_switch_case_->Variable_Field()),
					 GenerateVariable("\n\t\t\t\tdefault: "), GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\t// Nothing to do\n\t\t\t\t\tbreak;\n\t\t\t\t"),
					 GenerateVariable("}"), GenerateVariable("\n\t\t\t\t"), GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t")}));
			*general_option_switch_case_ = Variable_general_option_switch_case_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\n\t\t\t\tcase "),
						   GenerateVariable(general_option_id_->This()), GenerateVariable(": "),
						   GenerateVariable("{"), GenerateVariable("\n"),
						   GenerateVariable(general_option_shift_reduce_action_->Variable_Field()),
						   GenerateVariable("\n\t\t\t\t\tbreak;\n\t\t\t\t"), GenerateVariable("}"),
						   GenerateVariable("\n")}));
			*goto_table_2d_entry_ = Variable_goto_table_2d_entry_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("{"), GenerateVariable(" "),
						   GenerateVariable(goto_table_entry_->Variable_Field()),
						   GenerateVariable(" "), GenerateVariable("}"), GenerateVariable(",")}));
			*goto_table_entry_ = Variable_goto_table_entry_(
				this, std::vector<VariableBase*>({GenerateVariable("{"), GenerateVariable(" "),
												  GenerateVariable(goto_table_field_->This()),
												  GenerateVariable(" "), GenerateVariable("}"),
												  GenerateVariable(",")}));
			*goto_table_field_ = Variable_goto_table_field_(this, std::vector<VariableBase*>({}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*nonterminal_count_ = Variable_nonterminal_count_(this, std::vector<VariableBase*>({}));
			*optional_better_syntax_errors_ = Variable_optional_better_syntax_errors_(
				this, std::vector<VariableBase*>({GenerateVariable("true")}));
			*optional_dleg_include_ =
				Variable_optional_dleg_include_(this, std::vector<VariableBase*>({}));
			*optional_dleg_usage_ = Variable_optional_dleg_usage_(
				this, std::vector<VariableBase*>({GenerateVariable(
						  "\n\t// Pass through lexer to get Terminal Objects\n\t// And use those "
						  "objects;\n\n\treturn nullptr;")}));
			*optional_general_option_switch_ =
				Variable_optional_general_option_switch_(this, std::vector<VariableBase*>({}));
			*production_id_entry_ = Variable_production_id_entry_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(production_rule_id_->This()), GenerateVariable(",")}));
			*production_output_ = Variable_production_output_(this, std::vector<VariableBase*>({}));
			*production_output_entry_ = Variable_production_output_entry_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("::"), GenerateVariable(language_name_->This()),
						   GenerateVariable("::ast::Type::"),
						   GenerateVariable(production_output_->This()), GenerateVariable(",")}));
			*production_rule_count_ =
				Variable_production_rule_count_(this, std::vector<VariableBase*>({}));
			*production_rule_id_ =
				Variable_production_rule_id_(this, std::vector<VariableBase*>({}));
			*production_rule_size_ =
				Variable_production_rule_size_(this, std::vector<VariableBase*>({}));
			*production_rule_type_ =
				Variable_production_rule_type_(this, std::vector<VariableBase*>({}));
			*production_rule_type_optimization_ = Variable_production_rule_type_optimization_(
				this, std::vector<VariableBase*>({GenerateVariable("optimization")}));
			*production_rule_type_translation_ = Variable_production_rule_type_translation_(
				this, std::vector<VariableBase*>({GenerateVariable("translation")}));
			*production_rule_type_user_ = Variable_production_rule_type_user_(
				this, std::vector<VariableBase*>({GenerateVariable("user")}));
			*production_size_entry_ = Variable_production_size_entry_(
				this, std::vector<VariableBase*>({GenerateVariable(production_rule_size_->This()),
												  GenerateVariable(",")}));
			*production_type_entry_ = Variable_production_type_entry_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("::deamer::external::cpp::ast::ProductionRuleType::"),
					 GenerateVariable(production_rule_type_->This()), GenerateVariable(",")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*state_count_ = Variable_state_count_(this, std::vector<VariableBase*>({}));
			*terminal_count_ = Variable_terminal_count_(this, std::vector<VariableBase*>({}));

			variables_.emplace_back(action_table_2d_entry_);
			variables_.emplace_back(action_table_entry_);
			variables_.emplace_back(action_table_specialization_field_);
			variables_.emplace_back(action_table_type_field_);
			variables_.emplace_back(dleg_include_);
			variables_.emplace_back(dleg_usage_);
			variables_.emplace_back(file_);
			variables_.emplace_back(general_option_accept_impl_);
			variables_.emplace_back(general_option_id_);
			variables_.emplace_back(general_option_reduce_impl_);
			variables_.emplace_back(general_option_reduce_production_rule_);
			variables_.emplace_back(general_option_shift_impl_);
			variables_.emplace_back(general_option_shift_reduce_action_);
			variables_.emplace_back(general_option_shift_state_);
			variables_.emplace_back(general_option_switch_);
			variables_.emplace_back(general_option_switch_case_);
			variables_.emplace_back(goto_table_2d_entry_);
			variables_.emplace_back(goto_table_entry_);
			variables_.emplace_back(goto_table_field_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(nonterminal_count_);
			variables_.emplace_back(optional_better_syntax_errors_);
			variables_.emplace_back(optional_dleg_include_);
			variables_.emplace_back(optional_dleg_usage_);
			variables_.emplace_back(optional_general_option_switch_);
			variables_.emplace_back(production_id_entry_);
			variables_.emplace_back(production_output_);
			variables_.emplace_back(production_output_entry_);
			variables_.emplace_back(production_rule_count_);
			variables_.emplace_back(production_rule_id_);
			variables_.emplace_back(production_rule_size_);
			variables_.emplace_back(production_rule_type_);
			variables_.emplace_back(production_rule_type_optimization_);
			variables_.emplace_back(production_rule_type_translation_);
			variables_.emplace_back(production_rule_type_user_);
			variables_.emplace_back(production_size_entry_);
			variables_.emplace_back(production_type_entry_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(state_count_);
			variables_.emplace_back(terminal_count_);
		}

		virtual ~ParserDefinitionTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_DPARSE_PARSER_PARSERDEFINITIONTEMPLATE_h
