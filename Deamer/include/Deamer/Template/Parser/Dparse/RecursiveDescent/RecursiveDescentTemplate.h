#ifndef DEAMER_TEMPLATES_DPARSE_PARSER_RECURSIVEDESCENTTEMPLATE_h
#define DEAMER_TEMPLATES_DPARSE_PARSER_RECURSIVEDESCENTTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::dparse::parser
{
	/*!	\class RecursiveDescentTemplate
	 *
	 *	\brief Generates code for "RecursiveDescentTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class RecursiveDescentTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			accept_function_,
			dleg_include_,
			dleg_usage_,
			epsilon_production_rule_impl_,
			expect_function_,
			expect_node_,
			expect_node_ignored_or_deleted_terminal_,
			expect_node_included_terminal_,
			expect_node_nonterminal_,
			expect_token_declaration_,
			expect_token_enum_,
			expect_token_name_,
			file_,
			general_production_rule_impl_,
			language_name_,
			last_consumed_symbol_function_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			next_symbol_function_,
			non_terminal_impl_,
			nonterminal_name_,
			optional_dleg_include_,
			optional_dleg_usage_,
			parse_function_,
			peek_function_,
			peeked_nonterminal_,
			peeked_nonterminal_name_,
			production_rule_id_,
			production_rule_impl_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			start_node_,
			terminal_type_,
			token_enum_,
			token_namespace_,
			token_type_,
			token_type_core_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope: {
				return "Scope";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				accept_function_: {
				return "accept_function";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				dleg_include_: {
				return "dleg_include";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::dleg_usage_: {
				return "dleg_usage";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				epsilon_production_rule_impl_: {
				return "epsilon_production_rule_impl";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_function_: {
				return "expect_function";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_node_: {
				return "expect_node";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_node_ignored_or_deleted_terminal_: {
				return "expect_node_ignored_or_deleted_terminal";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_node_included_terminal_: {
				return "expect_node_included_terminal";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_node_nonterminal_: {
				return "expect_node_nonterminal";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_token_declaration_: {
				return "expect_token_declaration";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_token_enum_: {
				return "expect_token_enum";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				expect_token_name_: {
				return "expect_token_name";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				general_production_rule_impl_: {
				return "general_production_rule_impl";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				language_name_: {
				return "language_name";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				last_consumed_symbol_function_: {
				return "last_consumed_symbol_function";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				next_symbol_function_: {
				return "next_symbol_function";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				non_terminal_impl_: {
				return "non_terminal_impl";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				nonterminal_name_: {
				return "nonterminal_name";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				optional_dleg_include_: {
				return "optional_dleg_include";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				optional_dleg_usage_: {
				return "optional_dleg_usage";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				parse_function_: {
				return "parse_function";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				peek_function_: {
				return "peek_function";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				peeked_nonterminal_: {
				return "peeked_nonterminal";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				peeked_nonterminal_name_: {
				return "peeked_nonterminal_name";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				production_rule_id_: {
				return "production_rule_id";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				production_rule_impl_: {
				return "production_rule_impl";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::start_node_: {
				return "start_node";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				terminal_type_: {
				return "terminal_type";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::token_enum_: {
				return "token_enum";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				token_namespace_: {
				return "token_namespace";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::token_type_: {
				return "token_type";
			}

			case ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
				token_type_core_: {
				return "token_type_core";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type type =
				::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::dparse::parser::RecursiveDescentTemplate::ScopeType scope_type =
				::deamer::templates::dparse::parser::RecursiveDescentTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::dparse::parser::RecursiveDescentTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::dparse::parser::RecursiveDescentTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::dparse::parser::RecursiveDescentTemplate::ScopeType::Default_,
				true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									  ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::dparse::parser::RecursiveDescentTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_accept_function_ : public VariableScopes
		{
			static constexpr auto name = "accept_function_";

			Variable_accept_function_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					accept_function_;
			}

			virtual ~Variable_accept_function_() override = default;

			Variable_accept_function_(RecursiveDescentTemplate* recursivedescenttemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					accept_function_;
			}

			Variable_accept_function_& operator=(const Variable_accept_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_dleg_include_ : public VariableScopes
		{
			static constexpr auto name = "dleg_include_";

			Variable_dleg_include_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					dleg_include_;
			}

			virtual ~Variable_dleg_include_() override = default;

			Variable_dleg_include_(RecursiveDescentTemplate* recursivedescenttemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					dleg_include_;
			}

			Variable_dleg_include_& operator=(const Variable_dleg_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_dleg_usage_ : public VariableScopes
		{
			static constexpr auto name = "dleg_usage_";

			Variable_dleg_usage_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					dleg_usage_;
			}

			virtual ~Variable_dleg_usage_() override = default;

			Variable_dleg_usage_(RecursiveDescentTemplate* recursivedescenttemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					dleg_usage_;
			}

			Variable_dleg_usage_& operator=(const Variable_dleg_usage_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_epsilon_production_rule_impl_ : public VariableScopes
		{
			static constexpr auto name = "epsilon_production_rule_impl_";

			Variable_epsilon_production_rule_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					epsilon_production_rule_impl_;
			}

			virtual ~Variable_epsilon_production_rule_impl_() override = default;

			Variable_epsilon_production_rule_impl_(
				RecursiveDescentTemplate* recursivedescenttemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					epsilon_production_rule_impl_;
			}

			Variable_epsilon_production_rule_impl_&
			operator=(const Variable_epsilon_production_rule_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_function_ : public VariableScopes
		{
			static constexpr auto name = "expect_function_";

			Variable_expect_function_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_function_;
			}

			virtual ~Variable_expect_function_() override = default;

			Variable_expect_function_(RecursiveDescentTemplate* recursivedescenttemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_function_;
			}

			Variable_expect_function_& operator=(const Variable_expect_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_node_ : public VariableScopes
		{
			static constexpr auto name = "expect_node_";

			Variable_expect_node_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_;
			}

			virtual ~Variable_expect_node_() override = default;

			Variable_expect_node_(RecursiveDescentTemplate* recursivedescenttemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_;
			}

			Variable_expect_node_& operator=(const Variable_expect_node_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_node_ignored_or_deleted_terminal_ : public VariableScopes
		{
			static constexpr auto name = "expect_node_ignored_or_deleted_terminal_";

			Variable_expect_node_ignored_or_deleted_terminal_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_ignored_or_deleted_terminal_;
			}

			virtual ~Variable_expect_node_ignored_or_deleted_terminal_() override = default;

			Variable_expect_node_ignored_or_deleted_terminal_(
				RecursiveDescentTemplate* recursivedescenttemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_ignored_or_deleted_terminal_;
			}

			Variable_expect_node_ignored_or_deleted_terminal_&
			operator=(const Variable_expect_node_ignored_or_deleted_terminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_node_included_terminal_ : public VariableScopes
		{
			static constexpr auto name = "expect_node_included_terminal_";

			Variable_expect_node_included_terminal_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_included_terminal_;
			}

			virtual ~Variable_expect_node_included_terminal_() override = default;

			Variable_expect_node_included_terminal_(
				RecursiveDescentTemplate* recursivedescenttemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_included_terminal_;
			}

			Variable_expect_node_included_terminal_&
			operator=(const Variable_expect_node_included_terminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_node_nonterminal_ : public VariableScopes
		{
			static constexpr auto name = "expect_node_nonterminal_";

			Variable_expect_node_nonterminal_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_nonterminal_;
			}

			virtual ~Variable_expect_node_nonterminal_() override = default;

			Variable_expect_node_nonterminal_(RecursiveDescentTemplate* recursivedescenttemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_node_nonterminal_;
			}

			Variable_expect_node_nonterminal_&
			operator=(const Variable_expect_node_nonterminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_token_declaration_ : public VariableScopes
		{
			static constexpr auto name = "expect_token_declaration_";

			Variable_expect_token_declaration_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_token_declaration_;
			}

			virtual ~Variable_expect_token_declaration_() override = default;

			Variable_expect_token_declaration_(RecursiveDescentTemplate* recursivedescenttemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_token_declaration_;
			}

			Variable_expect_token_declaration_&
			operator=(const Variable_expect_token_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_token_enum_ : public VariableScopes
		{
			static constexpr auto name = "expect_token_enum_";

			Variable_expect_token_enum_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_token_enum_;
			}

			virtual ~Variable_expect_token_enum_() override = default;

			Variable_expect_token_enum_(RecursiveDescentTemplate* recursivedescenttemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_token_enum_;
			}

			Variable_expect_token_enum_& operator=(const Variable_expect_token_enum_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_expect_token_name_ : public VariableScopes
		{
			static constexpr auto name = "expect_token_name_";

			Variable_expect_token_name_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_token_name_;
			}

			virtual ~Variable_expect_token_name_() override = default;

			Variable_expect_token_name_(RecursiveDescentTemplate* recursivedescenttemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					expect_token_name_;
			}

			Variable_expect_token_name_& operator=(const Variable_expect_token_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(RecursiveDescentTemplate* recursivedescenttemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#include \""),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("/Dparse/Parser"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Utility/CreateNode"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Relation/NodeEnumToText"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Relation/NodeIsDeleted"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Relation/NodeIsIgnored"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Enum/Type"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n"),
					 GenerateVariable(recursivedescenttemplate_->optional_dleg_include_->This()),
					 GenerateVariable(
						 "\n#include <Deamer/External/Cpp/Parser/Interface/ASTConstructionPolicy"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <Deamer/External/Cpp/Ast/Node"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <Deamer/External/Cpp/Ast/Tree"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n\nstruct "),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("::dparse::parser::Parser::Impl\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\npublic:\n\t::deamer::external::cpp::parser::"
									  "ASTConstructionPolicy constructionPolicy;\n\tstd::vector<"),
					 GenerateVariable(recursivedescenttemplate_->terminal_type_->This()),
					 GenerateVariable("> types;\n\t"),
					 GenerateVariable(recursivedescenttemplate_->terminal_type_->This()),
					 GenerateVariable(
						 " lastConsumedToken;\n\n\tImpl() = default;\n\t~Impl() = default;\n\n"),
					 GenerateVariable(
						 recursivedescenttemplate_->last_consumed_symbol_function_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(recursivedescenttemplate_->next_symbol_function_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(recursivedescenttemplate_->expect_function_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(recursivedescenttemplate_->accept_function_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(recursivedescenttemplate_->peek_function_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(recursivedescenttemplate_->parse_function_->This()),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 recursivedescenttemplate_->non_terminal_impl_->Variable_Field()),
					 GenerateVariable("\n\n"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n::deamer::external::cpp::ast::Tree* "),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("::dparse::parser::Parser::Parse(std::vector<const "
									  "::deamer::external::cpp::lexer::TerminalObject*> "
									  "terminalObjects,\n\t\t\t  "
									  "::deamer::external::cpp::parser::ASTConstructionPolicy "
									  "constructionPolicy) const\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tauto impl = ::"),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable("::dparse::parser::Parser::Impl();\n\timpl"),
					 GenerateVariable("."),
					 GenerateVariable("constructionPolicy = constructionPolicy;\n\timpl"),
					 GenerateVariable("."),
					 GenerateVariable("types = terminalObjects;\n\n\treturn impl"),
					 GenerateVariable("."),
					 GenerateVariable("Parse();\n"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\ndeamer::external::cpp::ast::Tree* "),
					 GenerateVariable(recursivedescenttemplate_->language_name_->This()),
					 GenerateVariable(
						 "::dparse::parser::Parser::Parse(const std::string& text,\n\t\t\t  "
						 "::deamer::external::cpp::parser::ASTConstructionPolicy "
						 "constructionPolicy) const\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable(recursivedescenttemplate_->optional_dleg_usage_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable("}")}));
				Content_->type =
					::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("RecursiveDescent")}));
				File_name_->type =
					::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::dparse::parser")}));
				Namespace_->type =
					::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_general_production_rule_impl_ : public VariableScopes
		{
			static constexpr auto name = "general_production_rule_impl_";

			Variable_general_production_rule_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					general_production_rule_impl_;
			}

			virtual ~Variable_general_production_rule_impl_() override = default;

			Variable_general_production_rule_impl_(
				RecursiveDescentTemplate* recursivedescenttemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					general_production_rule_impl_;
			}

			Variable_general_production_rule_impl_&
			operator=(const Variable_general_production_rule_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(RecursiveDescentTemplate* recursivedescenttemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_last_consumed_symbol_function_ : public VariableScopes
		{
			static constexpr auto name = "last_consumed_symbol_function_";

			Variable_last_consumed_symbol_function_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					last_consumed_symbol_function_;
			}

			virtual ~Variable_last_consumed_symbol_function_() override = default;

			Variable_last_consumed_symbol_function_(
				RecursiveDescentTemplate* recursivedescenttemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					last_consumed_symbol_function_;
			}

			Variable_last_consumed_symbol_function_&
			operator=(const Variable_last_consumed_symbol_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(RecursiveDescentTemplate* recursivedescenttemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(RecursiveDescentTemplate* recursivedescenttemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(RecursiveDescentTemplate* recursivedescenttemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_next_symbol_function_ : public VariableScopes
		{
			static constexpr auto name = "next_symbol_function_";

			Variable_next_symbol_function_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					next_symbol_function_;
			}

			virtual ~Variable_next_symbol_function_() override = default;

			Variable_next_symbol_function_(RecursiveDescentTemplate* recursivedescenttemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					next_symbol_function_;
			}

			Variable_next_symbol_function_&
			operator=(const Variable_next_symbol_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_non_terminal_impl_ : public VariableScopes
		{
			static constexpr auto name = "non_terminal_impl_";

			Variable_non_terminal_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					non_terminal_impl_;
			}

			virtual ~Variable_non_terminal_impl_() override = default;

			Variable_non_terminal_impl_(RecursiveDescentTemplate* recursivedescenttemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					non_terminal_impl_;
			}

			Variable_non_terminal_impl_& operator=(const Variable_non_terminal_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_name_ : public VariableScopes
		{
			static constexpr auto name = "nonterminal_name_";

			Variable_nonterminal_name_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					nonterminal_name_;
			}

			virtual ~Variable_nonterminal_name_() override = default;

			Variable_nonterminal_name_(RecursiveDescentTemplate* recursivedescenttemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					nonterminal_name_;
			}

			Variable_nonterminal_name_& operator=(const Variable_nonterminal_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_dleg_include_ : public VariableScopes
		{
			static constexpr auto name = "optional_dleg_include_";

			Variable_optional_dleg_include_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					optional_dleg_include_;
			}

			virtual ~Variable_optional_dleg_include_() override = default;

			Variable_optional_dleg_include_(RecursiveDescentTemplate* recursivedescenttemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					optional_dleg_include_;
			}

			Variable_optional_dleg_include_&
			operator=(const Variable_optional_dleg_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_dleg_usage_ : public VariableScopes
		{
			static constexpr auto name = "optional_dleg_usage_";

			Variable_optional_dleg_usage_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					optional_dleg_usage_;
			}

			virtual ~Variable_optional_dleg_usage_() override = default;

			Variable_optional_dleg_usage_(RecursiveDescentTemplate* recursivedescenttemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					optional_dleg_usage_;
			}

			Variable_optional_dleg_usage_& operator=(const Variable_optional_dleg_usage_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_parse_function_ : public VariableScopes
		{
			static constexpr auto name = "parse_function_";

			Variable_parse_function_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					parse_function_;
			}

			virtual ~Variable_parse_function_() override = default;

			Variable_parse_function_(RecursiveDescentTemplate* recursivedescenttemplate_,
									 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					parse_function_;
			}

			Variable_parse_function_& operator=(const Variable_parse_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_peek_function_ : public VariableScopes
		{
			static constexpr auto name = "peek_function_";

			Variable_peek_function_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					peek_function_;
			}

			virtual ~Variable_peek_function_() override = default;

			Variable_peek_function_(RecursiveDescentTemplate* recursivedescenttemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					peek_function_;
			}

			Variable_peek_function_& operator=(const Variable_peek_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_peeked_nonterminal_ : public VariableScopes
		{
			static constexpr auto name = "peeked_nonterminal_";

			Variable_peeked_nonterminal_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					peeked_nonterminal_;
			}

			virtual ~Variable_peeked_nonterminal_() override = default;

			Variable_peeked_nonterminal_(RecursiveDescentTemplate* recursivedescenttemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					peeked_nonterminal_;
			}

			Variable_peeked_nonterminal_& operator=(const Variable_peeked_nonterminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_peeked_nonterminal_name_ : public VariableScopes
		{
			static constexpr auto name = "peeked_nonterminal_name_";

			Variable_peeked_nonterminal_name_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					peeked_nonterminal_name_;
			}

			virtual ~Variable_peeked_nonterminal_name_() override = default;

			Variable_peeked_nonterminal_name_(RecursiveDescentTemplate* recursivedescenttemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					peeked_nonterminal_name_;
			}

			Variable_peeked_nonterminal_name_&
			operator=(const Variable_peeked_nonterminal_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_id_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_id_";

			Variable_production_rule_id_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					production_rule_id_;
			}

			virtual ~Variable_production_rule_id_() override = default;

			Variable_production_rule_id_(RecursiveDescentTemplate* recursivedescenttemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					production_rule_id_;
			}

			Variable_production_rule_id_& operator=(const Variable_production_rule_id_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_impl_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_impl_";

			Variable_production_rule_impl_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					production_rule_impl_;
			}

			virtual ~Variable_production_rule_impl_() override = default;

			Variable_production_rule_impl_(RecursiveDescentTemplate* recursivedescenttemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					production_rule_impl_;
			}

			Variable_production_rule_impl_&
			operator=(const Variable_production_rule_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(RecursiveDescentTemplate* recursivedescenttemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(RecursiveDescentTemplate* recursivedescenttemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(RecursiveDescentTemplate* recursivedescenttemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_start_node_ : public VariableScopes
		{
			static constexpr auto name = "start_node_";

			Variable_start_node_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					start_node_;
			}

			virtual ~Variable_start_node_() override = default;

			Variable_start_node_(RecursiveDescentTemplate* recursivedescenttemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					start_node_;
			}

			Variable_start_node_& operator=(const Variable_start_node_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_type_ : public VariableScopes
		{
			static constexpr auto name = "terminal_type_";

			Variable_terminal_type_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					terminal_type_;
			}

			virtual ~Variable_terminal_type_() override = default;

			Variable_terminal_type_(RecursiveDescentTemplate* recursivedescenttemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					terminal_type_;
			}

			Variable_terminal_type_& operator=(const Variable_terminal_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_token_enum_ : public VariableScopes
		{
			static constexpr auto name = "token_enum_";

			Variable_token_enum_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_enum_;
			}

			virtual ~Variable_token_enum_() override = default;

			Variable_token_enum_(RecursiveDescentTemplate* recursivedescenttemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_enum_;
			}

			Variable_token_enum_& operator=(const Variable_token_enum_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_token_namespace_ : public VariableScopes
		{
			static constexpr auto name = "token_namespace_";

			Variable_token_namespace_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_namespace_;
			}

			virtual ~Variable_token_namespace_() override = default;

			Variable_token_namespace_(RecursiveDescentTemplate* recursivedescenttemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_namespace_;
			}

			Variable_token_namespace_& operator=(const Variable_token_namespace_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_token_type_ : public VariableScopes
		{
			static constexpr auto name = "token_type_";

			Variable_token_type_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_type_;
			}

			virtual ~Variable_token_type_() override = default;

			Variable_token_type_(RecursiveDescentTemplate* recursivedescenttemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_type_;
			}

			Variable_token_type_& operator=(const Variable_token_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_token_type_core_ : public VariableScopes
		{
			static constexpr auto name = "token_type_core_";

			Variable_token_type_core_() : VariableScopes()
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_type_core_;
			}

			virtual ~Variable_token_type_core_() override = default;

			Variable_token_type_core_(RecursiveDescentTemplate* recursivedescenttemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::dparse::parser::RecursiveDescentTemplate::Type::
					token_type_core_;
			}

			Variable_token_type_core_& operator=(const Variable_token_type_core_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. RecursiveDescentTemplate.member = "auto-generated";
		Variable_accept_function_* accept_function_ = new Variable_accept_function_();
		Variable_dleg_include_* dleg_include_ = new Variable_dleg_include_();
		Variable_dleg_usage_* dleg_usage_ = new Variable_dleg_usage_();
		Variable_epsilon_production_rule_impl_* epsilon_production_rule_impl_ =
			new Variable_epsilon_production_rule_impl_();
		Variable_expect_function_* expect_function_ = new Variable_expect_function_();
		Variable_expect_node_* expect_node_ = new Variable_expect_node_();
		Variable_expect_node_ignored_or_deleted_terminal_*
			expect_node_ignored_or_deleted_terminal_ =
				new Variable_expect_node_ignored_or_deleted_terminal_();
		Variable_expect_node_included_terminal_* expect_node_included_terminal_ =
			new Variable_expect_node_included_terminal_();
		Variable_expect_node_nonterminal_* expect_node_nonterminal_ =
			new Variable_expect_node_nonterminal_();
		Variable_expect_token_declaration_* expect_token_declaration_ =
			new Variable_expect_token_declaration_();
		Variable_expect_token_enum_* expect_token_enum_ = new Variable_expect_token_enum_();
		Variable_expect_token_name_* expect_token_name_ = new Variable_expect_token_name_();
		Variable_file_* file_ = new Variable_file_();
		Variable_general_production_rule_impl_* general_production_rule_impl_ =
			new Variable_general_production_rule_impl_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_last_consumed_symbol_function_* last_consumed_symbol_function_ =
			new Variable_last_consumed_symbol_function_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_next_symbol_function_* next_symbol_function_ =
			new Variable_next_symbol_function_();
		Variable_non_terminal_impl_* non_terminal_impl_ = new Variable_non_terminal_impl_();
		Variable_nonterminal_name_* nonterminal_name_ = new Variable_nonterminal_name_();
		Variable_optional_dleg_include_* optional_dleg_include_ =
			new Variable_optional_dleg_include_();
		Variable_optional_dleg_usage_* optional_dleg_usage_ = new Variable_optional_dleg_usage_();
		Variable_parse_function_* parse_function_ = new Variable_parse_function_();
		Variable_peek_function_* peek_function_ = new Variable_peek_function_();
		Variable_peeked_nonterminal_* peeked_nonterminal_ = new Variable_peeked_nonterminal_();
		Variable_peeked_nonterminal_name_* peeked_nonterminal_name_ =
			new Variable_peeked_nonterminal_name_();
		Variable_production_rule_id_* production_rule_id_ = new Variable_production_rule_id_();
		Variable_production_rule_impl_* production_rule_impl_ =
			new Variable_production_rule_impl_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_start_node_* start_node_ = new Variable_start_node_();
		Variable_terminal_type_* terminal_type_ = new Variable_terminal_type_();
		Variable_token_enum_* token_enum_ = new Variable_token_enum_();
		Variable_token_namespace_* token_namespace_ = new Variable_token_namespace_();
		Variable_token_type_* token_type_ = new Variable_token_type_();
		Variable_token_type_core_* token_type_core_ = new Variable_token_type_core_();

	public:
		RecursiveDescentTemplate()
		{
			*accept_function_ = Variable_accept_function_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\tbool Accept("),
						   GenerateVariable(token_enum_->This()), GenerateVariable(" type)\n\t"),
						   GenerateVariable("{"), GenerateVariable("\n\t\tif (Peek("),
						   GenerateVariable("{"), GenerateVariable("type"), GenerateVariable("}"),
						   GenerateVariable("))\n\t\t"), GenerateVariable("{"),
						   GenerateVariable("\n\t\t\tNextSymbol();\n\t\t\treturn true;\n\t\t"),
						   GenerateVariable("}"), GenerateVariable("\n\n\t\treturn false;\n\t"),
						   GenerateVariable("}"), GenerateVariable("\n")}));
			*dleg_include_ = Variable_dleg_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Dleg/Lexer"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*dleg_usage_ = Variable_dleg_usage_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\n\t"), GenerateVariable(language_name_->This()),
						   GenerateVariable("::dleg::lexer::Lexer lexer;\n\tauto tokens = lexer"),
						   GenerateVariable("."),
						   GenerateVariable("Tokenize(text);\n\tauto result = "
											"Parse(tokens);\n\t\n\tfor (auto token : tokens)\n\t"),
						   GenerateVariable("{"), GenerateVariable("\n\t\tdelete token;\n\t"),
						   GenerateVariable("}"), GenerateVariable("\n\t\n\treturn result;\n\t")}));
			*epsilon_production_rule_impl_ = Variable_epsilon_production_rule_impl_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\n"), GenerateVariable(expect_node_->Variable_Field()),
						   GenerateVariable("\n\n\t\treturn createNodeRoutine"),
						   GenerateVariable("."), GenerateVariable("GetNode();\n")}));
			*expect_function_ = Variable_expect_function_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\t"),
						   GenerateVariable(token_type_->This()),
						   GenerateVariable(" Expect("),
						   GenerateVariable(token_enum_->This()),
						   GenerateVariable(" type, bool constructAstNode = true)\n\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\tif (Accept(type))\n\t\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\t\tif (!constructAstNode)\n\t\t\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\t\t\treturn nullptr;\n\t\t\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n\t\t\t\n\t\t\treturn ::"),
						   GenerateVariable(language_name_->This()),
						   GenerateVariable("::ast::utility::CreateNode()\n\t\t\t\t   "),
						   GenerateVariable("."),
						   GenerateVariable("Node(LastConsumedSymbol())\n\t\t\t\t   "),
						   GenerateVariable("."),
						   GenerateVariable("GetNode();\n\t\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n\n\t\treturn nullptr;\n\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n")}));
			*expect_node_ = Variable_expect_node_(this, std::vector<VariableBase*>({}));
			*expect_node_ignored_or_deleted_terminal_ =
				Variable_expect_node_ignored_or_deleted_terminal_(
					this,
					std::vector<VariableBase*>(
						{GenerateVariable("\n\t\t\tif (constructionPolicy == "
										  "ASTConstructionPolicy::cst)\n\t\t\t"),
						 GenerateVariable("{"), GenerateVariable("\n\t\t\t\tcreateNodeRoutine"),
						 GenerateVariable("."), GenerateVariable("SubNode(Expect("),
						 GenerateVariable(expect_token_enum_->This()),
						 GenerateVariable("));\n\t\t\t"), GenerateVariable("}"),
						 GenerateVariable("\n\t\t\telse\n\t\t\t"), GenerateVariable("{"),
						 GenerateVariable("\n\t\t\t\tExpect("),
						 GenerateVariable(expect_token_enum_->This()),
						 GenerateVariable(", false);\n\t\t\t"), GenerateVariable("}"),
						 GenerateVariable("\n")}));
			*expect_node_included_terminal_ = Variable_expect_node_included_terminal_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\t\t\tcreateNodeRoutine"), GenerateVariable("."),
						   GenerateVariable("SubNode(Expect("),
						   GenerateVariable(expect_token_enum_->This()), GenerateVariable("));")}));
			*expect_node_nonterminal_ = Variable_expect_node_nonterminal_(
				this,
				std::vector<VariableBase*>({GenerateVariable("\t\t\tcreateNodeRoutine"),
											GenerateVariable("."), GenerateVariable("SubNode("),
											GenerateVariable(expect_token_declaration_->This()),
											GenerateVariable("());")}));
			*expect_token_declaration_ = Variable_expect_token_declaration_(
				this, std::vector<VariableBase*>({GenerateVariable("parse_"),
												  GenerateVariable(expect_token_name_->This())}));
			*expect_token_enum_ = Variable_expect_token_enum_(
				this, std::vector<VariableBase*>({GenerateVariable(token_enum_->This()),
												  GenerateVariable("::"),
												  GenerateVariable(expect_token_name_->This())}));
			*expect_token_name_ = Variable_expect_token_name_(this, std::vector<VariableBase*>({}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*general_production_rule_impl_ = Variable_general_production_rule_impl_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\n\t\tif (Peek("), GenerateVariable("{"),
						   GenerateVariable("\n"),
						   GenerateVariable(peeked_nonterminal_->Variable_Field()),
						   GenerateVariable("\n\t\t"), GenerateVariable("}"),
						   GenerateVariable("))\n\t\t"), GenerateVariable("{"),
						   GenerateVariable("\n"), GenerateVariable(expect_node_->Variable_Field()),
						   GenerateVariable("\n\n\t\t\treturn createNodeRoutine"),
						   GenerateVariable("."), GenerateVariable("GetNode();\n\t\t"),
						   GenerateVariable("}"), GenerateVariable("\n")}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*last_consumed_symbol_function_ = Variable_last_consumed_symbol_function_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\t"), GenerateVariable(terminal_type_->This()),
						   GenerateVariable(" LastConsumedSymbol()\n\t"), GenerateVariable("{"),
						   GenerateVariable("\n\t\treturn lastConsumedToken;\n\t"),
						   GenerateVariable("}"), GenerateVariable("\n")}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*next_symbol_function_ = Variable_next_symbol_function_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\tvoid NextSymbol()\n\t"), GenerateVariable("{"),
						   GenerateVariable("\n\t\tlastConsumedToken = types[0];\n\t\ttypes"),
						   GenerateVariable("."), GenerateVariable("erase(types"),
						   GenerateVariable("."), GenerateVariable("cbegin());\n\t"),
						   GenerateVariable("}"), GenerateVariable("\n")}));
			*non_terminal_impl_ = Variable_non_terminal_impl_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\t"),
						   GenerateVariable(token_type_->This()),
						   GenerateVariable(" parse_"),
						   GenerateVariable(nonterminal_name_->This()),
						   GenerateVariable("()\n\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\tauto createNodeRoutine = \n\t\t\t::"),
						   GenerateVariable(language_name_->This()),
						   GenerateVariable("::ast::utility::CreateNode()\n\t\t\t"),
						   GenerateVariable("."),
						   GenerateVariable("Node("),
						   GenerateVariable(token_enum_->This()),
						   GenerateVariable("::"),
						   GenerateVariable(nonterminal_name_->This()),
						   GenerateVariable(")\n\t\t\t"),
						   GenerateVariable("."),
						   GenerateVariable("ProductionRule("),
						   GenerateVariable(production_rule_id_->This()),
						   GenerateVariable(");\n\n"),
						   GenerateVariable(production_rule_impl_->Variable_Field()),
						   GenerateVariable("\n\n\t\treturn nullptr;\n\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n")}));
			*nonterminal_name_ = Variable_nonterminal_name_(this, std::vector<VariableBase*>({}));
			*optional_dleg_include_ =
				Variable_optional_dleg_include_(this, std::vector<VariableBase*>({}));
			*optional_dleg_usage_ = Variable_optional_dleg_usage_(
				this, std::vector<VariableBase*>({GenerateVariable(
						  "\n\t// Pass through lexer to get Terminal Objects\n\t// And use those "
						  "objects;\n\n\treturn nullptr;")}));
			*parse_function_ = Variable_parse_function_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t::deamer::external::cpp::ast::Tree* Parse()\n\t"),
					 GenerateVariable("{"), GenerateVariable("\n\t\tauto result = parse_"),
					 GenerateVariable(start_node_->This()),
					 GenerateVariable(
						 "();\n\t\tauto newTree = new "
						 "::deamer::external::cpp::ast::Tree(result);\n\t\treturn newTree;\n\t"),
					 GenerateVariable("}"), GenerateVariable("\n")}));
			*peek_function_ = Variable_peek_function_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\tbool Peek(std::vector<"),
						   GenerateVariable(token_enum_->This()),
						   GenerateVariable("> peekedTypes, std::size_t nextSymbol = 0)\n\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\tif (types"),
						   GenerateVariable("."),
						   GenerateVariable("size() < peekedTypes"),
						   GenerateVariable("."),
						   GenerateVariable("size())\n\t\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\t\treturn false;\n\t\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n\n\t\tfor (std::size_t i = 0; i < peekedTypes"),
						   GenerateVariable("."),
						   GenerateVariable("size(); i++)\n\t\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\t\tauto& currentType = peekedTypes[i];\n\t\t\tif "
											"(types[nextSymbol]->GetType() != "
											"static_cast<std::size_t>(currentType))\n\t\t\t"),
						   GenerateVariable("{"),
						   GenerateVariable("\n\t\t\t\treturn false;\n\t\t\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n\n\t\t\tnextSymbol++;\n\t\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n\n\t\treturn true;\n\t"),
						   GenerateVariable("}"),
						   GenerateVariable("\n")}));
			*peeked_nonterminal_ = Variable_peeked_nonterminal_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t\t\t\t"), GenerateVariable(token_enum_->This()),
					 GenerateVariable("::"), GenerateVariable(peeked_nonterminal_name_->This()),
					 GenerateVariable(", ")}));
			*peeked_nonterminal_name_ =
				Variable_peeked_nonterminal_name_(this, std::vector<VariableBase*>({}));
			*production_rule_id_ =
				Variable_production_rule_id_(this, std::vector<VariableBase*>({}));
			*production_rule_impl_ =
				Variable_production_rule_impl_(this, std::vector<VariableBase*>({}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*start_node_ = Variable_start_node_(this, std::vector<VariableBase*>({}));
			*terminal_type_ = Variable_terminal_type_(
				this, std::vector<VariableBase*>({GenerateVariable(
						  "const ::deamer::external::cpp::lexer::TerminalObject*")}));
			*token_enum_ = Variable_token_enum_(
				this, std::vector<VariableBase*>({GenerateVariable("::"),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("::ast::Type")}));
			*token_namespace_ = Variable_token_namespace_(
				this,
				std::vector<VariableBase*>({GenerateVariable("::deamer::external::cpp::ast")}));
			*token_type_ = Variable_token_type_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(token_type_core_->This()), GenerateVariable("*")}));
			*token_type_core_ = Variable_token_type_core_(
				this, std::vector<VariableBase*>({GenerateVariable(token_namespace_->This()),
												  GenerateVariable("::Node")}));

			variables_.emplace_back(accept_function_);
			variables_.emplace_back(dleg_include_);
			variables_.emplace_back(dleg_usage_);
			variables_.emplace_back(epsilon_production_rule_impl_);
			variables_.emplace_back(expect_function_);
			variables_.emplace_back(expect_node_);
			variables_.emplace_back(expect_node_ignored_or_deleted_terminal_);
			variables_.emplace_back(expect_node_included_terminal_);
			variables_.emplace_back(expect_node_nonterminal_);
			variables_.emplace_back(expect_token_declaration_);
			variables_.emplace_back(expect_token_enum_);
			variables_.emplace_back(expect_token_name_);
			variables_.emplace_back(file_);
			variables_.emplace_back(general_production_rule_impl_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(last_consumed_symbol_function_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(next_symbol_function_);
			variables_.emplace_back(non_terminal_impl_);
			variables_.emplace_back(nonterminal_name_);
			variables_.emplace_back(optional_dleg_include_);
			variables_.emplace_back(optional_dleg_usage_);
			variables_.emplace_back(parse_function_);
			variables_.emplace_back(peek_function_);
			variables_.emplace_back(peeked_nonterminal_);
			variables_.emplace_back(peeked_nonterminal_name_);
			variables_.emplace_back(production_rule_id_);
			variables_.emplace_back(production_rule_impl_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(start_node_);
			variables_.emplace_back(terminal_type_);
			variables_.emplace_back(token_enum_);
			variables_.emplace_back(token_namespace_);
			variables_.emplace_back(token_type_);
			variables_.emplace_back(token_type_core_);
		}

		virtual ~RecursiveDescentTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_DPARSE_PARSER_RECURSIVEDESCENTTEMPLATE_h
