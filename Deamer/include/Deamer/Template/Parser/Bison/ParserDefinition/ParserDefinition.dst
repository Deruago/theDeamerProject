{{optional_extended_error}}
{{optional_parse_lac}}
{{optional_glr_setting}}

%{
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <stdio.h>
#include <Deamer/External/Cpp/Lexer/TerminalObject.h>
#include <Deamer/External/Cpp/Ast/Node.h>
#include "{{language_name}}/Bison/Parser.h"
#define YY_NO_UNISTD_H
#include "Flex/{{language_name}}_lexer.h"
#undef YY_NO_UNISTD_H
#include "{{language_name}}/Ast/Enum/Type.h"
{{terminal_include.Variable_Field}}

{{nonterminal_include.Variable_Field}}

#ifndef YY_parse_NERRS
#define YY_parse_NERRS {{language_name}}nerrs
#endif //YY_parse_NERRS
#ifndef YY_parse_LLOC
#define YY_parse_LLOC {{language_name}}lloc
#endif //YY_parse_LLOC
#define YYERROR_VERBOSE 1

{{optional_debug_macro_glr}}

void {{language_name}}error(const char* s);
int {{language_name}}lex();
static ::deamer::external::cpp::ast::Tree* outputTree = nullptr;

extern int {{language_name}}lineno;
extern int {{language_name}}_column;

static const std::string* {{language_name}}_input_text = nullptr;
%}

{{terminal_declaration.Variable_Field}}

{{nonterminal_declaration.Variable_Field}}

%union{
	::deamer::external::cpp::lexer::TerminalObject* Terminal;
{{union_declaration.Variable_Field}}
}

%%

{{nonterminal_implementation.Variable_Field}}

%%

void {{language_name}}error(const char* s)
{
	std::cout << "Error: " << s << "\n";
	std::cout << "In line: " << {{language_name}}lineno << ", Column: " << {{language_name}}_column << '\n';

	std::size_t currentLineCount = 1;
	auto index = 0;
	static constexpr auto offsetShow = 2;

	while (index < {{language_name}}_input_text->size())
	{
		if ((*{{language_name}}_input_text)[index] == '\n')
		{
			currentLineCount += 1;
		}
		index++;

		if (currentLineCount + offsetShow >= {{language_name}}lineno)
		{
			break;
		}

	}

	bool donePreShow = false;
	while (!donePreShow && offsetShow > 0)
	{
		if ((*{{language_name}}_input_text)[index] == '\t')
		{
			std::cout << ' ';
		}
		else if ((*{{language_name}}_input_text)[index] == '\r')
		{
			// skip
		}
		else
		{
			std::cout << (*{{language_name}}_input_text)[index];
		}

		if ((*{{language_name}}_input_text)[index] == '\n')
		{
			if (currentLineCount + 1 == {{language_name}}lineno)
			{
				donePreShow = true;
			}
			currentLineCount += 1;
		}

		index++;
	}
	
	bool endLine = false;
	while (!endLine && index < {{language_name}}_input_text->size())
	{
		if ((*{{language_name}}_input_text)[index] == '\t')
		{
			std::cout << ' ';
		}
		else if ((*{{language_name}}_input_text)[index] == '\r')
		{
			// skip
		}
		else
		{
			std::cout << (*{{language_name}}_input_text)[index];
		}
		
		if ((*{{language_name}}_input_text)[index] == '\n')
		{
			endLine = true;
		}
		
		index++;
	}

    for(int i = 0; i < {{language_name}}_column - 1; i++)
	{
		std::cout << "_";
	}
	std::cout << "^\n";
}

deamer::external::cpp::ast::Tree* {{language_name}}::bison::parser::Parser::Parse(const std::string& text) const
{
	{{language_name}}_input_text = &text;
	outputTree = nullptr;
	YY_BUFFER_STATE buf;
	buf = {{language_name}}_scan_string(text.c_str());
	{{language_name}}parse();
	{{language_name}}_delete_buffer(buf);
	{{language_name}}lex_destroy();

	return outputTree;
}
