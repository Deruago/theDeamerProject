#ifndef DEAMER_TEMPLATES_ANTLR_PARSER_LISTENERTRANSLATETEMPLATE_h
#define DEAMER_TEMPLATES_ANTLR_PARSER_LISTENERTRANSLATETEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::antlr::parser
{
	/*!	\class ListenerTranslateTemplate
	 *
	 *	\brief Generates code for "ListenerTranslateTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ListenerTranslateTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			context_name_,
			file_,
			full_ctx_type_,
			header_guard_,
			language_name_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			nonterminal_,
			parser_namespace_,
			production_rule_enter_impl_,
			production_rule_exit_impl_,
			productionrule_id_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope: {
				return "Scope";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				context_name_: {
				return "context_name";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				full_ctx_type_: {
				return "full_ctx_type";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				header_guard_: {
				return "header_guard";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				language_name_: {
				return "language_name";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				nonterminal_: {
				return "nonterminal";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				parser_namespace_: {
				return "parser_namespace";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				production_rule_enter_impl_: {
				return "production_rule_enter_impl";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				production_rule_exit_impl_: {
				return "production_rule_exit_impl";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				productionrule_id_: {
				return "productionrule_id";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type type =
				::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::antlr::parser::ListenerTranslateTemplate::ScopeType scope_type =
				::deamer::templates::antlr::parser::ListenerTranslateTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::antlr::parser::ListenerTranslateTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::antlr::parser::ListenerTranslateTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::antlr::parser::ListenerTranslateTemplate::ScopeType::Default_,
				true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									  ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::antlr::parser::ListenerTranslateTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_context_name_ : public VariableScopes
		{
			static constexpr auto name = "context_name_";

			Variable_context_name_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					context_name_;
			}

			virtual ~Variable_context_name_() override = default;

			Variable_context_name_(ListenerTranslateTemplate* listenertranslatetemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					context_name_;
			}

			Variable_context_name_& operator=(const Variable_context_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(ListenerTranslateTemplate* listenertranslatetemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#ifndef "),
					 GenerateVariable(listenertranslatetemplate_->header_guard_->This()),
					 GenerateVariable("\n#define "),
					 GenerateVariable(listenertranslatetemplate_->header_guard_->This()),
					 GenerateVariable("\n\n#include \""),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable("ParserBaseListener"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable("/Ast/Enum/Type"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include <Deamer/External/Cpp/Ast/Node"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <Deamer/External/Cpp/Ast/Tree"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <optional>\n#include <vector>\n\nnamespace "),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable(" "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace antlr "),
					 GenerateVariable("{"),
					 GenerateVariable(" namespace parser "),
					 GenerateVariable("{"),
					 GenerateVariable("\n\n\tclass ListenerTranslate : public "),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable("ParserBaseListener\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\tprivate:\n\t\t::deamer::external::cpp::ast::Tree* "
						 "tree;\n\t\tstd::vector<std::vector<::deamer::external::cpp::ast::Node*>> "
						 "nonTerminalsStack;\n\t\tantlr4::CommonTokenStream* "
						 "tokenStream;\n\t\tbool constructCst = "
						 "true;\n\t\t\n\t\t\n\tpublic:\n\t\tListenerTranslate(antlr4::"
						 "CommonTokenStream* tokenStream_, bool constructCst_ = true) : "
						 "tokenStream(tokenStream_), constructCst(constructCst_)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 " \n\t\t\ttree = new ::deamer::external::cpp::ast::Tree();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tvirtual ~ListenerTranslate() override\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tdelete tree;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\tpublic:\n\t\t::deamer::external::cpp::ast::Tree* GetTree()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tauto treeCopy = tree;\n\t\t\ttree = "
									  "nullptr;\n\n\t\t\treturn treeCopy;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\tprivate:\n\t\tvoid PopAndAdd(::deamer::external::cpp::ast::Node* "
						 "newNode)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tnonTerminalsStack"),
					 GenerateVariable("."),
					 GenerateVariable("pop_back();\n\t\t\n\t\t\tif (nonTerminalsStack"),
					 GenerateVariable("."),
					 GenerateVariable("empty())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\t// This is the end, add as start "
						 "node\n\t\t\t\ttree->SetStartNode(newNode);\n\t\t\t\treturn;\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t\tAdd(newNode);\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\n\t\tvoid Add(::deamer::external::cpp::ast::Node* newNode)\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tGetCurrentNodeLevel()"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(newNode);\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tvoid InitializeNewNodeLevel()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tnonTerminalsStack"),
					 GenerateVariable("."),
					 GenerateVariable("emplace_back();\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\tstd::vector<::deamer::external::cpp::ast::Node*>& "
									  "GetCurrentNodeLevel()\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\treturn nonTerminalsStack[nonTerminalsStack"),
					 GenerateVariable("."),
					 GenerateVariable("size() - 1];\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\t\t/* Enter production rule\n\t\t *\t- Add new node "
									  "level to nodeLevel Stack\n\t\t */\n\tpublic:\n\t"),
					 GenerateVariable(
						 listenertranslatetemplate_->production_rule_enter_impl_->Variable_Field()),
					 GenerateVariable(
						 "\n\n\t\t/* Exit production rule\n\t\t *\t- Put all nodes in current node "
						 "level into a new nonterminal belonging to this production rule\n\t\t "
						 "*\t- Remove current node level\n\t\t *\t- Add new nonterminal to the "
						 "(current) parent node\n\t\t */\n\tpublic:\n\t"),
					 GenerateVariable(
						 listenertranslatetemplate_->production_rule_exit_impl_->Variable_Field()),
					 GenerateVariable(
						 "\n\n\t\t/*\tEnter Terminal\n\t\t *\t- Add Terminal to current node "
						 "level\n\t\t *\t- CST Support: Verify yield does not skip characters"),
					 GenerateVariable("."),
					 GenerateVariable("\n\t\t *\t\t- If so, go to parent and add a hidden terminal "
									  "for the missing yield"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "\n\t\t */\n\tpublic:\n\t\tvoid visitTerminal(antlr4::tree::TerminalNode* "
						 "node) override\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tauto symbol = node->getSymbol();\n\n\t\t\tauto "
									  "addToken = [&](antlr4::Token* symbol)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t\t\t\tint lineNumber = symbol->getLine();\n\t\t\t\tint columnNumber "
						 "= symbol->getCharPositionInLine();\n\t\t\t\tstd::string terminalValue = "
						 "symbol->getText();\n\t\t\t\tint nodeTypeAntlrId = "
						 "symbol->getType();\n\t\t\t\tauto "),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable("NodeType = static_cast<::"),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable(
						 "::ast::Type>(nodeTypeAntlrId);\n\t\t\t\t\n\n\t\t\t\tauto newNode = new "
						 "::deamer::external::cpp::ast::Node(\n\t\t\t\t\t::deamer::external::cpp::"
						 "ast::NodeInformation(\n\t\t\t\t\t\t"),
					 GenerateVariable(listenertranslatetemplate_->language_name_->This()),
					 GenerateVariable(
						 "NodeType,\n\t\t\t\t\t\t::deamer::external::cpp::ast::NodeValue::terminal,"
						 "\n\t\t\t\t\t\tterminalValue,\n\t\t\t\t\t\tlineNumber,"
						 "\n\t\t\t\t\t\tcolumnNumber\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\tAdd("
						 "newNode);\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\t\t\t\n\n\t\t\tif (antlr4::Token::HIDDEN_CHANNEL == "
									  "symbol->getChannel())\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t// It is a hidden terminal\n\t\t\t\t// Required "
									  "for CST construction\n\t\t\t\tif (constructCst)\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\taddToken(symbol);\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\telse\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\taddToken(symbol);\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t\n\t\t\tif (constructCst)\n\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\tfor (auto token "
									  ":\n\t\t\t\t\ttokenStream->getHiddenTokensToRight(symbol->"
									  "getTokenIndex()))\n\t\t\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\t\t\taddToken(token);\n\t\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable(";\n\n"),
					 GenerateVariable("}}"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\n#endif // "),
					 GenerateVariable(listenertranslatetemplate_->header_guard_->This()),
					 GenerateVariable("\n")}));
				Content_->type =
					::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("ListenerTranslate")}));
				File_name_->type =
					::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::antlr::parser")}));
				Namespace_->type =
					::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_full_ctx_type_ : public VariableScopes
		{
			static constexpr auto name = "full_ctx_type_";

			Variable_full_ctx_type_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					full_ctx_type_;
			}

			virtual ~Variable_full_ctx_type_() override = default;

			Variable_full_ctx_type_(ListenerTranslateTemplate* listenertranslatetemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					full_ctx_type_;
			}

			Variable_full_ctx_type_& operator=(const Variable_full_ctx_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_header_guard_ : public VariableScopes
		{
			static constexpr auto name = "header_guard_";

			Variable_header_guard_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					header_guard_;
			}

			virtual ~Variable_header_guard_() override = default;

			Variable_header_guard_(ListenerTranslateTemplate* listenertranslatetemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					header_guard_;
			}

			Variable_header_guard_& operator=(const Variable_header_guard_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(ListenerTranslateTemplate* listenertranslatetemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(ListenerTranslateTemplate* listenertranslatetemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(ListenerTranslateTemplate* listenertranslatetemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(ListenerTranslateTemplate* listenertranslatetemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_nonterminal_ : public VariableScopes
		{
			static constexpr auto name = "nonterminal_";

			Variable_nonterminal_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					nonterminal_;
			}

			virtual ~Variable_nonterminal_() override = default;

			Variable_nonterminal_(ListenerTranslateTemplate* listenertranslatetemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					nonterminal_;
			}

			Variable_nonterminal_& operator=(const Variable_nonterminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_parser_namespace_ : public VariableScopes
		{
			static constexpr auto name = "parser_namespace_";

			Variable_parser_namespace_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					parser_namespace_;
			}

			virtual ~Variable_parser_namespace_() override = default;

			Variable_parser_namespace_(ListenerTranslateTemplate* listenertranslatetemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					parser_namespace_;
			}

			Variable_parser_namespace_& operator=(const Variable_parser_namespace_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_enter_impl_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_enter_impl_";

			Variable_production_rule_enter_impl_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					production_rule_enter_impl_;
			}

			virtual ~Variable_production_rule_enter_impl_() override = default;

			Variable_production_rule_enter_impl_(
				ListenerTranslateTemplate* listenertranslatetemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					production_rule_enter_impl_;
			}

			Variable_production_rule_enter_impl_&
			operator=(const Variable_production_rule_enter_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_production_rule_exit_impl_ : public VariableScopes
		{
			static constexpr auto name = "production_rule_exit_impl_";

			Variable_production_rule_exit_impl_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					production_rule_exit_impl_;
			}

			virtual ~Variable_production_rule_exit_impl_() override = default;

			Variable_production_rule_exit_impl_(
				ListenerTranslateTemplate* listenertranslatetemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					production_rule_exit_impl_;
			}

			Variable_production_rule_exit_impl_&
			operator=(const Variable_production_rule_exit_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_productionrule_id_ : public VariableScopes
		{
			static constexpr auto name = "productionrule_id_";

			Variable_productionrule_id_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					productionrule_id_;
			}

			virtual ~Variable_productionrule_id_() override = default;

			Variable_productionrule_id_(ListenerTranslateTemplate* listenertranslatetemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					productionrule_id_;
			}

			Variable_productionrule_id_& operator=(const Variable_productionrule_id_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(ListenerTranslateTemplate* listenertranslatetemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(ListenerTranslateTemplate* listenertranslatetemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(ListenerTranslateTemplate* listenertranslatetemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ListenerTranslateTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ListenerTranslateTemplate.member = "auto-generated";
		Variable_context_name_* context_name_ = new Variable_context_name_();
		Variable_file_* file_ = new Variable_file_();
		Variable_full_ctx_type_* full_ctx_type_ = new Variable_full_ctx_type_();
		Variable_header_guard_* header_guard_ = new Variable_header_guard_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_nonterminal_* nonterminal_ = new Variable_nonterminal_();
		Variable_parser_namespace_* parser_namespace_ = new Variable_parser_namespace_();
		Variable_production_rule_enter_impl_* production_rule_enter_impl_ =
			new Variable_production_rule_enter_impl_();
		Variable_production_rule_exit_impl_* production_rule_exit_impl_ =
			new Variable_production_rule_exit_impl_();
		Variable_productionrule_id_* productionrule_id_ = new Variable_productionrule_id_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();

	public:
		ListenerTranslateTemplate()
		{
			*context_name_ = Variable_context_name_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("Productionrule_"), GenerateVariable(nonterminal_->This()),
					 GenerateVariable("_"), GenerateVariable(productionrule_id_->This())}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*full_ctx_type_ = Variable_full_ctx_type_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(parser_namespace_->This()), GenerateVariable("::"),
						   GenerateVariable(context_name_->This()), GenerateVariable("Context*")}));
			*header_guard_ = Variable_header_guard_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(language_name_->Upper()),
						   GenerateVariable("_ANTLR_PARSER_LISTENERTRANSLATE_H")}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*nonterminal_ = Variable_nonterminal_(this, std::vector<VariableBase*>({}));
			*parser_namespace_ = Variable_parser_namespace_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(language_name_->This()), GenerateVariable("Parser")}));
			*production_rule_enter_impl_ = Variable_production_rule_enter_impl_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\tvoid enter"), GenerateVariable(context_name_->This()),
					 GenerateVariable("("), GenerateVariable(full_ctx_type_->This()),
					 GenerateVariable(" ctx) override\n\t"), GenerateVariable("{"),
					 GenerateVariable("\n\t\tInitializeNewNodeLevel();\n\t"), GenerateVariable("}"),
					 GenerateVariable("\n")}));
			*production_rule_exit_impl_ = Variable_production_rule_exit_impl_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n\tvoid exit"), GenerateVariable(context_name_->This()),
					 GenerateVariable("("), GenerateVariable(full_ctx_type_->This()),
					 GenerateVariable(" ctx) override\n\t"), GenerateVariable("{"),
					 GenerateVariable("\n\t\tint lineNumber = 0;\n\t\tint columnNumber = "
									  "0;\n\n\t\tauto nodeInformation = "
									  "::deamer::external::cpp::ast::NodeInformation(\n\t\t\t::"),
					 GenerateVariable(language_name_->This()), GenerateVariable("::ast::Type::"),
					 GenerateVariable(nonterminal_->This()),
					 GenerateVariable(
						 ",\n\t\t\t::deamer::external::cpp::ast::NodeValue::nonterminal,\n\t\t\t::"
						 "deamer::external::cpp::ast::MatchedProductionRule(\n\t\t\t\t"),
					 GenerateVariable(productionrule_id_->This()),
					 GenerateVariable(",\n\t\t\t\t::deamer::external::cpp::ast::ProductionRuleType:"
									  ":user\n\t\t\t),\n\t\t\t"),
					 GenerateVariable("{"), GenerateVariable("}"),
					 GenerateVariable(
						 ",\n\t\t\tlineNumber,\n\t\t\tcolumnNumber\n\t\t);\n\t\tauto newNode = new "
						 "::deamer::external::cpp::ast::Node(\n\t\t\tnodeInformation,"
						 "\n\t\t\tGetCurrentNodeLevel()\n\t\t);\n\n\t\tPopAndAdd(newNode);\n\t"),
					 GenerateVariable("}"), GenerateVariable("\n")}));
			*productionrule_id_ = Variable_productionrule_id_(this, std::vector<VariableBase*>({}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));

			variables_.emplace_back(context_name_);
			variables_.emplace_back(file_);
			variables_.emplace_back(full_ctx_type_);
			variables_.emplace_back(header_guard_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(nonterminal_);
			variables_.emplace_back(parser_namespace_);
			variables_.emplace_back(production_rule_enter_impl_);
			variables_.emplace_back(production_rule_exit_impl_);
			variables_.emplace_back(productionrule_id_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
		}

		virtual ~ListenerTranslateTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_ANTLR_PARSER_LISTENERTRANSLATETEMPLATE_h
