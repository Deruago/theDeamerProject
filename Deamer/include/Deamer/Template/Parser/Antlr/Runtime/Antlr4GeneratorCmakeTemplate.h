#ifndef DEAMER_TEMPLATES_ANTLR_PARSER_ANTLR4GENERATORCMAKETEMPLATE_h
#define DEAMER_TEMPLATES_ANTLR_PARSER_ANTLR4GENERATORCMAKETEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::antlr::parser
{
	/*!	\class Antlr4GeneratorCmakeTemplate
	 *
	 *	\brief Generates code for "Antlr4GeneratorCmakeTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class Antlr4GeneratorCmakeTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			file_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope: {
				return "Scope";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
				left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
				right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type type =
				::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::ScopeType scope_type =
				::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::ScopeType::
					Unknown;
			bool isReserved = false;

			VariableScope(
				::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::ScopeType
					scope_type_,
				bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;
			}

			VariableScope(
				const char* text,
				::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::ScopeType
					scope_type_,
				bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;
			}

			VariableScope(
				std::vector<VariableBase*> variable,
				::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::ScopeType
					scope_type_,
				bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ =
				new VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									  ScopeType::Default_,
								  true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									  ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable(
						 "set(ANTLR_VERSION @ANTLR_VERSION@)\n\n@PACKAGE_INIT@\n\nif (NOT "
						 "ANTLR4_CPP_GENERATED_SRC_DIR)\n  set(ANTLR4_GENERATED_SRC_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_BINARY_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/antlr4_generated_src)\nendif()\n\nFIND_PACKAGE(Java "
									  "COMPONENTS Runtime REQUIRED)\n\n#\n# The ANTLR generator "
									  "will output the following files given the input file f"),
					 GenerateVariable("."),
					 GenerateVariable("g4\n#\n# Input  -> f"),
					 GenerateVariable("."),
					 GenerateVariable("g4\n# Output -> f"),
					 GenerateVariable("."),
					 GenerateVariable("h\n#        -> f"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "cpp\n#\n# the following files will only be produced if there is a parser "
						 "contained\n# Flag -visitor active\n# Output -> <f>BaseVisitor"),
					 GenerateVariable("."),
					 GenerateVariable("h\n#        -> <f>BaseVisitor"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\n#        -> <f>Visitor"),
					 GenerateVariable("."),
					 GenerateVariable("h\n#        -> <f>Visitor"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "cpp\n#\n# Flag -listener active\n# Output -> <f>BaseListener"),
					 GenerateVariable("."),
					 GenerateVariable("h\n#        -> <f>BaseListener"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\n#        -> <f>Listener"),
					 GenerateVariable("."),
					 GenerateVariable("h\n#        -> <f>Listener"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "cpp\n#\n# See documentation in markup\n#\nfunction(antlr4_generate\n    "
						 "Antlr4_ProjectTarget\n    Antlr4_InputFile\n    Antlr4_GeneratorType\n   "
						 " )\n\n  set( Antlr4_GeneratedSrcDir $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_GENERATED_SRC_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ProjectTarget"),
					 GenerateVariable("}"),
					 GenerateVariable(" )\n\n  get_filename_component(Antlr4_InputFileBaseName $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFile"),
					 GenerateVariable("}"),
					 GenerateVariable(" NAME_WE )\n\n  list( APPEND Antlr4_GeneratorStatusMessage "
									  "\"Common Include-, Source- and Tokenfiles\" )\n\n  if ( $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratorType"),
					 GenerateVariable("}"),
					 GenerateVariable(" STREQUAL \"LEXER\")\n    set(Antlr4_LexerBaseName \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\")\n    set(Antlr4_ParserBaseName \"\")\n  else()\n    if ( $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratorType"),
					 GenerateVariable("}"),
					 GenerateVariable(" STREQUAL \"PARSER\")\n      set(Antlr4_LexerBaseName "
									  "\"\")\n      set(Antlr4_ParserBaseName \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("\")\n    else()\n      if ( $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratorType"),
					 GenerateVariable("}"),
					 GenerateVariable(" STREQUAL \"BOTH\")\n        set(Antlr4_LexerBaseName \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("Lexer\")\n        set(Antlr4_ParserBaseName \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "Parser\")\n      else()\n        message(FATAL_ERROR \"The third "
						 "parameter must be LEXER, PARSER or BOTH\")\n      endif ()\n    endif "
						 "()\n  endif ()\n\n  # Prepare list of generated targets\n  list( APPEND "
						 "Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("tokens\" )\n  list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("interp\" )\n  list( APPEND DependentTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("tokens\" )\n\n  if ( NOT $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_LexerBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 " STREQUAL \"\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_LexerBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("h\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_LexerBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\" )\n  endif ()\n\n  if ( NOT $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ParserBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 " STREQUAL \"\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ParserBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("h\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ParserBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\" )\n  endif ()\n\n  # process optional arguments "),
					 GenerateVariable("."),
					 GenerateVariable("."),
					 GenerateVariable("."),
					 GenerateVariable("\n\n  if ( ( ARGC GREATER_EQUAL 4 ) AND ARGV3 )\n    "
									  "set(Antlr4_BuildListenerOption \"-listener\")\n\n    list( "
									  "APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("BaseListener"),
					 GenerateVariable("."),
					 GenerateVariable("h\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("BaseListener"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("Listener"),
					 GenerateVariable("."),
					 GenerateVariable("h\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("Listener"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "cpp\" )\n\n    list( APPEND Antlr4_GeneratorStatusMessage \", Listener "
						 "Include- and Sourcefiles\" )\n  else()\n    "
						 "set(Antlr4_BuildListenerOption \"-no-listener\")\n  endif ()\n\n  if ( ( "
						 "ARGC GREATER_EQUAL 5 ) AND ARGV4 )\n    set(Antlr4_BuildVisitorOption "
						 "\"-visitor\")\n\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("BaseVisitor"),
					 GenerateVariable("."),
					 GenerateVariable("h\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("BaseVisitor"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("Visitor"),
					 GenerateVariable("."),
					 GenerateVariable("h\" )\n    list( APPEND Antlr4_GeneratedTargets \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("/$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFileBaseName"),
					 GenerateVariable("}"),
					 GenerateVariable("Visitor"),
					 GenerateVariable("."),
					 GenerateVariable("cpp\" )\n\n    list( APPEND Antlr4_GeneratorStatusMessage "
									  "\", Visitor Include- and Sourcefiles\" )\n  else()\n    "
									  "set(Antlr4_BuildVisitorOption \"-no-visitor\")\n  endif "
									  "()\n\n  if ( (ARGC GREATER_EQUAL 6 ) AND (NOT $"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV5"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 " STREQUAL \"\") )\n    set(Antlr4_NamespaceOption \"-package;$"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV5"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\")\n\n    list( APPEND Antlr4_GeneratorStatusMessage \" in Namespace $"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV5"),
					 GenerateVariable("}"),
					 GenerateVariable("\" )\n  else()\n    set(Antlr4_NamespaceOption \"\")\n  "
									  "endif ()\n\n  if ( (ARGC GREATER_EQUAL 7 ) AND (NOT $"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV6"),
					 GenerateVariable("}"),
					 GenerateVariable(" STREQUAL \"\") )\n    set(Antlr4_AdditionalDependencies $"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV6"),
					 GenerateVariable("}"),
					 GenerateVariable(")\n  else()\n    set(Antlr4_AdditionalDependencies \"\")\n  "
									  "endif ()\n\n  if ( (ARGC GREATER_EQUAL 8 ) AND (NOT $"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV7"),
					 GenerateVariable("}"),
					 GenerateVariable(" STREQUAL \"\") )\n    set(Antlr4_LibOption \"-lib;$"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV7"),
					 GenerateVariable("}"),
					 GenerateVariable("\")\n\n    list( APPEND Antlr4_GeneratorStatusMessage \" "
									  "using Library $"),
					 GenerateVariable("{"),
					 GenerateVariable("ARGV7"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\" )\n  else()\n    set(Antlr4_LibOption \"\")\n  endif ()\n\n  if(NOT "
						 "Java_FOUND)\n    message(FATAL_ERROR \"Java is required to process "
						 "grammar or lexer files! - Use 'FIND_PACKAGE(Java COMPONENTS Runtime "
						 "REQUIRED)'\")\n  endif()\n\n  if(NOT EXISTS \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_JAR_LOCATION"),
					 GenerateVariable("}"),
					 GenerateVariable("\")\n    message(FATAL_ERROR \"Unable to find antlr tool"),
					 GenerateVariable("."),
					 GenerateVariable(" ANTLR4_JAR_LOCATION:$"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_JAR_LOCATION"),
					 GenerateVariable("}"),
					 GenerateVariable("\")\n  endif()\n\n  # The call to generate the files\n  "
									  "add_custom_command(\n    OUTPUT $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedTargets"),
					 GenerateVariable("}"),
					 GenerateVariable("\n    # Remove target directory\n    COMMAND\n    $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable(" -E remove_directory $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("\n    # Create target directory\n    COMMAND\n    $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable(" -E make_directory $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("\n    COMMAND\n    # Generate files\n    \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Java_JAVA_EXECUTABLE"),
					 GenerateVariable("}"),
					 GenerateVariable("\" -jar \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_JAR_LOCATION"),
					 GenerateVariable("}"),
					 GenerateVariable("\" -Werror -Dlanguage=Cpp $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_BuildListenerOption"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_BuildVisitorOption"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_LibOption"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_GENERATED_OPTIONS"),
					 GenerateVariable("}"),
					 GenerateVariable(" -o \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable("\" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_NamespaceOption"),
					 GenerateVariable("}"),
					 GenerateVariable(" \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFile"),
					 GenerateVariable("}"),
					 GenerateVariable("\"\n    WORKING_DIRECTORY \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_BINARY_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("\"\n    MAIN_DEPENDENCY \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_InputFile"),
					 GenerateVariable("}"),
					 GenerateVariable("\"\n    DEPENDS $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_AdditionalDependencies"),
					 GenerateVariable("}"),
					 GenerateVariable("\n    )\n\n  # set output variables in parent scope\n  set( "
									  "ANTLR4_INCLUDE_DIR_$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ProjectTarget"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable(" PARENT_SCOPE)\n  set( ANTLR4_SRC_FILES_$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ProjectTarget"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedTargets"),
					 GenerateVariable("}"),
					 GenerateVariable(" PARENT_SCOPE)\n  set( ANTLR4_TOKEN_FILES_$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ProjectTarget"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("DependentTargets"),
					 GenerateVariable("}"),
					 GenerateVariable(" PARENT_SCOPE)\n  set( ANTLR4_TOKEN_DIRECTORY_$"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ProjectTarget"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedSrcDir"),
					 GenerateVariable("}"),
					 GenerateVariable(" PARENT_SCOPE)\n\n  # export generated cpp files into "
									  "list\n  foreach(generated_file $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratedTargets"),
					 GenerateVariable("}"),
					 GenerateVariable(")\n\n    if (NOT CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\n  "
									  "    set_source_files_properties(\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("generated_file"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n        PROPERTIES\n        COMPILE_FLAGS -Wno-overloaded-virtual\n    "
						 "    )\n    endif ()\n\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\n "
						 "     set_source_files_properties(\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("generated_file"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n        PROPERTIES\n        COMPILE_FLAGS -wd4251\n        )\n    "
						 "endif ()\n\n  endforeach(generated_file)\n\nmessage(STATUS \"Antlr4 $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_ProjectTarget"),
					 GenerateVariable("}"),
					 GenerateVariable(" - Building \" $"),
					 GenerateVariable("{"),
					 GenerateVariable("Antlr4_GeneratorStatusMessage"),
					 GenerateVariable("}"),
					 GenerateVariable(" )\n\nendfunction()\n")}));
				Content_->type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("Antlr4GeneratorCmake")}));
				File_name_->type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::antlr::parser")}));
				Namespace_->type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(
				Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(
				Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(
				Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(
				Antlr4GeneratorCmakeTemplate* antlr4generatorcmaketemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::Antlr4GeneratorCmakeTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. Antlr4GeneratorCmakeTemplate.member = "auto-generated";
		Variable_file_* file_ = new Variable_file_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();

	public:
		Antlr4GeneratorCmakeTemplate()
		{
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));

			variables_.emplace_back(file_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
		}

		virtual ~Antlr4GeneratorCmakeTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_ANTLR_PARSER_ANTLR4GENERATORCMAKETEMPLATE_h
