#ifndef DEAMER_TEMPLATES_ANTLR_PARSER_EXTERNALANTLR4CPPTEMPLATE_h
#define DEAMER_TEMPLATES_ANTLR_PARSER_EXTERNALANTLR4CPPTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::antlr::parser
{
	/*!	\class ExternalAntlr4CppTemplate
	 *
	 *	\brief Generates code for "ExternalAntlr4CppTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ExternalAntlr4CppTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			file_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope: {
				return "Scope";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
				left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
				left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
				left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
				right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
				right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
				right_curly_bracket_: {
				return "right_curly_bracket";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type type =
				::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::ScopeType scope_type =
				::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::ScopeType
							  scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::ScopeType::Default_,
				true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									  ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::
									  ScopeType::Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("cmake_minimum_required(VERSION 3"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "7)\n\nif(POLICY CMP0114)\n    cmake_policy(SET CMP0114 "
						 "NEW)\nendif()\n\ninclude(ExternalProject)\n\nset(ANTLR4_ROOT $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_CURRENT_BINARY_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "/antlr4_runtime/src/antlr4_runtime)\nset(ANTLR4_INCLUDE_DIRS $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "/runtime/Cpp/runtime/src)\nset(ANTLR4_GIT_REPOSITORY https://github"),
					 GenerateVariable("."),
					 GenerateVariable("com/antlr/antlr4"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "git)\nif(NOT DEFINED ANTLR4_TAG)\n  # Set to branch name to keep library "
						 "updated at the cost of needing to rebuild after 'clean'\n  # Set to "
						 "commit hash to keep the build stable and does not need to rebuild after "
						 "'clean'\n  set(ANTLR4_TAG master)\nendif()\n\n# Ensure that the include "
						 "dir already exists at configure time (to avoid cmake erroring\n# on "
						 "non-existent include dirs)\nfile(MAKE_DIRECTORY \"$"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_INCLUDE_DIRS"),
					 GenerateVariable("}"),
					 GenerateVariable("\")\n\nif($"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_GENERATOR"),
					 GenerateVariable("}"),
					 GenerateVariable(" MATCHES \"Visual Studio"),
					 GenerateVariable("."),
					 GenerateVariable("*\")\n  set(ANTLR4_OUTPUT_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable("/runtime/Cpp/dist/$(Configuration))\nelseif($"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_GENERATOR"),
					 GenerateVariable("}"),
					 GenerateVariable(" MATCHES \"Xcode"),
					 GenerateVariable("."),
					 GenerateVariable("*\")\n  set(ANTLR4_OUTPUT_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "/runtime/Cpp/dist/$(CONFIGURATION))\nelse()\n  set(ANTLR4_OUTPUT_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable("/runtime/Cpp/dist)\nendif()\n\nif(MSVC)\n  "
									  "set(ANTLR4_STATIC_LIBRARIES\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/antlr4-runtime-static"),
					 GenerateVariable("."),
					 GenerateVariable("lib)\n  set(ANTLR4_SHARED_LIBRARIES\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/antlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable("lib)\n  set(ANTLR4_RUNTIME_LIBRARIES\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/antlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable("dll)\nelse()\n  set(ANTLR4_STATIC_LIBRARIES\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/libantlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "a)\n  if(MINGW)\n    set(ANTLR4_SHARED_LIBRARIES\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/libantlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable("dll"),
					 GenerateVariable("."),
					 GenerateVariable("a)\n    set(ANTLR4_RUNTIME_LIBRARIES\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/libantlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "dll)\n  elseif(CYGWIN)\n    set(ANTLR4_SHARED_LIBRARIES\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/libantlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable("dll"),
					 GenerateVariable("."),
					 GenerateVariable("a)\n    set(ANTLR4_RUNTIME_LIBRARIES\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/cygantlr4-runtime-4"),
					 GenerateVariable("."),
					 GenerateVariable("11"),
					 GenerateVariable("."),
					 GenerateVariable("1"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "dll)\n  elseif(APPLE)\n    set(ANTLR4_RUNTIME_LIBRARIES\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/libantlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "dylib)\n  else()\n    set(ANTLR4_RUNTIME_LIBRARIES\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_OUTPUT_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable("/libantlr4-runtime"),
					 GenerateVariable("."),
					 GenerateVariable("so)\n  endif()\nendif()\n\nif($"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_GENERATOR"),
					 GenerateVariable("}"),
					 GenerateVariable(" MATCHES \""),
					 GenerateVariable("."),
					 GenerateVariable("* Makefiles\")\n  # This avoids\n  # 'warning: jobserver "
									  "unavailable: using -j1"),
					 GenerateVariable("."),
					 GenerateVariable(" Add '+' to parent make rule"),
					 GenerateVariable("."),
					 GenerateVariable("'\n  set(ANTLR4_BUILD_COMMAND $(MAKE))\nelseif($"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_GENERATOR"),
					 GenerateVariable("}"),
					 GenerateVariable(" MATCHES \"Visual Studio"),
					 GenerateVariable("."),
					 GenerateVariable("*\")\n  set(ANTLR4_BUILD_COMMAND\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable("\n          --build "),
					 GenerateVariable("."),
					 GenerateVariable(
						 "\n          --config $(Configuration)\n          --target)\nelseif($"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_GENERATOR"),
					 GenerateVariable("}"),
					 GenerateVariable(" MATCHES \"Xcode"),
					 GenerateVariable("."),
					 GenerateVariable("*\")\n  set(ANTLR4_BUILD_COMMAND\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable("\n          --build "),
					 GenerateVariable("."),
					 GenerateVariable("\n          --config $(CONFIGURATION)\n          "
									  "--target)\nelse()\n  set(ANTLR4_BUILD_COMMAND\n      $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable("\n          --build "),
					 GenerateVariable("."),
					 GenerateVariable(
						 "\n          --target)\nendif()\n\nif(NOT DEFINED "
						 "ANTLR4_WITH_STATIC_CRT)\n  set(ANTLR4_WITH_STATIC_CRT "
						 "ON)\nendif()\n\nif(ANTLR4_ZIP_REPOSITORY)\n  ExternalProject_Add(\n      "
						 "antlr4_runtime\n      PREFIX antlr4_runtime\n      URL $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ZIP_REPOSITORY"),
					 GenerateVariable("}"),
					 GenerateVariable("\n      DOWNLOAD_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_CURRENT_BINARY_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n      BUILD_COMMAND \"\"\n      BUILD_IN_SOURCE 1\n      SOURCE_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable("\n      SOURCE_SUBDIR runtime/Cpp\n      CMAKE_CACHE_ARGS\n "
									  "         -DCMAKE_BUILD_TYPE:STRING=$"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_BUILD_TYPE"),
					 GenerateVariable("}"),
					 GenerateVariable("\n          -DWITH_STATIC_CRT:BOOL=$"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_WITH_STATIC_CRT"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n          -DDISABLE_WARNINGS:BOOL=ON\n          # "
						 "-DCMAKE_CXX_STANDARD:STRING=17 # if desired, compile the runtime with a "
						 "different C++ standard\n          # -DCMAKE_CXX_STANDARD:STRING=$"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_CXX_STANDARD"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 " # alternatively, compile the runtime with the same C++ standard as the "
						 "outer project\n      INSTALL_COMMAND \"\"\n      EXCLUDE_FROM_ALL "
						 "1)\nelse()\n  ExternalProject_Add(\n      antlr4_runtime\n      PREFIX "
						 "antlr4_runtime\n      GIT_REPOSITORY $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_GIT_REPOSITORY"),
					 GenerateVariable("}"),
					 GenerateVariable("\n      GIT_TAG $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_TAG"),
					 GenerateVariable("}"),
					 GenerateVariable("\n      DOWNLOAD_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_CURRENT_BINARY_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n      BUILD_COMMAND \"\"\n      BUILD_IN_SOURCE 1\n      SOURCE_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable("\n      SOURCE_SUBDIR runtime/Cpp\n      CMAKE_CACHE_ARGS\n "
									  "         -DCMAKE_BUILD_TYPE:STRING=$"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_BUILD_TYPE"),
					 GenerateVariable("}"),
					 GenerateVariable("\n          -DWITH_STATIC_CRT:BOOL=$"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_WITH_STATIC_CRT"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n          -DDISABLE_WARNINGS:BOOL=ON\n          # "
						 "-DCMAKE_CXX_STANDARD:STRING=17 # if desired, compile the runtime with a "
						 "different C++ standard\n          # -DCMAKE_CXX_STANDARD:STRING=$"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_CXX_STANDARD"),
					 GenerateVariable("}"),
					 GenerateVariable(" # alternatively, compile the runtime with the same C++ "
									  "standard as the outer project\n      INSTALL_COMMAND \"\"\n "
									  "     EXCLUDE_FROM_ALL 1)\nendif()\n\n# Separate build step "
									  "as rarely people want both\nset(ANTLR4_BUILD_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable(")\nif($"),
					 GenerateVariable("{"),
					 GenerateVariable("CMAKE_VERSION"),
					 GenerateVariable("}"),
					 GenerateVariable(" VERSION_GREATER_EQUAL \"3"),
					 GenerateVariable("."),
					 GenerateVariable("14"),
					 GenerateVariable("."),
					 GenerateVariable("0\")\n  # CMake 3"),
					 GenerateVariable("."),
					 GenerateVariable("14 builds in above's SOURCE_SUBDIR when BUILD_IN_SOURCE is "
									  "true\n  set(ANTLR4_BUILD_DIR $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_ROOT"),
					 GenerateVariable("}"),
					 GenerateVariable("/runtime/Cpp)\nendif()\n\nExternalProject_Add_Step(\n    "
									  "antlr4_runtime\n    build_static\n    COMMAND $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_BUILD_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable(" antlr4_static\n    # Depend on target instead of step (a "
									  "custom command)\n    # to avoid running dependent steps "
									  "concurrently\n    DEPENDS antlr4_runtime\n    BYPRODUCTS $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_STATIC_LIBRARIES"),
					 GenerateVariable("}"),
					 GenerateVariable("\n    EXCLUDE_FROM_MAIN 1\n    WORKING_DIRECTORY $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_BUILD_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ")\nExternalProject_Add_StepTargets(antlr4_runtime "
						 "build_static)\n\nadd_library(antlr4_static STATIC "
						 "IMPORTED)\nadd_dependencies(antlr4_static "
						 "antlr4_runtime-build_static)\nset_target_properties(antlr4_static "
						 "PROPERTIES\n                      IMPORTED_LOCATION $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_STATIC_LIBRARIES"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ")\ntarget_include_directories(antlr4_static\n    INTERFACE\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_INCLUDE_DIRS"),
					 GenerateVariable("}"),
					 GenerateVariable("\n)\n\nExternalProject_Add_Step(\n    antlr4_runtime\n    "
									  "build_shared\n    COMMAND $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_BUILD_COMMAND"),
					 GenerateVariable("}"),
					 GenerateVariable(" antlr4_shared\n    # Depend on target instead of step (a "
									  "custom command)\n    # to avoid running dependent steps "
									  "concurrently\n    DEPENDS antlr4_runtime\n    BYPRODUCTS $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_SHARED_LIBRARIES"),
					 GenerateVariable("}"),
					 GenerateVariable(" $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_RUNTIME_LIBRARIES"),
					 GenerateVariable("}"),
					 GenerateVariable("\n    EXCLUDE_FROM_MAIN 1\n    WORKING_DIRECTORY $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_BUILD_DIR"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ")\nExternalProject_Add_StepTargets(antlr4_runtime "
						 "build_shared)\n\nadd_library(antlr4_shared SHARED "
						 "IMPORTED)\nadd_dependencies(antlr4_shared "
						 "antlr4_runtime-build_shared)\nset_target_properties(antlr4_shared "
						 "PROPERTIES\n                      IMPORTED_LOCATION $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_RUNTIME_LIBRARIES"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 ")\ntarget_include_directories(antlr4_shared\n    INTERFACE\n        $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_INCLUDE_DIRS"),
					 GenerateVariable("}"),
					 GenerateVariable("\n)\n\nif(ANTLR4_SHARED_LIBRARIES)\n  "
									  "set_target_properties(antlr4_shared PROPERTIES\n            "
									  "            IMPORTED_IMPLIB $"),
					 GenerateVariable("{"),
					 GenerateVariable("ANTLR4_SHARED_LIBRARIES"),
					 GenerateVariable("}"),
					 GenerateVariable(")\nendif()\n")}));
				Content_->type =
					::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type =
					::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("ExternalAntlr4Cpp")}));
				File_name_->type =
					::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::antlr::parser")}));
				Namespace_->type =
					::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(ExternalAntlr4CppTemplate* externalantlr4cpptemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::antlr::parser::ExternalAntlr4CppTemplate::Type::
					right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ExternalAntlr4CppTemplate.member = "auto-generated";
		Variable_file_* file_ = new Variable_file_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();

	public:
		ExternalAntlr4CppTemplate()
		{
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));

			variables_.emplace_back(file_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
		}

		virtual ~ExternalAntlr4CppTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_ANTLR_PARSER_EXTERNALANTLR4CPPTEMPLATE_h
