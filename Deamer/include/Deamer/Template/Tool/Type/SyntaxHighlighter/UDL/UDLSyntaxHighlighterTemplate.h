#ifndef DEAMER_TEMPLATES_TOOL_TYPE_SYNTAXHIGHLIGHER_UDLSYNTAXHIGHLIGHTERTEMPLATE_h
#define DEAMER_TEMPLATES_TOOL_TYPE_SYNTAXHIGHLIGHER_UDLSYNTAXHIGHLIGHTERTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::tool::type::syntaxhighligher
{
	/*!	\class UDLSyntaxHighlighterTemplate
	 *
	 *	\brief Generates code for "UDLSyntaxHighlighterTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class UDLSyntaxHighlighterTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			file_,
			keywords_1_,
			keywords_1_fg_,
			keywords_2_,
			keywords_2_fg_,
			keywords_3_,
			keywords_3_fg_,
			keywords_4_,
			keywords_4_fg_,
			keywords_5_,
			keywords_5_fg_,
			keywords_6_,
			keywords_6_fg_,
			keywords_7_,
			keywords_7_fg_,
			keywords_8_,
			keywords_8_fg_,
			language_extension_,
			language_name_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char* ConvertEnumToName(
			::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::Type
				enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::file_: {
				return "file";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_1_: {
				return "keywords_1";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_1_fg_: {
				return "keywords_1_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_2_: {
				return "keywords_2";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_2_fg_: {
				return "keywords_2_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_3_: {
				return "keywords_3";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_3_fg_: {
				return "keywords_3_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_4_: {
				return "keywords_4";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_4_fg_: {
				return "keywords_4_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_5_: {
				return "keywords_5";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_5_fg_: {
				return "keywords_5_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_6_: {
				return "keywords_6";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_6_fg_: {
				return "keywords_6_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_7_: {
				return "keywords_7";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_7_fg_: {
				return "keywords_7_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_8_: {
				return "keywords_8";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::keywords_8_fg_: {
				return "keywords_8_fg";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::language_extension_: {
				return "language_extension";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::language_name_: {
				return "language_name";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				Type::right_curly_bracket_: {
				return "right_curly_bracket";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::Type
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
				ScopeType scope_type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::deamer::templates::tool::type::syntaxhighligher::
							  UDLSyntaxHighlighterTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::tool::type::syntaxhighligher::
							  UDLSyntaxHighlighterTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::tool::type::syntaxhighligher::
							  UDLSyntaxHighlighterTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									UDLSyntaxHighlighterTemplate::ScopeType::Upper_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									UDLSyntaxHighlighterTemplate::ScopeType::Lower_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									UDLSyntaxHighlighterTemplate::ScopeType::Snake_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									UDLSyntaxHighlighterTemplate::ScopeType::Slash_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									UDLSyntaxHighlighterTemplate::ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ =
				new VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									  UDLSyntaxHighlighterTemplate::ScopeType::Default_,
								  true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ =
				new VariableScope(::deamer::templates::tool::type::syntaxhighligher::
									  UDLSyntaxHighlighterTemplate::ScopeType::Variable_Field_,
								  true);
			VariableBase* variable_field_separator_ = new VariableScope(
				"\n",
				::deamer::templates::tool::type::syntaxhighligher::UDLSyntaxHighlighterTemplate::
					ScopeType::Variable_Field_Separator_,
				true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("<NotepadPlus>\r\n    <UserLang name=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->language_name_->This()),
					 GenerateVariable("\" ext=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->language_extension_->This()),
					 GenerateVariable("\" udlVersion=\"2"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "1\">\r\n        <Settings>\r\n            <Global caseIgnored=\"no\" "
						 "allowFoldOfComments=\"no\" foldCompact=\"no\" forcePureLC=\"0\" "
						 "decimalSeparator=\"0\" />\r\n            <Prefix Keywords1=\"no\" "
						 "Keywords2=\"no\" Keywords3=\"no\" Keywords4=\"no\" Keywords5=\"no\" "
						 "Keywords6=\"no\" Keywords7=\"no\" Keywords8=\"no\" />\r\n        "
						 "</Settings>\r\n        <KeywordLists>\r\n            <Keywords "
						 "name=\"Comments\">00 01 02 03 04</Keywords>\r\n            <Keywords "
						 "name=\"Numbers, prefix1\"></Keywords>\r\n            <Keywords "
						 "name=\"Numbers, prefix2\"></Keywords>\r\n            <Keywords "
						 "name=\"Numbers, extras1\"></Keywords>\r\n            <Keywords "
						 "name=\"Numbers, extras2\"></Keywords>\r\n            <Keywords "
						 "name=\"Numbers, suffix1\"></Keywords>\r\n            <Keywords "
						 "name=\"Numbers, suffix2\"></Keywords>\r\n            <Keywords "
						 "name=\"Numbers, range\"></Keywords>\r\n            <Keywords "
						 "name=\"Operators1\"></Keywords>\r\n            <Keywords "
						 "name=\"Operators2\"></Keywords>\r\n            <Keywords name=\"Folders "
						 "in code1, open\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "code1, middle\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "code1, close\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "code2, open\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "code2, middle\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "code2, close\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "comment, open\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "comment, middle\"></Keywords>\r\n            <Keywords name=\"Folders in "
						 "comment, close\"></Keywords>\r\n            <Keywords "
						 "name=\"Keywords1\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_1_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords2\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_2_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords3\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_3_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords4\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_4_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords5\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_5_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords6\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_6_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords7\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_7_->This()),
					 GenerateVariable("</Keywords>\r\n            <Keywords name=\"Keywords8\">"),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_8_->This()),
					 GenerateVariable(
						 "</Keywords>\r\n            <Keywords name=\"Delimiters\">00 01 02 03 04 "
						 "05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23</Keywords>\r\n  "
						 "      </KeywordLists>\r\n        <Styles>\r\n            <WordsStyle "
						 "name=\"DEFAULT\" fgColor=\"FFFF80\" bgColor=\"FFFFFF\" colorStyle=\"1\" "
						 "fontName=\"\" fontStyle=\"0\" nesting=\"0\" />\r\n            "
						 "<WordsStyle name=\"COMMENTS\" fgColor=\"00FF40\" bgColor=\"FFFFFF\" "
						 "colorStyle=\"1\" fontName=\"\" fontStyle=\"0\" nesting=\"0\" />\r\n      "
						 "      <WordsStyle name=\"LINE COMMENTS\" fgColor=\"00FF40\" "
						 "bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"NUMBERS\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
						 "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
						 "name=\"KEYWORDS1\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_1_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS2\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_2_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS3\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_3_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS4\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_4_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS5\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_5_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS6\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_6_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS7\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_7_fg_->This()),
					 GenerateVariable("\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" "
									  "fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle "
									  "name=\"KEYWORDS8\" fgColor=\""),
					 GenerateVariable(udlsyntaxhighlightertemplate_->keywords_8_fg_->This()),
					 GenerateVariable(
						 "\" bgColor=\"FFFFFF\" colorStyle=\"1\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"OPERATORS\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"FOLDER IN CODE1\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"FOLDER IN CODE2\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"FOLDER IN COMMENT\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS1\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS2\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS3\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS4\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS5\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS6\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS7\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS8\" "
						 "fgColor=\"000000\" bgColor=\"FFFFFF\" fontName=\"\" fontStyle=\"0\" "
						 "nesting=\"0\" />\r\n        </Styles>\r\n    "
						 "</UserLang>\r\n</NotepadPlus>\r\n")}));
				Content_->type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("UDLSyntaxHighlighter")}));
				File_name_->type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("deamer::templates::tool::type::syntaxhighligher")}));
				Namespace_->type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_keywords_1_ : public VariableScopes
		{
			static constexpr auto name = "keywords_1_";

			Variable_keywords_1_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_1_;
			}

			virtual ~Variable_keywords_1_() override = default;

			Variable_keywords_1_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_1_;
			}

			Variable_keywords_1_& operator=(const Variable_keywords_1_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_1_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_1_fg_";

			Variable_keywords_1_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_1_fg_;
			}

			virtual ~Variable_keywords_1_fg_() override = default;

			Variable_keywords_1_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_1_fg_;
			}

			Variable_keywords_1_fg_& operator=(const Variable_keywords_1_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_2_ : public VariableScopes
		{
			static constexpr auto name = "keywords_2_";

			Variable_keywords_2_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_2_;
			}

			virtual ~Variable_keywords_2_() override = default;

			Variable_keywords_2_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_2_;
			}

			Variable_keywords_2_& operator=(const Variable_keywords_2_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_2_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_2_fg_";

			Variable_keywords_2_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_2_fg_;
			}

			virtual ~Variable_keywords_2_fg_() override = default;

			Variable_keywords_2_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_2_fg_;
			}

			Variable_keywords_2_fg_& operator=(const Variable_keywords_2_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_3_ : public VariableScopes
		{
			static constexpr auto name = "keywords_3_";

			Variable_keywords_3_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_3_;
			}

			virtual ~Variable_keywords_3_() override = default;

			Variable_keywords_3_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_3_;
			}

			Variable_keywords_3_& operator=(const Variable_keywords_3_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_3_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_3_fg_";

			Variable_keywords_3_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_3_fg_;
			}

			virtual ~Variable_keywords_3_fg_() override = default;

			Variable_keywords_3_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_3_fg_;
			}

			Variable_keywords_3_fg_& operator=(const Variable_keywords_3_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_4_ : public VariableScopes
		{
			static constexpr auto name = "keywords_4_";

			Variable_keywords_4_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_4_;
			}

			virtual ~Variable_keywords_4_() override = default;

			Variable_keywords_4_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_4_;
			}

			Variable_keywords_4_& operator=(const Variable_keywords_4_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_4_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_4_fg_";

			Variable_keywords_4_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_4_fg_;
			}

			virtual ~Variable_keywords_4_fg_() override = default;

			Variable_keywords_4_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_4_fg_;
			}

			Variable_keywords_4_fg_& operator=(const Variable_keywords_4_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_5_ : public VariableScopes
		{
			static constexpr auto name = "keywords_5_";

			Variable_keywords_5_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_5_;
			}

			virtual ~Variable_keywords_5_() override = default;

			Variable_keywords_5_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_5_;
			}

			Variable_keywords_5_& operator=(const Variable_keywords_5_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_5_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_5_fg_";

			Variable_keywords_5_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_5_fg_;
			}

			virtual ~Variable_keywords_5_fg_() override = default;

			Variable_keywords_5_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_5_fg_;
			}

			Variable_keywords_5_fg_& operator=(const Variable_keywords_5_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_6_ : public VariableScopes
		{
			static constexpr auto name = "keywords_6_";

			Variable_keywords_6_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_6_;
			}

			virtual ~Variable_keywords_6_() override = default;

			Variable_keywords_6_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_6_;
			}

			Variable_keywords_6_& operator=(const Variable_keywords_6_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_6_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_6_fg_";

			Variable_keywords_6_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_6_fg_;
			}

			virtual ~Variable_keywords_6_fg_() override = default;

			Variable_keywords_6_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_6_fg_;
			}

			Variable_keywords_6_fg_& operator=(const Variable_keywords_6_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_7_ : public VariableScopes
		{
			static constexpr auto name = "keywords_7_";

			Variable_keywords_7_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_7_;
			}

			virtual ~Variable_keywords_7_() override = default;

			Variable_keywords_7_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_7_;
			}

			Variable_keywords_7_& operator=(const Variable_keywords_7_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_7_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_7_fg_";

			Variable_keywords_7_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_7_fg_;
			}

			virtual ~Variable_keywords_7_fg_() override = default;

			Variable_keywords_7_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_7_fg_;
			}

			Variable_keywords_7_fg_& operator=(const Variable_keywords_7_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_8_ : public VariableScopes
		{
			static constexpr auto name = "keywords_8_";

			Variable_keywords_8_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_8_;
			}

			virtual ~Variable_keywords_8_() override = default;

			Variable_keywords_8_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_8_;
			}

			Variable_keywords_8_& operator=(const Variable_keywords_8_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_keywords_8_fg_ : public VariableScopes
		{
			static constexpr auto name = "keywords_8_fg_";

			Variable_keywords_8_fg_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_8_fg_;
			}

			virtual ~Variable_keywords_8_fg_() override = default;

			Variable_keywords_8_fg_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::keywords_8_fg_;
			}

			Variable_keywords_8_fg_& operator=(const Variable_keywords_8_fg_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_extension_ : public VariableScopes
		{
			static constexpr auto name = "language_extension_";

			Variable_language_extension_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::language_extension_;
			}

			virtual ~Variable_language_extension_() override = default;

			Variable_language_extension_(
				UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::language_extension_;
			}

			Variable_language_extension_& operator=(const Variable_language_extension_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(
				UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(
				UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(
				UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(
				UDLSyntaxHighlighterTemplate* udlsyntaxhighlightertemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::tool::type::syntaxhighligher::
					UDLSyntaxHighlighterTemplate::Type::right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. UDLSyntaxHighlighterTemplate.member = "auto-generated";
		Variable_file_* file_ = new Variable_file_();
		Variable_keywords_1_* keywords_1_ = new Variable_keywords_1_();
		Variable_keywords_1_fg_* keywords_1_fg_ = new Variable_keywords_1_fg_();
		Variable_keywords_2_* keywords_2_ = new Variable_keywords_2_();
		Variable_keywords_2_fg_* keywords_2_fg_ = new Variable_keywords_2_fg_();
		Variable_keywords_3_* keywords_3_ = new Variable_keywords_3_();
		Variable_keywords_3_fg_* keywords_3_fg_ = new Variable_keywords_3_fg_();
		Variable_keywords_4_* keywords_4_ = new Variable_keywords_4_();
		Variable_keywords_4_fg_* keywords_4_fg_ = new Variable_keywords_4_fg_();
		Variable_keywords_5_* keywords_5_ = new Variable_keywords_5_();
		Variable_keywords_5_fg_* keywords_5_fg_ = new Variable_keywords_5_fg_();
		Variable_keywords_6_* keywords_6_ = new Variable_keywords_6_();
		Variable_keywords_6_fg_* keywords_6_fg_ = new Variable_keywords_6_fg_();
		Variable_keywords_7_* keywords_7_ = new Variable_keywords_7_();
		Variable_keywords_7_fg_* keywords_7_fg_ = new Variable_keywords_7_fg_();
		Variable_keywords_8_* keywords_8_ = new Variable_keywords_8_();
		Variable_keywords_8_fg_* keywords_8_fg_ = new Variable_keywords_8_fg_();
		Variable_language_extension_* language_extension_ = new Variable_language_extension_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();

	public:
		UDLSyntaxHighlighterTemplate()
		{
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*keywords_1_ = Variable_keywords_1_(this, std::vector<VariableBase*>({}));
			*keywords_1_fg_ = Variable_keywords_1_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_2_ = Variable_keywords_2_(this, std::vector<VariableBase*>({}));
			*keywords_2_fg_ = Variable_keywords_2_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_3_ = Variable_keywords_3_(this, std::vector<VariableBase*>({}));
			*keywords_3_fg_ = Variable_keywords_3_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_4_ = Variable_keywords_4_(this, std::vector<VariableBase*>({}));
			*keywords_4_fg_ = Variable_keywords_4_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_5_ = Variable_keywords_5_(this, std::vector<VariableBase*>({}));
			*keywords_5_fg_ = Variable_keywords_5_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_6_ = Variable_keywords_6_(this, std::vector<VariableBase*>({}));
			*keywords_6_fg_ = Variable_keywords_6_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_7_ = Variable_keywords_7_(this, std::vector<VariableBase*>({}));
			*keywords_7_fg_ = Variable_keywords_7_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*keywords_8_ = Variable_keywords_8_(this, std::vector<VariableBase*>({}));
			*keywords_8_fg_ = Variable_keywords_8_fg_(
				this, std::vector<VariableBase*>({GenerateVariable("000000")}));
			*language_extension_ =
				Variable_language_extension_(this, std::vector<VariableBase*>({}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));

			variables_.emplace_back(file_);
			variables_.emplace_back(keywords_1_);
			variables_.emplace_back(keywords_1_fg_);
			variables_.emplace_back(keywords_2_);
			variables_.emplace_back(keywords_2_fg_);
			variables_.emplace_back(keywords_3_);
			variables_.emplace_back(keywords_3_fg_);
			variables_.emplace_back(keywords_4_);
			variables_.emplace_back(keywords_4_fg_);
			variables_.emplace_back(keywords_5_);
			variables_.emplace_back(keywords_5_fg_);
			variables_.emplace_back(keywords_6_);
			variables_.emplace_back(keywords_6_fg_);
			variables_.emplace_back(keywords_7_);
			variables_.emplace_back(keywords_7_fg_);
			variables_.emplace_back(keywords_8_);
			variables_.emplace_back(keywords_8_fg_);
			variables_.emplace_back(language_extension_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
		}

		virtual ~UDLSyntaxHighlighterTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_TOOL_TYPE_SYNTAXHIGHLIGHER_UDLSYNTAXHIGHLIGHTERTEMPLATE_h
