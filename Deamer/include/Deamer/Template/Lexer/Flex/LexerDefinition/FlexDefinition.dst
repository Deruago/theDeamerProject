%option yylineno
%option noyywrap
{{optional_option_interactive}}
{{optional_option_unistd}}

%{
#include <iostream>
#include <sstream>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <clocale>
#include <cwchar>
#include <Deamer/External/Cpp/Lexer/TerminalObject.h>
{{flex_header_include}}
{{ast_include}}
{{optional_bison_integration_header}}
void showError();
extern int {{language_name}}lex();

static bool local_store     = false;
static bool include_deleted = false;

int {{column_name}}    = {{column_start}};
static int next_column = {{column_start}};

static std::size_t min(std::size_t a, std::size_t b);

static void handleColumn();
static void store(const deamer::external::cpp::lexer::TerminalObject* const newObject);
static std::vector<const deamer::external::cpp::lexer::TerminalObject*> 
local_objects;

{{optional_flex_yylval_override}}
#ifndef yyval
#define yyval yytext
#endif // yyval
%}

{{terminal_declaration.Variable_Field}}
{{unrecognized_terminal_regex}}

%%

{{terminal_action.Variable_Field}}
{{unrecognized_terminal_action}}

%%

static void store(const deamer::external::cpp::lexer::TerminalObject* const newObject)
{
	local_objects.push_back(newObject);
}

static void clear()
{
	local_objects.clear();
}

static void handleColumn()
{
	const std::string text = yytext;
	{{column_name}} = next_column;

	for (auto character : text)
	{
		next_column++;
		if (character == '\n')
		{
			next_column = {{column_start}};
		}
	}
}

static std::size_t min(std::size_t a, std::size_t b) {
    if (b < a)
	{
		return b;
	}
	else
	{
		return a;
	}
}

std::vector<const ::deamer::external::cpp::lexer::TerminalObject*> {{language_name}}::flex::lexer::Lexer::Tokenize(const std::string& text, ::deamer::external::cpp::lexer::TerminalConstructionPolicy constructionPolicy) const
{
	if (constructionPolicy == ::deamer::external::cpp::lexer::TerminalConstructionPolicy::include_deleted_terminals)
	{
		include_deleted = true;
	}
	else
	{
		include_deleted = false;
	}

	local_store = true;
	{{column_name}} = 0;

	YY_BUFFER_STATE buf;
	buf = yy_scan_string(text.c_str());
	yylex();
	yy_delete_buffer(buf);
	yylex_destroy();

	local_store = false;
	include_deleted = false;

	auto local_objects_copy = local_objects;
	clear();

	return local_objects_copy;
}