#ifndef DEAMER_TEMPLATES_FLEX_FLEXDEFINITIONTEMPLATE_h
#define DEAMER_TEMPLATES_FLEX_FLEXDEFINITIONTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace deamer::templates::flex
{
	/*!	\class FlexDefinitionTemplate
	 *
	 *	\brief Generates code for "FlexDefinitionTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class FlexDefinitionTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			action__,
			ast_include_,
			ast_include_nonterminal_,
			ast_include_terminal_,
			bison_integration_header_,
			debug_action_,
			file_,
			flex_header_include_,
			flex_yylval_override_,
			handle_column_,
			language_name_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			node_name_,
			option_interactive_,
			option_unistd_,
			optional_bison_integration_header_,
			optional_debug_action_,
			optional_flex_yylval_override_,
			optional_option_interactive_,
			optional_option_unistd_,
			return_action_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			terminal_action_,
			terminal_declaration_,
			terminal_id_,
			terminal_is_deleted_,
			terminal_is_transferred_,
			terminal_name_,
			terminal_regex_,
			unrecognized_terminal_action_,
			unrecognized_terminal_regex_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char*
		ConvertEnumToName(::deamer::templates::flex::FlexDefinitionTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::action__: {
				return "action_";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::ast_include_: {
				return "ast_include";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				ast_include_nonterminal_: {
				return "ast_include_nonterminal";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::ast_include_terminal_: {
				return "ast_include_terminal";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				bison_integration_header_: {
				return "bison_integration_header";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::debug_action_: {
				return "debug_action";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::file_: {
				return "file";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::flex_header_include_: {
				return "flex_header_include";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::flex_yylval_override_: {
				return "flex_yylval_override";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::handle_column_: {
				return "handle_column";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::language_name_: {
				return "language_name";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_bracket_: {
				return "left_bracket";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::node_name_: {
				return "node_name";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::option_interactive_: {
				return "option_interactive";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::option_unistd_: {
				return "option_unistd";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				optional_bison_integration_header_: {
				return "optional_bison_integration_header";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::optional_debug_action_: {
				return "optional_debug_action";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				optional_flex_yylval_override_: {
				return "optional_flex_yylval_override";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				optional_option_interactive_: {
				return "optional_option_interactive";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::optional_option_unistd_: {
				return "optional_option_unistd";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::return_action_: {
				return "return_action";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::right_bracket_: {
				return "right_bracket";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_action_: {
				return "terminal_action";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_declaration_: {
				return "terminal_declaration";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_id_: {
				return "terminal_id";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_is_deleted_: {
				return "terminal_is_deleted";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				terminal_is_transferred_: {
				return "terminal_is_transferred";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_name_: {
				return "terminal_name";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_regex_: {
				return "terminal_regex";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				unrecognized_terminal_action_: {
				return "unrecognized_terminal_action";
			}

			case ::deamer::templates::flex::FlexDefinitionTemplate::Type::
				unrecognized_terminal_regex_: {
				return "unrecognized_terminal_regex";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::deamer::templates::flex::FlexDefinitionTemplate::Type type =
				::deamer::templates::flex::FlexDefinitionTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::deamer::templates::flex::FlexDefinitionTemplate::ScopeType scope_type =
				::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::deamer::templates::flex::FlexDefinitionTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Upper_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Lower_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Snake_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Slash_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(
					  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::DoubleColon_,
					  true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ = new VariableScope(
				::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::Variable_Field_,
				true);
			VariableBase* variable_field_separator_ =
				new VariableScope("\n",
								  ::deamer::templates::flex::FlexDefinitionTemplate::ScopeType::
									  Variable_Field_Separator_,
								  true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_action__ : public VariableScopes
		{
			static constexpr auto name = "action__";

			Variable_action__() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::action__;
			}

			virtual ~Variable_action__() override = default;

			Variable_action__(FlexDefinitionTemplate* flexdefinitiontemplate_,
							  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::action__;
			}

			Variable_action__& operator=(const Variable_action__& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_ast_include_ : public VariableScopes
		{
			static constexpr auto name = "ast_include_";

			Variable_ast_include_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::ast_include_;
			}

			virtual ~Variable_ast_include_() override = default;

			Variable_ast_include_(FlexDefinitionTemplate* flexdefinitiontemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::ast_include_;
			}

			Variable_ast_include_& operator=(const Variable_ast_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_ast_include_nonterminal_ : public VariableScopes
		{
			static constexpr auto name = "ast_include_nonterminal_";

			Variable_ast_include_nonterminal_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					ast_include_nonterminal_;
			}

			virtual ~Variable_ast_include_nonterminal_() override = default;

			Variable_ast_include_nonterminal_(FlexDefinitionTemplate* flexdefinitiontemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					ast_include_nonterminal_;
			}

			Variable_ast_include_nonterminal_&
			operator=(const Variable_ast_include_nonterminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_ast_include_terminal_ : public VariableScopes
		{
			static constexpr auto name = "ast_include_terminal_";

			Variable_ast_include_terminal_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::ast_include_terminal_;
			}

			virtual ~Variable_ast_include_terminal_() override = default;

			Variable_ast_include_terminal_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::ast_include_terminal_;
			}

			Variable_ast_include_terminal_&
			operator=(const Variable_ast_include_terminal_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_bison_integration_header_ : public VariableScopes
		{
			static constexpr auto name = "bison_integration_header_";

			Variable_bison_integration_header_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					bison_integration_header_;
			}

			virtual ~Variable_bison_integration_header_() override = default;

			Variable_bison_integration_header_(FlexDefinitionTemplate* flexdefinitiontemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					bison_integration_header_;
			}

			Variable_bison_integration_header_&
			operator=(const Variable_bison_integration_header_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_debug_action_ : public VariableScopes
		{
			static constexpr auto name = "debug_action_";

			Variable_debug_action_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::debug_action_;
			}

			virtual ~Variable_debug_action_() override = default;

			Variable_debug_action_(FlexDefinitionTemplate* flexdefinitiontemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::debug_action_;
			}

			Variable_debug_action_& operator=(const Variable_debug_action_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(FlexDefinitionTemplate* flexdefinitiontemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("%option yylineno\n%option noyywrap\n"),
					 GenerateVariable(
						 flexdefinitiontemplate_->optional_option_interactive_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(flexdefinitiontemplate_->optional_option_unistd_->This()),
					 GenerateVariable("\n\n%"),
					 GenerateVariable("{"),
					 GenerateVariable("\n#include <iostream>\n#include <string>\n#include <stdio"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <string"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n#include <vector>\n#include "
									  "<Deamer/External/Cpp/Lexer/TerminalObject"),
					 GenerateVariable("."),
					 GenerateVariable("h>\n"),
					 GenerateVariable(flexdefinitiontemplate_->flex_header_include_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(flexdefinitiontemplate_->ast_include_->This()),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 flexdefinitiontemplate_->optional_bison_integration_header_->This()),
					 GenerateVariable("\nvoid showError();\nextern int "),
					 GenerateVariable(flexdefinitiontemplate_->language_name_->This()),
					 GenerateVariable(
						 "lex();\n\nstatic bool local_store = false;\nstatic bool include_deleted "
						 "= false;\nstatic int column = 0;\nstatic void handleColumn(const "
						 "std::string& text);\nstatic void store(const "
						 "deamer::external::cpp::lexer::TerminalObject* const newObject);\nstatic "
						 "std::vector<const deamer::external::cpp::lexer::TerminalObject*> "
						 "\nlocal_objects;\n\n"),
					 GenerateVariable(
						 flexdefinitiontemplate_->optional_flex_yylval_override_->This()),
					 GenerateVariable("\n#ifndef yyval\n#define yyval yytext\n#endif // yyval\n%"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n"),
					 GenerateVariable(
						 flexdefinitiontemplate_->terminal_declaration_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 flexdefinitiontemplate_->unrecognized_terminal_regex_->This()),
					 GenerateVariable("\n\n%%\n\n"),
					 GenerateVariable(flexdefinitiontemplate_->terminal_action_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable(
						 flexdefinitiontemplate_->unrecognized_terminal_action_->This()),
					 GenerateVariable(
						 "\n\n%%\n\nstatic void store(const "
						 "deamer::external::cpp::lexer::TerminalObject* const newObject)\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tlocal_objects"),
					 GenerateVariable("."),
					 GenerateVariable("push_back(newObject);\n"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\nstatic void clear()\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tlocal_objects"),
					 GenerateVariable("."),
					 GenerateVariable("clear();\n"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\nstatic void handleColumn(const std::string& text)\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tint& currentColumn = column;\n\tcurrentColumn += text"),
					 GenerateVariable("."),
					 GenerateVariable("size();\n\tfor (auto character : text)\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\tif (character == '"),
					 GenerateVariable("\\"),
					 GenerateVariable("n')\n\t\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\t\tcurrentColumn = 0;\n\t\t\tbreak;\n\t\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable(
						 "\n\nstd::vector<const ::deamer::external::cpp::lexer::TerminalObject*> "),
					 GenerateVariable(flexdefinitiontemplate_->language_name_->This()),
					 GenerateVariable("::flex::lexer::Lexer::Tokenize(const std::string& text, "
									  "::deamer::external::cpp::lexer::TerminalConstructionPolicy "
									  "constructionPolicy) const\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\tif (constructionPolicy == "
									  "::deamer::external::cpp::lexer::TerminalConstructionPolicy::"
									  "include_deleted_terminals)\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\tinclude_deleted = true;\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\telse\n\t"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t\tinclude_deleted = false;\n\t"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\n\tlocal_store = true;\n\tcolumn = "
									  "0;\n\n\tYY_BUFFER_STATE buf;\n\tbuf = yy_scan_string(text"),
					 GenerateVariable("."),
					 GenerateVariable(
						 "c_str());\n\tyylex();\n\tyy_delete_buffer(buf);\n\tyylex_destroy();"
						 "\n\n\tlocal_store = false;\n\tinclude_deleted = false;\n\n\tauto "
						 "local_objects_copy = local_objects;\n\tclear();\n\n\treturn "
						 "local_objects_copy;\n"),
					 GenerateVariable("}")}));
				Content_->type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("FlexDefinition")}));
				File_name_->type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("deamer::templates::flex")}));
				Namespace_->type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_flex_header_include_ : public VariableScopes
		{
			static constexpr auto name = "flex_header_include_";

			Variable_flex_header_include_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::flex_header_include_;
			}

			virtual ~Variable_flex_header_include_() override = default;

			Variable_flex_header_include_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::flex_header_include_;
			}

			Variable_flex_header_include_& operator=(const Variable_flex_header_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_flex_yylval_override_ : public VariableScopes
		{
			static constexpr auto name = "flex_yylval_override_";

			Variable_flex_yylval_override_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::flex_yylval_override_;
			}

			virtual ~Variable_flex_yylval_override_() override = default;

			Variable_flex_yylval_override_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::flex_yylval_override_;
			}

			Variable_flex_yylval_override_&
			operator=(const Variable_flex_yylval_override_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_handle_column_ : public VariableScopes
		{
			static constexpr auto name = "handle_column_";

			Variable_handle_column_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::handle_column_;
			}

			virtual ~Variable_handle_column_() override = default;

			Variable_handle_column_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::handle_column_;
			}

			Variable_handle_column_& operator=(const Variable_handle_column_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_name_ : public VariableScopes
		{
			static constexpr auto name = "language_name_";

			Variable_language_name_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::language_name_;
			}

			virtual ~Variable_language_name_() override = default;

			Variable_language_name_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::language_name_;
			}

			Variable_language_name_& operator=(const Variable_language_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(FlexDefinitionTemplate* flexdefinitiontemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_node_name_ : public VariableScopes
		{
			static constexpr auto name = "node_name_";

			Variable_node_name_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::node_name_;
			}

			virtual ~Variable_node_name_() override = default;

			Variable_node_name_(FlexDefinitionTemplate* flexdefinitiontemplate_,
								const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::node_name_;
			}

			Variable_node_name_& operator=(const Variable_node_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_option_interactive_ : public VariableScopes
		{
			static constexpr auto name = "option_interactive_";

			Variable_option_interactive_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::option_interactive_;
			}

			virtual ~Variable_option_interactive_() override = default;

			Variable_option_interactive_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::option_interactive_;
			}

			Variable_option_interactive_& operator=(const Variable_option_interactive_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_option_unistd_ : public VariableScopes
		{
			static constexpr auto name = "option_unistd_";

			Variable_option_unistd_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::option_unistd_;
			}

			virtual ~Variable_option_unistd_() override = default;

			Variable_option_unistd_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::option_unistd_;
			}

			Variable_option_unistd_& operator=(const Variable_option_unistd_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_bison_integration_header_ : public VariableScopes
		{
			static constexpr auto name = "optional_bison_integration_header_";

			Variable_optional_bison_integration_header_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_bison_integration_header_;
			}

			virtual ~Variable_optional_bison_integration_header_() override = default;

			Variable_optional_bison_integration_header_(
				FlexDefinitionTemplate* flexdefinitiontemplate_,
				const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_bison_integration_header_;
			}

			Variable_optional_bison_integration_header_&
			operator=(const Variable_optional_bison_integration_header_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_debug_action_ : public VariableScopes
		{
			static constexpr auto name = "optional_debug_action_";

			Variable_optional_debug_action_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::optional_debug_action_;
			}

			virtual ~Variable_optional_debug_action_() override = default;

			Variable_optional_debug_action_(FlexDefinitionTemplate* flexdefinitiontemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::optional_debug_action_;
			}

			Variable_optional_debug_action_&
			operator=(const Variable_optional_debug_action_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_flex_yylval_override_ : public VariableScopes
		{
			static constexpr auto name = "optional_flex_yylval_override_";

			Variable_optional_flex_yylval_override_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_flex_yylval_override_;
			}

			virtual ~Variable_optional_flex_yylval_override_() override = default;

			Variable_optional_flex_yylval_override_(FlexDefinitionTemplate* flexdefinitiontemplate_,
													const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_flex_yylval_override_;
			}

			Variable_optional_flex_yylval_override_&
			operator=(const Variable_optional_flex_yylval_override_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_option_interactive_ : public VariableScopes
		{
			static constexpr auto name = "optional_option_interactive_";

			Variable_optional_option_interactive_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_option_interactive_;
			}

			virtual ~Variable_optional_option_interactive_() override = default;

			Variable_optional_option_interactive_(FlexDefinitionTemplate* flexdefinitiontemplate_,
												  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_option_interactive_;
			}

			Variable_optional_option_interactive_&
			operator=(const Variable_optional_option_interactive_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_optional_option_unistd_ : public VariableScopes
		{
			static constexpr auto name = "optional_option_unistd_";

			Variable_optional_option_unistd_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_option_unistd_;
			}

			virtual ~Variable_optional_option_unistd_() override = default;

			Variable_optional_option_unistd_(FlexDefinitionTemplate* flexdefinitiontemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					optional_option_unistd_;
			}

			Variable_optional_option_unistd_&
			operator=(const Variable_optional_option_unistd_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_return_action_ : public VariableScopes
		{
			static constexpr auto name = "return_action_";

			Variable_return_action_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::return_action_;
			}

			virtual ~Variable_return_action_() override = default;

			Variable_return_action_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::return_action_;
			}

			Variable_return_action_& operator=(const Variable_return_action_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_action_ : public VariableScopes
		{
			static constexpr auto name = "terminal_action_";

			Variable_terminal_action_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_action_;
			}

			virtual ~Variable_terminal_action_() override = default;

			Variable_terminal_action_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_action_;
			}

			Variable_terminal_action_& operator=(const Variable_terminal_action_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_declaration_ : public VariableScopes
		{
			static constexpr auto name = "terminal_declaration_";

			Variable_terminal_declaration_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_declaration_;
			}

			virtual ~Variable_terminal_declaration_() override = default;

			Variable_terminal_declaration_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_declaration_;
			}

			Variable_terminal_declaration_&
			operator=(const Variable_terminal_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_id_ : public VariableScopes
		{
			static constexpr auto name = "terminal_id_";

			Variable_terminal_id_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_id_;
			}

			virtual ~Variable_terminal_id_() override = default;

			Variable_terminal_id_(FlexDefinitionTemplate* flexdefinitiontemplate_,
								  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_id_;
			}

			Variable_terminal_id_& operator=(const Variable_terminal_id_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_is_deleted_ : public VariableScopes
		{
			static constexpr auto name = "terminal_is_deleted_";

			Variable_terminal_is_deleted_() : VariableScopes()
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_is_deleted_;
			}

			virtual ~Variable_terminal_is_deleted_() override = default;

			Variable_terminal_is_deleted_(FlexDefinitionTemplate* flexdefinitiontemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_is_deleted_;
			}

			Variable_terminal_is_deleted_& operator=(const Variable_terminal_is_deleted_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_is_transferred_ : public VariableScopes
		{
			static constexpr auto name = "terminal_is_transferred_";

			Variable_terminal_is_transferred_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					terminal_is_transferred_;
			}

			virtual ~Variable_terminal_is_transferred_() override = default;

			Variable_terminal_is_transferred_(FlexDefinitionTemplate* flexdefinitiontemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					terminal_is_transferred_;
			}

			Variable_terminal_is_transferred_&
			operator=(const Variable_terminal_is_transferred_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_name_ : public VariableScopes
		{
			static constexpr auto name = "terminal_name_";

			Variable_terminal_name_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_name_;
			}

			virtual ~Variable_terminal_name_() override = default;

			Variable_terminal_name_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_name_;
			}

			Variable_terminal_name_& operator=(const Variable_terminal_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_regex_ : public VariableScopes
		{
			static constexpr auto name = "terminal_regex_";

			Variable_terminal_regex_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_regex_;
			}

			virtual ~Variable_terminal_regex_() override = default;

			Variable_terminal_regex_(FlexDefinitionTemplate* flexdefinitiontemplate_,
									 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::terminal_regex_;
			}

			Variable_terminal_regex_& operator=(const Variable_terminal_regex_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_unrecognized_terminal_action_ : public VariableScopes
		{
			static constexpr auto name = "unrecognized_terminal_action_";

			Variable_unrecognized_terminal_action_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					unrecognized_terminal_action_;
			}

			virtual ~Variable_unrecognized_terminal_action_() override = default;

			Variable_unrecognized_terminal_action_(FlexDefinitionTemplate* flexdefinitiontemplate_,
												   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					unrecognized_terminal_action_;
			}

			Variable_unrecognized_terminal_action_&
			operator=(const Variable_unrecognized_terminal_action_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_unrecognized_terminal_regex_ : public VariableScopes
		{
			static constexpr auto name = "unrecognized_terminal_regex_";

			Variable_unrecognized_terminal_regex_() : VariableScopes()
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					unrecognized_terminal_regex_;
			}

			virtual ~Variable_unrecognized_terminal_regex_() override = default;

			Variable_unrecognized_terminal_regex_(FlexDefinitionTemplate* flexdefinitiontemplate_,
												  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::deamer::templates::flex::FlexDefinitionTemplate::Type::
					unrecognized_terminal_regex_;
			}

			Variable_unrecognized_terminal_regex_&
			operator=(const Variable_unrecognized_terminal_regex_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. FlexDefinitionTemplate.member = "auto-generated";
		Variable_action__* action__ = new Variable_action__();
		Variable_ast_include_* ast_include_ = new Variable_ast_include_();
		Variable_ast_include_nonterminal_* ast_include_nonterminal_ =
			new Variable_ast_include_nonterminal_();
		Variable_ast_include_terminal_* ast_include_terminal_ =
			new Variable_ast_include_terminal_();
		Variable_bison_integration_header_* bison_integration_header_ =
			new Variable_bison_integration_header_();
		Variable_debug_action_* debug_action_ = new Variable_debug_action_();
		Variable_file_* file_ = new Variable_file_();
		Variable_flex_header_include_* flex_header_include_ = new Variable_flex_header_include_();
		Variable_flex_yylval_override_* flex_yylval_override_ =
			new Variable_flex_yylval_override_();
		Variable_handle_column_* handle_column_ = new Variable_handle_column_();
		Variable_language_name_* language_name_ = new Variable_language_name_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_node_name_* node_name_ = new Variable_node_name_();
		Variable_option_interactive_* option_interactive_ = new Variable_option_interactive_();
		Variable_option_unistd_* option_unistd_ = new Variable_option_unistd_();
		Variable_optional_bison_integration_header_* optional_bison_integration_header_ =
			new Variable_optional_bison_integration_header_();
		Variable_optional_debug_action_* optional_debug_action_ =
			new Variable_optional_debug_action_();
		Variable_optional_flex_yylval_override_* optional_flex_yylval_override_ =
			new Variable_optional_flex_yylval_override_();
		Variable_optional_option_interactive_* optional_option_interactive_ =
			new Variable_optional_option_interactive_();
		Variable_optional_option_unistd_* optional_option_unistd_ =
			new Variable_optional_option_unistd_();
		Variable_return_action_* return_action_ = new Variable_return_action_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_terminal_action_* terminal_action_ = new Variable_terminal_action_();
		Variable_terminal_declaration_* terminal_declaration_ =
			new Variable_terminal_declaration_();
		Variable_terminal_id_* terminal_id_ = new Variable_terminal_id_();
		Variable_terminal_is_deleted_* terminal_is_deleted_ = new Variable_terminal_is_deleted_();
		Variable_terminal_is_transferred_* terminal_is_transferred_ =
			new Variable_terminal_is_transferred_();
		Variable_terminal_name_* terminal_name_ = new Variable_terminal_name_();
		Variable_terminal_regex_* terminal_regex_ = new Variable_terminal_regex_();
		Variable_unrecognized_terminal_action_* unrecognized_terminal_action_ =
			new Variable_unrecognized_terminal_action_();
		Variable_unrecognized_terminal_regex_* unrecognized_terminal_regex_ =
			new Variable_unrecognized_terminal_regex_();

	public:
		FlexDefinitionTemplate()
		{
			*action__ = Variable_action__(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("if (local_store && !"),
						   GenerateVariable(terminal_is_deleted_->This()),
						   GenerateVariable(" || local_store && include_deleted) store(new "
											"deamer::external::cpp::lexer::TerminalObject(yyval, "
											"yylineno, column, std::size_t("),
						   GenerateVariable(terminal_id_->This()),
						   GenerateVariable("))); else if (local_store && "),
						   GenerateVariable(terminal_is_transferred_->This()),
						   GenerateVariable(
							   ") store(new deamer::external::cpp::lexer::TerminalObject(\"\", "
							   "yylineno, column, std::size_t("),
						   GenerateVariable(terminal_id_->This()),
						   GenerateVariable("))); else if (local_store && "),
						   GenerateVariable(terminal_is_deleted_->This()),
						   GenerateVariable("); else if (!"),
						   GenerateVariable(terminal_is_deleted_->This()),
						   GenerateVariable(" || include_deleted) "),
						   GenerateVariable(language_name_->This()),
						   GenerateVariable("lval"),
						   GenerateVariable("."),
						   GenerateVariable(
							   "Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, "
							   "yylineno, column, std::size_t("),
						   GenerateVariable(terminal_id_->This()),
						   GenerateVariable(")); else if ("),
						   GenerateVariable(terminal_is_transferred_->This()),
						   GenerateVariable(") "),
						   GenerateVariable(language_name_->This()),
						   GenerateVariable("lval"),
						   GenerateVariable("."),
						   GenerateVariable(
							   "Terminal = new deamer::external::cpp::lexer::TerminalObject(\"\", "
							   "yylineno, column, std::size_t("),
						   GenerateVariable(terminal_id_->This()),
						   GenerateVariable("));")}));
			*ast_include_ = Variable_ast_include_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Enum/Type"), GenerateVariable("."),
					 GenerateVariable("h\"\n"),
					 GenerateVariable(ast_include_terminal_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable(ast_include_nonterminal_->Variable_Field()),
					 GenerateVariable("\n")}));
			*ast_include_nonterminal_ = Variable_ast_include_nonterminal_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Node/"), GenerateVariable(node_name_->This()),
					 GenerateVariable("."), GenerateVariable("h\"")}));
			*ast_include_terminal_ = Variable_ast_include_terminal_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("#include \""), GenerateVariable(language_name_->This()),
					 GenerateVariable("/Ast/Node/"), GenerateVariable(node_name_->This()),
					 GenerateVariable("."), GenerateVariable("h\"")}));
			*bison_integration_header_ = Variable_bison_integration_header_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \"Bison/"),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("_parser"),
												  GenerateVariable("."), GenerateVariable("tab"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*debug_action_ = Variable_debug_action_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("std::cout << yytext << \" is a \" << "),
						   GenerateVariable(terminal_name_->This()), GenerateVariable(" << \""),
						   GenerateVariable("\\"), GenerateVariable("n\";")}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*flex_header_include_ = Variable_flex_header_include_(
				this, std::vector<VariableBase*>({GenerateVariable("#include \""),
												  GenerateVariable(language_name_->This()),
												  GenerateVariable("/Flex/Lexer"),
												  GenerateVariable("."), GenerateVariable("h\"")}));
			*flex_yylval_override_ = Variable_flex_yylval_override_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\n#ifndef "), GenerateVariable(language_name_->This()),
					 GenerateVariable("lval\nstruct "), GenerateVariable(language_name_->This()),
					 GenerateVariable("lval_t\n"), GenerateVariable("{"),
					 GenerateVariable(
						 "\n\t::deamer::external::lexer::TerminalObject* Terminal = nullptr;\n"),
					 GenerateVariable("}"), GenerateVariable(";\nauto "),
					 GenerateVariable(language_name_->This()), GenerateVariable("lval = "),
					 GenerateVariable(language_name_->This()),
					 GenerateVariable("lval_t();\n\n#endif // "),
					 GenerateVariable(language_name_->This()), GenerateVariable("lval;\n")}));
			*handle_column_ = Variable_handle_column_(
				this, std::vector<VariableBase*>({GenerateVariable("handleColumn(yyval);")}));
			*language_name_ = Variable_language_name_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*node_name_ = Variable_node_name_(this, std::vector<VariableBase*>({}));
			*option_interactive_ = Variable_option_interactive_(
				this, std::vector<VariableBase*>({GenerateVariable("%option never-interactive")}));
			*option_unistd_ = Variable_option_unistd_(
				this, std::vector<VariableBase*>({GenerateVariable("%option nounistd")}));
			*optional_bison_integration_header_ =
				Variable_optional_bison_integration_header_(this, std::vector<VariableBase*>({}));
			*optional_debug_action_ =
				Variable_optional_debug_action_(this, std::vector<VariableBase*>({}));
			*optional_flex_yylval_override_ =
				Variable_optional_flex_yylval_override_(this, std::vector<VariableBase*>({}));
			*optional_option_interactive_ =
				Variable_optional_option_interactive_(this, std::vector<VariableBase*>({}));
			*optional_option_unistd_ =
				Variable_optional_option_unistd_(this, std::vector<VariableBase*>({}));
			*return_action_ = Variable_return_action_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("if ((!local_store && "),
						   GenerateVariable(terminal_is_transferred_->This()),
						   GenerateVariable(") || (!local_store && include_deleted)) return ("),
						   GenerateVariable(terminal_name_->This()), GenerateVariable(");")}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*terminal_action_ = Variable_terminal_action_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(left_bracket_->This()),
						   GenerateVariable(terminal_name_->This()),
						   GenerateVariable(right_bracket_->This()), GenerateVariable("\t"),
						   GenerateVariable("{"), GenerateVariable(" "),
						   GenerateVariable(optional_debug_action_->This()), GenerateVariable(" "),
						   GenerateVariable(action__->This()), GenerateVariable(" "),
						   GenerateVariable(handle_column_->This()), GenerateVariable(" "),
						   GenerateVariable(return_action_->This()), GenerateVariable(" "),
						   GenerateVariable("}")}));
			*terminal_declaration_ = Variable_terminal_declaration_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable(terminal_name_->This()), GenerateVariable("\t("),
						   GenerateVariable(terminal_regex_->This()), GenerateVariable(")")}));
			*terminal_id_ = Variable_terminal_id_(this, std::vector<VariableBase*>({}));
			*terminal_is_deleted_ =
				Variable_terminal_is_deleted_(this, std::vector<VariableBase*>({}));
			*terminal_is_transferred_ =
				Variable_terminal_is_transferred_(this, std::vector<VariableBase*>({}));
			*terminal_name_ = Variable_terminal_name_(this, std::vector<VariableBase*>({}));
			*terminal_regex_ = Variable_terminal_regex_(this, std::vector<VariableBase*>({}));
			*unrecognized_terminal_action_ = Variable_unrecognized_terminal_action_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("{"),
						   GenerateVariable("DEAMER_RESERVED_UNRECOGNIZED_RULE_MATCH"),
						   GenerateVariable("}"), GenerateVariable(" "), GenerateVariable("{"),
						   GenerateVariable(" if (local_store && include_deleted) store(new "
											"deamer::external::cpp::lexer::TerminalObject(yyval, "
											"yylineno, column, std::size_t(0))); "),
						   GenerateVariable("}")}));
			*unrecognized_terminal_regex_ = Variable_unrecognized_terminal_regex_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("DEAMER_RESERVED_UNRECOGNIZED_RULE_MATCH\t("),
						   GenerateVariable("."), GenerateVariable(")")}));

			variables_.emplace_back(action__);
			variables_.emplace_back(ast_include_);
			variables_.emplace_back(ast_include_nonterminal_);
			variables_.emplace_back(ast_include_terminal_);
			variables_.emplace_back(bison_integration_header_);
			variables_.emplace_back(debug_action_);
			variables_.emplace_back(file_);
			variables_.emplace_back(flex_header_include_);
			variables_.emplace_back(flex_yylval_override_);
			variables_.emplace_back(handle_column_);
			variables_.emplace_back(language_name_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(node_name_);
			variables_.emplace_back(option_interactive_);
			variables_.emplace_back(option_unistd_);
			variables_.emplace_back(optional_bison_integration_header_);
			variables_.emplace_back(optional_debug_action_);
			variables_.emplace_back(optional_flex_yylval_override_);
			variables_.emplace_back(optional_option_interactive_);
			variables_.emplace_back(optional_option_unistd_);
			variables_.emplace_back(return_action_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(terminal_action_);
			variables_.emplace_back(terminal_declaration_);
			variables_.emplace_back(terminal_id_);
			variables_.emplace_back(terminal_is_deleted_);
			variables_.emplace_back(terminal_is_transferred_);
			variables_.emplace_back(terminal_name_);
			variables_.emplace_back(terminal_regex_);
			variables_.emplace_back(unrecognized_terminal_action_);
			variables_.emplace_back(unrecognized_terminal_regex_);
		}

		virtual ~FlexDefinitionTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DEAMER_TEMPLATES_FLEX_FLEXDEFINITIONTEMPLATE_h
